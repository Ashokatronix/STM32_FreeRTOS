
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000730c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007664  08007664  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007664  08007664  00008664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800766c  0800766c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0000866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007670  08007670  00008670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007674  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  20000018  0800768c  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144a4  0800768c  000094a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a08  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fe  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00021d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  00023200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e4c  00000000  00000000  000241e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e37  00000000  00000000  0004a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef0d0  00000000  00000000  00061e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  00150f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0015658c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074c4 	.word	0x080074c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	080074c4 	.word	0x080074c4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed0 	.word	0x20012ed0

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fabf 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f873 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8dd 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <main+0xd4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <main+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005ee:	482e      	ldr	r0, [pc, #184]	@ (80006a8 <main+0xd8>)
 80005f0:	f004 fcbe 	bl	8004f70 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 80005f4:	f004 fae6 	bl	8004bc4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005f8:	f006 f86c 	bl	80066d4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(greenLED_handler, "greenH-1", 200, NULL, 2, &task1_handle);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	@ 0xc8
 800060a:	4928      	ldr	r1, [pc, #160]	@ (80006ac <main+0xdc>)
 800060c:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <main+0xe0>)
 800060e:	f002 fa24 	bl	8002a5a <xTaskCreate>
 8000612:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00b      	beq.n	8000632 <main+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x5e>

  status = xTaskCreate(redLED_handler, "redH-2", 200, NULL, 2, &task2_handle);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	@ 0xc8
 8000640:	491c      	ldr	r1, [pc, #112]	@ (80006b4 <main+0xe4>)
 8000642:	481d      	ldr	r0, [pc, #116]	@ (80006b8 <main+0xe8>)
 8000644:	f002 fa09 	bl	8002a5a <xTaskCreate>
 8000648:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00b      	beq.n	8000668 <main+0x98>
    __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	617b      	str	r3, [r7, #20]
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x94>

  status = xTaskCreate(blueLED_handler, "blueH-3",200, NULL, 2, &task3_handle);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	4911      	ldr	r1, [pc, #68]	@ (80006bc <main+0xec>)
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <main+0xf0>)
 8000678:	f002 f9ef 	bl	8002a5a <xTaskCreate>
 800067c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <main+0xcc>
    __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	613b      	str	r3, [r7, #16]
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0xc8>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 800069c:	f002 fbce 	bl	8002e3c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <main+0xd0>
 80006a4:	e0001000 	.word	0xe0001000
 80006a8:	0007a120 	.word	0x0007a120
 80006ac:	080074dc 	.word	0x080074dc
 80006b0:	08000899 	.word	0x08000899
 80006b4:	080074e8 	.word	0x080074e8
 80006b8:	080008c5 	.word	0x080008c5
 80006bc:	080074f0 	.word	0x080074f0
 80006c0:	080008f1 	.word	0x080008f1

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 febc 	bl	8007450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xd4>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	@ 0xa8
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f857 	bl	8001800 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000758:	f000 f8f2 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fcd8 	bl	8001130 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 f8db 	bl	8000940 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a26      	ldr	r2, [pc, #152]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fc4e 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <MX_GPIO_Init+0xf8>)
 8000844:	f000 faac 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000848:	230c      	movs	r3, #12
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000864:	f000 fa9c 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000880:	f000 fa8e 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <greenLED_handler>:
/* USER CODE BEGIN 4 */
#define GreenPIN GPIO_PIN_3
#define RedPIN	GPIO_PIN_4
#define BluePIN	LD2_Pin
static void greenLED_handler(void* parameters)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	while(1)
  	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008a0:	4806      	ldr	r0, [pc, #24]	@ (80008bc <greenLED_handler+0x24>)
 80008a2:	f006 fd27 	bl	80072f4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GreenPIN);
 80008a6:	2108      	movs	r1, #8
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <greenLED_handler+0x28>)
 80008aa:	f000 fc26 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b2:	f002 fa41 	bl	8002d38 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008b6:	bf00      	nop
 80008b8:	e7f2      	b.n	80008a0 <greenLED_handler+0x8>
 80008ba:	bf00      	nop
 80008bc:	080074f8 	.word	0x080074f8
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <redLED_handler>:

  	}
}

static void redLED_handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	while(1)
  	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <redLED_handler+0x24>)
 80008ce:	f006 fd11 	bl	80072f4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, RedPIN);
 80008d2:	2110      	movs	r1, #16
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <redLED_handler+0x28>)
 80008d6:	f000 fc10 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 80008da:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80008de:	f002 fa2b 	bl	8002d38 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008e2:	bf00      	nop
 80008e4:	e7f2      	b.n	80008cc <redLED_handler+0x8>
 80008e6:	bf00      	nop
 80008e8:	0800750c 	.word	0x0800750c
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <blueLED_handler>:
  	}

}

static void blueLED_handler(void* parameters)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80008f8:	4806      	ldr	r0, [pc, #24]	@ (8000914 <blueLED_handler+0x24>)
 80008fa:	f006 fcfb 	bl	80072f4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, BluePIN);
 80008fe:	2120      	movs	r1, #32
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <blueLED_handler+0x28>)
 8000902:	f000 fbfa 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 8000906:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800090a:	f002 fa15 	bl	8002d38 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 800090e:	bf00      	nop
 8000910:	e7f2      	b.n	80008f8 <blueLED_handler+0x8>
 8000912:	bf00      	nop
 8000914:	08007520 	.word	0x08007520
 8000918:	40020c00 	.word	0x40020c00

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f935 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40001000 	.word	0x40001000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800098a:	f003 fce3 	bl	8004354 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	@ 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a32      	ldr	r2, [pc, #200]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fcb2 	bl	800133c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f000 fc97 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f000 fc93 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <HAL_InitTick+0xe8>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_InitTick+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a2a:	f001 f987 	bl	8001d3c <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a3e:	f001 f9d7 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a50:	2036      	movs	r0, #54	@ 0x36
 8000a52:	f000 f997 	bl	8000d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2036      	movs	r0, #54	@ 0x36
 8000a62:	f000 f973 	bl	8000d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0xf4>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3738      	adds	r7, #56	@ 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	20000034 	.word	0x20000034
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM6_DAC_IRQHandler+0x10>)
 8000ad2:	f001 f9fd 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000034 	.word	0x20000034

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fc95 	bl	8007460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd4b 	bl	80005d0 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b48:	08007674 	.word	0x08007674
  ldr r2, =_sbss
 8000b4c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b50:	200144a4 	.word	0x200144a4

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8d8 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ff08 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fede 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000007c 	.word	0x2000007c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000007c 	.word	0x2000007c

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	@ (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	@ (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	@ (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	@ (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	@ (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	@ (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43d9      	mvns	r1, r3
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	400b      	ands	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcd0 	bl	8000bc4 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fccc 	bl	8000bc4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f873 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb60 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	0800760c 	.word	0x0800760c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	@ (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	0800761c 	.word	0x0800761c

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0ae      	sub	sp, #184	@ 0xb8
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4bcb      	ldr	r3, [pc, #812]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f200 8206 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x440>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017e1 	.word	0x080017e1
 80013e8:	080017e1 	.word	0x080017e1
 80013ec:	08001419 	.word	0x08001419
 80013f0:	080017e1 	.word	0x080017e1
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	080017e1 	.word	0x080017e1
 80013fc:	08001421 	.word	0x08001421
 8001400:	080017e1 	.word	0x080017e1
 8001404:	080017e1 	.word	0x080017e1
 8001408:	080017e1 	.word	0x080017e1
 800140c:	08001611 	.word	0x08001611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4bb9      	ldr	r3, [pc, #740]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e7      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4bb8      	ldr	r3, [pc, #736]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800141e:	e1e3      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4bb4      	ldr	r3, [pc, #720]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4bb1      	ldr	r3, [pc, #708]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d071      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4bae      	ldr	r3, [pc, #696]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800145a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	6439      	str	r1, [r7, #64]	@ 0x40
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001490:	4649      	mov	r1, r9
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4641      	mov	r1, r8
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4641      	mov	r1, r8
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014c2:	4641      	mov	r1, r8
 80014c4:	00ca      	lsls	r2, r1, #3
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	4622      	mov	r2, r4
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	462b      	mov	r3, r5
 80014d4:	460a      	mov	r2, r1
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e8:	4629      	mov	r1, r5
 80014ea:	024b      	lsls	r3, r1, #9
 80014ec:	4621      	mov	r1, r4
 80014ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f2:	4621      	mov	r1, r4
 80014f4:	024a      	lsls	r2, r1, #9
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800150c:	f7fe feca 	bl	80002a4 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800151a:	e067      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800153a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	0159      	lsls	r1, r3, #5
 800154c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001550:	0150      	lsls	r0, r2, #5
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4621      	mov	r1, r4
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800155c:	4629      	mov	r1, r5
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001570:	4649      	mov	r1, r9
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157a:	4641      	mov	r1, r8
 800157c:	018a      	lsls	r2, r1, #6
 800157e:	4641      	mov	r1, r8
 8001580:	ebb2 0a01 	subs.w	sl, r2, r1
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0b01 	sbc.w	fp, r3, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800159a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	eb1a 0303 	adds.w	r3, sl, r3
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	462b      	mov	r3, r5
 80015ac:	eb4b 0303 	adc.w	r3, fp, r3
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015be:	4629      	mov	r1, r5
 80015c0:	028b      	lsls	r3, r1, #10
 80015c2:	4621      	mov	r1, r4
 80015c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c8:	4621      	mov	r1, r4
 80015ca:	028a      	lsls	r2, r1, #10
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80015da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015de:	f7fe fe61 	bl	80002a4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015ec:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800160e:	e0eb      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06b      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	663b      	str	r3, [r7, #96]	@ 0x60
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0159      	lsls	r1, r3, #5
 8001652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001656:	0150      	lsls	r0, r2, #5
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4621      	mov	r1, r4
 800165e:	1a51      	subs	r1, r2, r1
 8001660:	61b9      	str	r1, [r7, #24]
 8001662:	4629      	mov	r1, r5
 8001664:	eb63 0301 	sbc.w	r3, r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001676:	4659      	mov	r1, fp
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4651      	mov	r1, sl
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ebb2 0801 	subs.w	r8, r2, r1
 800168a:	4659      	mov	r1, fp
 800168c:	eb63 0901 	sbc.w	r9, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800169c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb18 0303 	adds.w	r3, r8, r3
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb49 0303 	adc.w	r3, r9, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c4:	4629      	mov	r1, r5
 80016c6:	024b      	lsls	r3, r1, #9
 80016c8:	4621      	mov	r1, r4
 80016ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ce:	4621      	mov	r1, r4
 80016d0:	024a      	lsls	r2, r1, #9
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016da:	2200      	movs	r2, #0
 80016dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016e4:	f7fe fdde 	bl	80002a4 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016f2:	e065      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x420>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	4611      	mov	r1, r2
 800170c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001710:	653b      	str	r3, [r7, #80]	@ 0x50
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	@ 0x54
 8001716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4641      	mov	r1, r8
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	1a54      	subs	r4, r2, r1
 800175e:	4659      	mov	r1, fp
 8001760:	eb63 0501 	sbc.w	r5, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017b2:	f7fe fd77 	bl	80002a4 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0f1b      	lsrs	r3, r3, #28
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e003      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	37b8      	adds	r7, #184	@ 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400

08001800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e28d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8083 	beq.w	8001926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001820:	4b94      	ldr	r3, [pc, #592]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800182c:	4b91      	ldr	r3, [pc, #580]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
        || \
 8001834:	2b08      	cmp	r3, #8
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b8e      	ldr	r3, [pc, #568]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x124>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e25a      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x90>
 8001882:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xb4>
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f976 	bl	8000bc4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f972 	bl	8000bc4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xdc>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f962 	bl	8000bc4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f95e 	bl	8000bc4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x104>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001932:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
        || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1d3      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f90b 	bl	8000bc4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f907 	bl	8000bc4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b4      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8ea 	bl	8000bc4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8e6 	bl	8000bc4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e193      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f8ca 	bl	8000bc4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8c6 	bl	8000bc4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e173      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x234>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8b3 	bl	8000bc4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8af 	bl	8000bc4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b79      	ldr	r3, [pc, #484]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f86f 	bl	8000bc4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f86b 	bl	8000bc4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e118      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x31e>
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x340>
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a60      	ldr	r2, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f830 	bl	8000bc4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff f82c 	bl	8000bc4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0d7      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x368>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f81a 	bl	8000bc4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f816 	bl	8000bc4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0c1      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ad 	beq.w	8001d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d145      	bne.n	8001c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ffea 	bl	8000bc4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe ffe6 	bl	8000bc4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e093      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	491b      	ldr	r1, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ffbb 	bl	8000bc4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe ffb7 	bl	8000bc4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e064      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x452>
 8001c70:	e05c      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ffa4 	bl	8000bc4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ffa0 	bl	8000bc4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_OscConfig+0x538>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d122      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9c0 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d2 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8d5 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8ac 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89e 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8af 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0208 	mvn.w	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f886 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f878 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f889 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f860 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f852 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f863 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0201 	mvn.w	r2, #1
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc70 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f906 	bl	800226c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f834 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8d8 	bl	8002258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a46      	ldr	r2, [pc, #280]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a43      	ldr	r2, [pc, #268]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a42      	ldr	r2, [pc, #264]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a41      	ldr	r2, [pc, #260]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a40      	ldr	r2, [pc, #256]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a35      	ldr	r2, [pc, #212]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a32      	ldr	r2, [pc, #200]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a31      	ldr	r2, [pc, #196]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2f      	ldr	r2, [pc, #188]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <TIM_Base_SetConfig+0x140>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <TIM_Base_SetConfig+0x144>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <TIM_Base_SetConfig+0x148>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <TIM_Base_SetConfig+0x14c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002250 <TIM_Base_SetConfig+0x150>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a29      	ldr	r2, [pc, #164]	@ (8002254 <TIM_Base_SetConfig+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0xf8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f023 0201 	bic.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40010400 	.word	0x40010400
 8002240:	40014000 	.word	0x40014000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	40001800 	.word	0x40001800
 8002250:	40001c00 	.word	0x40001c00
 8002254:	40002000 	.word	0x40002000

08002258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0208 	add.w	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0208 	add.w	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022b4:	f240 1019 	movw	r0, #281	@ 0x119
 80022b8:	f004 fd50 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022d2:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022d6:	f004 fd41 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d103      	bne.n	8002302 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e00c      	b.n	800231c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3308      	adds	r3, #8
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e002      	b.n	8002310 <vListInsert+0x2e>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d2f6      	bcs.n	800230a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002348:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800234c:	f004 fd06 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6852      	ldr	r2, [r2, #4]
 8002378:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d103      	bne.n	800238c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f240 101d 	movw	r0, #285	@ 0x11d
 80023a6:	f004 fd15 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023c2:	2301      	movs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xQueueGenericReset+0x30>
    __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60fb      	str	r3, [r7, #12]
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05d      	beq.n	80024aa <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d059      	beq.n	80024aa <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	2100      	movs	r1, #0
 8002400:	fba3 2302 	umull	r2, r3, r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d000      	beq.n	800240a <xQueueGenericReset+0x52>
 8002408:	2101      	movs	r1, #1
 800240a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800240c:	2b00      	cmp	r3, #0
 800240e:	d14c      	bne.n	80024aa <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002410:	f002 f820 	bl	8004454 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	441a      	add	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2200      	movs	r2, #0
 800242e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	3b01      	subs	r3, #1
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	441a      	add	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	22ff      	movs	r2, #255	@ 0xff
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	22ff      	movs	r2, #255	@ 0xff
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d114      	bne.n	8002490 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01a      	beq.n	80024a4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3310      	adds	r3, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f884 	bl	8003580 <xTaskRemoveFromEventList>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <xQueueGenericReset+0x128>)
 8002480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	e009      	b.n	80024a4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3310      	adds	r3, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fef3 	bl	8002280 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3324      	adds	r3, #36	@ 0x24
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff feee 	bl	8002280 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024a4:	f002 f808 	bl	80044b8 <vPortExitCritical>
 80024a8:	e001      	b.n	80024ae <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <xQueueGenericReset+0x114>
    __asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	60bb      	str	r3, [r7, #8]
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2096      	movs	r0, #150	@ 0x96
 80024d2:	f004 fc7f 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80024d6:	697b      	ldr	r3, [r7, #20]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02e      	beq.n	800255a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024fc:	2100      	movs	r1, #0
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	fba3 2302 	umull	r2, r3, r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d000      	beq.n	800250c <xQueueGenericCreate+0x28>
 800250a:	2101      	movs	r1, #1
 800250c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d123      	bne.n	800255a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800251a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800251e:	d81c      	bhi.n	800255a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3350      	adds	r3, #80	@ 0x50
 800252e:	4618      	mov	r0, r3
 8002530:	f002 f8be 	bl	80046b0 <pvPortMalloc>
 8002534:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01d      	beq.n	8002578 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3350      	adds	r3, #80	@ 0x50
 8002544:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f81e 	bl	8002594 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002558:	e00e      	b.n	8002578 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <xQueueGenericCreate+0x94>
    __asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	613b      	str	r3, [r7, #16]
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fdc4 	bl	8007108 <SEGGER_SYSVIEW_ShrinkId>
 8002580:	4603      	mov	r3, r0
 8002582:	4619      	mov	r1, r3
 8002584:	2098      	movs	r0, #152	@ 0x98
 8002586:	f004 fc25 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800258a:	69fb      	ldr	r3, [r7, #28]
    }
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e002      	b.n	80025b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c2:	2101      	movs	r1, #1
 80025c4:	69b8      	ldr	r0, [r7, #24]
 80025c6:	f7ff fef7 	bl	80023b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	@ 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <xQueueReceive+0x32>
    __asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	623b      	str	r3, [r7, #32]
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <xQueueReceive+0x40>
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <xQueueReceive+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <xQueueReceive+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <xQueueReceive+0x62>
    __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	61fb      	str	r3, [r7, #28]
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800263e:	f001 f9c1 	bl	80039c4 <xTaskGetSchedulerState>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <xQueueReceive+0x72>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <xQueueReceive+0x76>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <xQueueReceive+0x78>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <xQueueReceive+0x94>
    __asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	61bb      	str	r3, [r7, #24]
}
 800266a:	bf00      	nop
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002670:	f001 fef0 	bl	8004454 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002684:	f000 f898 	bl	80027b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	3310      	adds	r3, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f000 ff6f 	bl	8003580 <xTaskRemoveFromEventList>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026a8:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <xQueueReceive+0x1d8>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026b8:	f001 fefe 	bl	80044b8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80026bc:	2101      	movs	r1, #1
 80026be:	20a4      	movs	r0, #164	@ 0xa4
 80026c0:	f004 fb88 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e071      	b.n	80027ac <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026ce:	f001 fef3 	bl	80044b8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80026d2:	2100      	movs	r1, #0
 80026d4:	20a4      	movs	r0, #164	@ 0xa4
 80026d6:	f004 fb7d 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80026da:	2300      	movs	r3, #0
 80026dc:	e066      	b.n	80027ac <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 f829 	bl	8003740 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026f2:	f001 fee1 	bl	80044b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026f6:	f000 fbfb 	bl	8002ef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026fa:	f001 feab 	bl	8004454 <vPortEnterCritical>
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002704:	b25b      	sxtb	r3, r3
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d103      	bne.n	8002714 <xQueueReceive+0x138>
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800271a:	b25b      	sxtb	r3, r3
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d103      	bne.n	800272a <xQueueReceive+0x14e>
 8002722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800272a:	f001 fec5 	bl	80044b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800272e:	1d3a      	adds	r2, r7, #4
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f81a 	bl	8003770 <xTaskCheckForTimeOut>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d123      	bne.n	800278a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002744:	f000 f8b0 	bl	80028a8 <prvIsQueueEmpty>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d017      	beq.n	800277e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fea0 	bl	800349c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800275c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800275e:	f000 f851 	bl	8002804 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002762:	f000 fbd3 	bl	8002f0c <xTaskResumeAll>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d181      	bne.n	8002670 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <xQueueReceive+0x1d8>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	e778      	b.n	8002670 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800277e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002780:	f000 f840 	bl	8002804 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002784:	f000 fbc2 	bl	8002f0c <xTaskResumeAll>
 8002788:	e772      	b.n	8002670 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800278a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800278c:	f000 f83a 	bl	8002804 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002790:	f000 fbbc 	bl	8002f0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002796:	f000 f887 	bl	80028a8 <prvIsQueueEmpty>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f43f af67 	beq.w	8002670 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027a2:	2100      	movs	r1, #0
 80027a4:	20a4      	movs	r0, #164	@ 0xa4
 80027a6:	f004 fb15 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80027aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3730      	adds	r7, #48	@ 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d018      	beq.n	80027fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	441a      	add	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d303      	bcc.n	80027ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	461a      	mov	r2, r3
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f004 fe56 	bl	80074a8 <memcpy>
    }
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800280c:	f001 fe22 	bl	8004454 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002816:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002818:	e011      	b.n	800283e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3324      	adds	r3, #36	@ 0x24
 8002826:	4618      	mov	r0, r3
 8002828:	f000 feaa 	bl	8003580 <xTaskRemoveFromEventList>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002832:	f001 f809 	bl	8003848 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3b01      	subs	r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	dce9      	bgt.n	800281a <prvUnlockQueue+0x16>
 8002846:	e000      	b.n	800284a <prvUnlockQueue+0x46>
                    break;
 8002848:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	22ff      	movs	r2, #255	@ 0xff
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002852:	f001 fe31 	bl	80044b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002856:	f001 fdfd 	bl	8004454 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002860:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002862:	e011      	b.n	8002888 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3310      	adds	r3, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fe85 	bl	8003580 <xTaskRemoveFromEventList>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800287c:	f000 ffe4 	bl	8003848 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	3b01      	subs	r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800288c:	2b00      	cmp	r3, #0
 800288e:	dce9      	bgt.n	8002864 <prvUnlockQueue+0x60>
 8002890:	e000      	b.n	8002894 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002892:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	22ff      	movs	r2, #255	@ 0xff
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800289c:	f001 fe0c 	bl	80044b8 <vPortExitCritical>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028b0:	f001 fdd0 	bl	8004454 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028bc:	2301      	movs	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e001      	b.n	80028c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028c6:	f001 fdf7 	bl	80044b8 <vPortExitCritical>

    return xReturn;
 80028ca:	68fb      	ldr	r3, [r7, #12]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	60fb      	str	r3, [r7, #12]
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e01e      	b.n	800294a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800290c:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <vQueueAddToRegistry+0x9c>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d105      	bne.n	8002928 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <vQueueAddToRegistry+0x9c>)
 8002922:	4413      	add	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
                    break;
 8002926:	e013      	b.n	8002950 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <vQueueAddToRegistry+0x70>
 800292e:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <vQueueAddToRegistry+0x9c>)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <vQueueAddToRegistry+0x9c>)
 8002940:	4413      	add	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9dd      	bls.n	800290c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002962:	20b6      	movs	r0, #182	@ 0xb6
 8002964:	f004 f9fa 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000080 	.word	0x20000080

08002974 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002984:	f001 fd66 	bl	8004454 <vPortEnterCritical>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d103      	bne.n	800299e <vQueueWaitForMessageRestricted+0x2a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d103      	bne.n	80029b4 <vQueueWaitForMessageRestricted+0x40>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029b4:	f001 fd80 	bl	80044b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3324      	adds	r3, #36	@ 0x24
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd8f 	bl	80034ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff18 	bl	8002804 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80029d4:	20b9      	movs	r0, #185	@ 0xb9
 80029d6:	f004 f9c1 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	@ 0x28
 80029e6:	af04      	add	r7, sp, #16
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fe5b 	bl	80046b0 <pvPortMalloc>
 80029fa:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d013      	beq.n	8002a2a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002a02:	2058      	movs	r0, #88	@ 0x58
 8002a04:	f001 fe54 	bl	80046b0 <pvPortMalloc>
 8002a08:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a10:	2258      	movs	r2, #88	@ 0x58
 8002a12:	2100      	movs	r1, #0
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f004 fd1b 	bl	8007450 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a20:	e005      	b.n	8002a2e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a22:	6938      	ldr	r0, [r7, #16]
 8002a24:	f001 ff76 	bl	8004914 <vPortFree>
 8002a28:	e001      	b.n	8002a2e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00d      	beq.n	8002a50 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a34:	2300      	movs	r3, #0
 8002a36:	9303      	str	r3, [sp, #12]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9302      	str	r3, [sp, #8]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f82d 	bl	8002aaa <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a50:	697b      	ldr	r3, [r7, #20]
    }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ffb3 	bl	80029e2 <prvCreateTask>
 8002a7c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a84:	6938      	ldr	r0, [r7, #16]
 8002a86:	f000 f8a1 	bl	8002bcc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e002      	b.n	8002a96 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	20c2      	movs	r0, #194	@ 0xc2
 8002a9c:	f004 f99a 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002aa0:	697b      	ldr	r3, [r7, #20]
    }
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b088      	sub	sp, #32
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	21a5      	movs	r1, #165	@ 0xa5
 8002ac4:	f004 fcc4 	bl	8007450 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f023 0307 	bic.w	r3, r3, #7
 8002ae0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	617b      	str	r3, [r7, #20]
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01e      	beq.n	8002b48 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e012      	b.n	8002b36 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	7819      	ldrb	r1, [r3, #0]
 8002b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3334      	adds	r3, #52	@ 0x34
 8002b20:	460a      	mov	r2, r1
 8002b22:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d9e9      	bls.n	8002b10 <prvInitialiseNewTask+0x66>
 8002b3c:	e000      	b.n	8002b40 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b3e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d90b      	bls.n	8002b66 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	613b      	str	r3, [r7, #16]
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	e7fd      	b.n	8002b62 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d901      	bls.n	8002b70 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b7a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb9f 	bl	80022c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	3318      	adds	r3, #24
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fb9a 	bl	80022c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b94:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	f1c3 0205 	rsb	r2, r3, #5
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	69b8      	ldr	r0, [r7, #24]
 8002bac:	f001 fa52 	bl	8004054 <pxPortInitialiseStack>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bc2:	bf00      	nop
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002bd4:	f001 fc3e 	bl	8004454 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <prvAddNewTaskToReadyList+0x150>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	4a4f      	ldr	r2, [pc, #316]	@ (8002d1c <prvAddNewTaskToReadyList+0x150>)
 8002be0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002be2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d20 <prvAddNewTaskToReadyList+0x154>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002bea:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <prvAddNewTaskToReadyList+0x154>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002d1c <prvAddNewTaskToReadyList+0x150>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002bf8:	f000 fe4a 	bl	8003890 <prvInitialiseTaskLists>
 8002bfc:	e00d      	b.n	8002c1a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002bfe:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <prvAddNewTaskToReadyList+0x158>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c06:	4b46      	ldr	r3, [pc, #280]	@ (8002d20 <prvAddNewTaskToReadyList+0x154>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d802      	bhi.n	8002c1a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002c14:	4a42      	ldr	r2, [pc, #264]	@ (8002d20 <prvAddNewTaskToReadyList+0x154>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <prvAddNewTaskToReadyList+0x15c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a41      	ldr	r2, [pc, #260]	@ (8002d28 <prvAddNewTaskToReadyList+0x15c>)
 8002c22:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c24:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <prvAddNewTaskToReadyList+0x15c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <prvAddNewTaskToReadyList+0x94>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f941 	bl	8006ebc <SEGGER_SYSVIEW_OnTaskCreate>
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461c      	mov	r4, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	1ae3      	subs	r3, r4, r3
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	f002 f854 	bl	8004d08 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 f9ae 	bl	8006fc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <prvAddNewTaskToReadyList+0x160>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a2d      	ldr	r2, [pc, #180]	@ (8002d2c <prvAddNewTaskToReadyList+0x160>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7e:	492c      	ldr	r1, [pc, #176]	@ (8002d30 <prvAddNewTaskToReadyList+0x164>)
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	3204      	adds	r2, #4
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1d1a      	adds	r2, r3, #4
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d30 <prvAddNewTaskToReadyList+0x164>)
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc8:	4919      	ldr	r1, [pc, #100]	@ (8002d30 <prvAddNewTaskToReadyList+0x164>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	4814      	ldr	r0, [pc, #80]	@ (8002d30 <prvAddNewTaskToReadyList+0x164>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4403      	add	r3, r0
 8002ce8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002cea:	f001 fbe5 	bl	80044b8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <prvAddNewTaskToReadyList+0x158>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <prvAddNewTaskToReadyList+0x154>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d207      	bcs.n	8002d14 <prvAddNewTaskToReadyList+0x148>
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <prvAddNewTaskToReadyList+0x168>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	20000198 	.word	0x20000198
 8002d20:	200000c0 	.word	0x200000c0
 8002d24:	200001a4 	.word	0x200001a4
 8002d28:	200001b4 	.word	0x200001b4
 8002d2c:	200001a0 	.word	0x200001a0
 8002d30:	200000c4 	.word	0x200000c4
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d018      	beq.n	8002d7c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002d4a:	f000 f8d1 	bl	8002ef0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002d4e:	4b14      	ldr	r3, [pc, #80]	@ (8002da0 <vTaskDelay+0x68>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d00b      	beq.n	8002d6e <vTaskDelay+0x36>
    __asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60bb      	str	r3, [r7, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d6e:	2100      	movs	r1, #0
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fe49 	bl	8003a08 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d76:	f000 f8c9 	bl	8002f0c <xTaskResumeAll>
 8002d7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <vTaskDelay+0x6c>)
 8002d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002d92:	20c5      	movs	r0, #197	@ 0xc5
 8002d94:	f003 ffe2 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200001c0 	.word	0x200001c0
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e011      	b.n	8002de0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <prvCreateIdleTasks+0x88>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7819      	ldrb	r1, [r3, #0]
 8002dc4:	1d3a      	adds	r2, r7, #4
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002dce:	1d3a      	adds	r2, r7, #4
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	ddea      	ble.n	8002dbc <prvCreateIdleTasks+0x14>
 8002de6:	e000      	b.n	8002dea <prvCreateIdleTasks+0x42>
        {
            break;
 8002de8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e015      	b.n	8002e1c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <prvCreateIdleTasks+0x8c>)
 8002df2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e38 <prvCreateIdleTasks+0x90>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	1d39      	adds	r1, r7, #4
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	2282      	movs	r2, #130	@ 0x82
 8002e08:	6938      	ldr	r0, [r7, #16]
 8002e0a:	f7ff fe26 	bl	8002a5a <xTaskCreate>
 8002e0e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	dde6      	ble.n	8002df0 <prvCreateIdleTasks+0x48>
 8002e22:	e000      	b.n	8002e26 <prvCreateIdleTasks+0x7e>
        {
            break;
 8002e24:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002e26:	69fb      	ldr	r3, [r7, #28]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	08007534 	.word	0x08007534
 8002e34:	08003861 	.word	0x08003861
 8002e38:	200001bc 	.word	0x200001bc

08002e3c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002e42:	f7ff ffb1 	bl	8002da8 <prvCreateIdleTasks>
 8002e46:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002e4e:	f000 fe69 	bl	8003b24 <xTimerCreateTimerTask>
 8002e52:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d124      	bne.n	8002ea4 <vTaskStartScheduler+0x68>
    __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
}
 8002e6c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <vTaskStartScheduler+0x9c>)
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <vTaskStartScheduler+0xa0>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <vTaskStartScheduler+0xa4>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <vTaskStartScheduler+0xa8>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <vTaskStartScheduler+0xac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d102      	bne.n	8002e94 <vTaskStartScheduler+0x58>
 8002e8e:	f003 fff9 	bl	8006e84 <SEGGER_SYSVIEW_OnIdle>
 8002e92:	e004      	b.n	8002e9e <vTaskStartScheduler+0x62>
 8002e94:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <vTaskStartScheduler+0xac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 f851 	bl	8006f40 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002e9e:	f001 f969 	bl	8004174 <xPortStartScheduler>
 8002ea2:	e00f      	b.n	8002ec4 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d10b      	bne.n	8002ec4 <vTaskStartScheduler+0x88>
    __asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	607b      	str	r3, [r7, #4]
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <vTaskStartScheduler+0xb0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002ec8:	20cd      	movs	r0, #205	@ 0xcd
 8002eca:	f003 ff47 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200001b8 	.word	0x200001b8
 8002edc:	200001a4 	.word	0x200001a4
 8002ee0:	2000019c 	.word	0x2000019c
 8002ee4:	200001bc 	.word	0x200001bc
 8002ee8:	200000c0 	.word	0x200000c0
 8002eec:	08007624 	.word	0x08007624

08002ef0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <vTaskSuspendAll+0x18>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a03      	ldr	r2, [pc, #12]	@ (8002f08 <vTaskSuspendAll+0x18>)
 8002efc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002efe:	20cf      	movs	r0, #207	@ 0xcf
 8002f00:	f003 ff2c 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200001c0 	.word	0x200001c0

08002f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002f1a:	f001 fa9b 	bl	8004454 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002f22:	4b7a      	ldr	r3, [pc, #488]	@ (800310c <xTaskResumeAll+0x200>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <xTaskResumeAll+0x36>
    __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	603b      	str	r3, [r7, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002f42:	4b72      	ldr	r3, [pc, #456]	@ (800310c <xTaskResumeAll+0x200>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a70      	ldr	r2, [pc, #448]	@ (800310c <xTaskResumeAll+0x200>)
 8002f4a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800310c <xTaskResumeAll+0x200>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 80ce 	bne.w	80030f2 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <xTaskResumeAll+0x204>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80c9 	beq.w	80030f2 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f60:	e092      	b.n	8003088 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f62:	4b6c      	ldr	r3, [pc, #432]	@ (8003114 <xTaskResumeAll+0x208>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	6a12      	ldr	r2, [r2, #32]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	69d2      	ldr	r2, [r2, #28]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d103      	bne.n	8002f98 <xTaskResumeAll+0x8c>
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d103      	bne.n	8002fd6 <xTaskResumeAll+0xca>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 ffeb 	bl	8006fc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	4b48      	ldr	r3, [pc, #288]	@ (8003118 <xTaskResumeAll+0x20c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	4a46      	ldr	r2, [pc, #280]	@ (8003118 <xTaskResumeAll+0x20c>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003004:	4945      	ldr	r1, [pc, #276]	@ (800311c <xTaskResumeAll+0x210>)
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3304      	adds	r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	3204      	adds	r2, #4
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	1d1a      	adds	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4a36      	ldr	r2, [pc, #216]	@ (800311c <xTaskResumeAll+0x210>)
 8003044:	441a      	add	r2, r3
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304e:	4933      	ldr	r1, [pc, #204]	@ (800311c <xTaskResumeAll+0x210>)
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	482e      	ldr	r0, [pc, #184]	@ (800311c <xTaskResumeAll+0x210>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <xTaskResumeAll+0x214>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	429a      	cmp	r2, r3
 800307c:	d904      	bls.n	8003088 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800307e:	4a29      	ldr	r2, [pc, #164]	@ (8003124 <xTaskResumeAll+0x218>)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2101      	movs	r1, #1
 8003084:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003088:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <xTaskResumeAll+0x208>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f af68 	bne.w	8002f62 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003098:	f000 fc78 	bl	800398c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800309c:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <xTaskResumeAll+0x21c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d012      	beq.n	80030ce <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80030a8:	f000 f86a 	bl	8003180 <xTaskIncrementTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80030b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <xTaskResumeAll+0x218>)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2101      	movs	r1, #1
 80030b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3b01      	subs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80030c8:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <xTaskResumeAll+0x21c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80030ce:	4a15      	ldr	r2, [pc, #84]	@ (8003124 <xTaskResumeAll+0x218>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030da:	2301      	movs	r3, #1
 80030dc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <xTaskResumeAll+0x214>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4b12      	ldr	r3, [pc, #72]	@ (800312c <xTaskResumeAll+0x220>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030f2:	f001 f9e1 	bl	80044b8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4619      	mov	r1, r3
 80030fa:	20d0      	movs	r0, #208	@ 0xd0
 80030fc:	f003 fe6a 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003100:	69bb      	ldr	r3, [r7, #24]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200001c0 	.word	0x200001c0
 8003110:	20000198 	.word	0x20000198
 8003114:	20000158 	.word	0x20000158
 8003118:	200001a0 	.word	0x200001a0
 800311c:	200000c4 	.word	0x200000c4
 8003120:	200000c0 	.word	0x200000c0
 8003124:	200001ac 	.word	0x200001ac
 8003128:	200001a8 	.word	0x200001a8
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <xTaskGetTickCount+0x20>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	20d1      	movs	r0, #209	@ 0xd1
 8003140:	f003 fe48 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000019c 	.word	0x2000019c

08003154 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800315a:	f001 fa67 	bl	800462c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <xTaskGetTickCountFromISR+0x28>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	20d2      	movs	r0, #210	@ 0xd2
 800316c:	f003 fe32 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003170:	683b      	ldr	r3, [r7, #0]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000019c 	.word	0x2000019c

08003180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	@ 0x28
 8003184:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800318a:	4b83      	ldr	r3, [pc, #524]	@ (8003398 <xTaskIncrementTick+0x218>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 80f3 	bne.w	800337a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003194:	4b81      	ldr	r3, [pc, #516]	@ (800339c <xTaskIncrementTick+0x21c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800319c:	4a7f      	ldr	r2, [pc, #508]	@ (800339c <xTaskIncrementTick+0x21c>)
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d121      	bne.n	80031ec <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a8:	4b7d      	ldr	r3, [pc, #500]	@ (80033a0 <xTaskIncrementTick+0x220>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <xTaskIncrementTick+0x4a>
    __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	607b      	str	r3, [r7, #4]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <xTaskIncrementTick+0x46>
 80031ca:	4b75      	ldr	r3, [pc, #468]	@ (80033a0 <xTaskIncrementTick+0x220>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	4b74      	ldr	r3, [pc, #464]	@ (80033a4 <xTaskIncrementTick+0x224>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a72      	ldr	r2, [pc, #456]	@ (80033a0 <xTaskIncrementTick+0x220>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4a72      	ldr	r2, [pc, #456]	@ (80033a4 <xTaskIncrementTick+0x224>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b72      	ldr	r3, [pc, #456]	@ (80033a8 <xTaskIncrementTick+0x228>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a70      	ldr	r2, [pc, #448]	@ (80033a8 <xTaskIncrementTick+0x228>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	f000 fbd0 	bl	800398c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031ec:	4b6f      	ldr	r3, [pc, #444]	@ (80033ac <xTaskIncrementTick+0x22c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	f0c0 80ac 	bcc.w	8003350 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f8:	4b69      	ldr	r3, [pc, #420]	@ (80033a0 <xTaskIncrementTick+0x220>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003202:	4b6a      	ldr	r3, [pc, #424]	@ (80033ac <xTaskIncrementTick+0x22c>)
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	601a      	str	r2, [r3, #0]
                    break;
 800320a:	e0a1      	b.n	8003350 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800320c:	4b64      	ldr	r3, [pc, #400]	@ (80033a0 <xTaskIncrementTick+0x220>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	d203      	bcs.n	800322c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003224:	4a61      	ldr	r2, [pc, #388]	@ (80033ac <xTaskIncrementTick+0x22c>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6013      	str	r3, [r2, #0]
                        break;
 800322a:	e091      	b.n	8003350 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	6892      	ldr	r2, [r2, #8]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3304      	adds	r3, #4
 800324e:	429a      	cmp	r2, r3
 8003250:	d103      	bne.n	800325a <xTaskIncrementTick+0xda>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2200      	movs	r2, #0
 800325e:	615a      	str	r2, [r3, #20]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01e      	beq.n	80032b0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	6a12      	ldr	r2, [r2, #32]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	69d2      	ldr	r2, [r2, #28]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	3318      	adds	r3, #24
 8003294:	429a      	cmp	r2, r3
 8003296:	d103      	bne.n	80032a0 <xTaskIncrementTick+0x120>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fe86 	bl	8006fc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	2201      	movs	r2, #1
 80032be:	409a      	lsls	r2, r3
 80032c0:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <xTaskIncrementTick+0x230>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	4a3a      	ldr	r2, [pc, #232]	@ (80033b0 <xTaskIncrementTick+0x230>)
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ce:	4939      	ldr	r1, [pc, #228]	@ (80033b4 <xTaskIncrementTick+0x234>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3304      	adds	r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	3204      	adds	r2, #4
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1d1a      	adds	r2, r3, #4
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4a29      	ldr	r2, [pc, #164]	@ (80033b4 <xTaskIncrementTick+0x234>)
 800330e:	441a      	add	r2, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	615a      	str	r2, [r3, #20]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	4926      	ldr	r1, [pc, #152]	@ (80033b4 <xTaskIncrementTick+0x234>)
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800332a:	1c59      	adds	r1, r3, #1
 800332c:	4821      	ldr	r0, [pc, #132]	@ (80033b4 <xTaskIncrementTick+0x234>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	4b1e      	ldr	r3, [pc, #120]	@ (80033b8 <xTaskIncrementTick+0x238>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	429a      	cmp	r2, r3
 8003346:	f67f af57 	bls.w	80031f8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800334a:	2301      	movs	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334e:	e753      	b.n	80031f8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <xTaskIncrementTick+0x238>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	4917      	ldr	r1, [pc, #92]	@ (80033b4 <xTaskIncrementTick+0x234>)
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d901      	bls.n	800336c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <xTaskIncrementTick+0x23c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
 8003378:	e004      	b.n	8003384 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800337a:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <xTaskIncrementTick+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	4a0f      	ldr	r2, [pc, #60]	@ (80033c0 <xTaskIncrementTick+0x240>)
 8003382:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	4619      	mov	r1, r3
 8003388:	20db      	movs	r0, #219	@ 0xdb
 800338a:	f003 fd23 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	@ 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200001c0 	.word	0x200001c0
 800339c:	2000019c 	.word	0x2000019c
 80033a0:	20000150 	.word	0x20000150
 80033a4:	20000154 	.word	0x20000154
 80033a8:	200001b0 	.word	0x200001b0
 80033ac:	200001b8 	.word	0x200001b8
 80033b0:	200001a0 	.word	0x200001a0
 80033b4:	200000c4 	.word	0x200000c4
 80033b8:	200000c0 	.word	0x200000c0
 80033bc:	200001ac 	.word	0x200001ac
 80033c0:	200001a8 	.word	0x200001a8

080033c4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80033ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <vTaskSwitchContext+0xc0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80033d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <vTaskSwitchContext+0xc4>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80033d8:	e04f      	b.n	800347a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80033da:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <vTaskSwitchContext+0xc4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80033e0:	4b2a      	ldr	r3, [pc, #168]	@ (800348c <vTaskSwitchContext+0xc8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f1c3 031f 	rsb	r3, r3, #31
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	4926      	ldr	r1, [pc, #152]	@ (8003490 <vTaskSwitchContext+0xcc>)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <vTaskSwitchContext+0x5e>
    __asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <vTaskSwitchContext+0x5a>
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <vTaskSwitchContext+0xcc>)
 800342e:	4413      	add	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3308      	adds	r3, #8
 8003444:	429a      	cmp	r2, r3
 8003446:	d103      	bne.n	8003450 <vTaskSwitchContext+0x8c>
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a0f      	ldr	r2, [pc, #60]	@ (8003494 <vTaskSwitchContext+0xd0>)
 8003458:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <vTaskSwitchContext+0xd4>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <vTaskSwitchContext+0xd0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d102      	bne.n	800346c <vTaskSwitchContext+0xa8>
 8003466:	f003 fd0d 	bl	8006e84 <SEGGER_SYSVIEW_OnIdle>
 800346a:	e004      	b.n	8003476 <vTaskSwitchContext+0xb2>
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <vTaskSwitchContext+0xd0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fd65 	bl	8006f40 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <vTaskSwitchContext+0xd0>)
 8003478:	681b      	ldr	r3, [r3, #0]
    }
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200001c0 	.word	0x200001c0
 8003488:	200001ac 	.word	0x200001ac
 800348c:	200001a0 	.word	0x200001a0
 8003490:	200000c4 	.word	0x200000c4
 8003494:	200000c0 	.word	0x200000c0
 8003498:	200001bc 	.word	0x200001bc

0800349c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <vTaskPlaceOnEventList+0x4c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3318      	adds	r3, #24
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fe ff08 	bl	80022e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034d2:	2101      	movs	r1, #1
 80034d4:	6838      	ldr	r0, [r7, #0]
 80034d6:	f000 fa97 	bl	8003a08 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80034da:	20e1      	movs	r0, #225	@ 0xe1
 80034dc:	f003 fc3e 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200000c0 	.word	0x200000c0

080034ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	613b      	str	r3, [r7, #16]
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	e7fd      	b.n	8003512 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <vTaskPlaceOnEventListRestricted+0x90>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	61da      	str	r2, [r3, #28]
 8003524:	4b15      	ldr	r3, [pc, #84]	@ (800357c <vTaskPlaceOnEventListRestricted+0x90>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	621a      	str	r2, [r3, #32]
 800352e:	4b13      	ldr	r3, [pc, #76]	@ (800357c <vTaskPlaceOnEventListRestricted+0x90>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	3218      	adds	r2, #24
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <vTaskPlaceOnEventListRestricted+0x90>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f103 0218 	add.w	r2, r3, #24
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <vTaskPlaceOnEventListRestricted+0x90>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f000 fa4e 	bl	8003a08 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 800356c:	20e3      	movs	r0, #227	@ 0xe3
 800356e:	f003 fbf5 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200000c0 	.word	0x200000c0

08003580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60fb      	str	r3, [r7, #12]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	6a12      	ldr	r2, [r2, #32]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	69d2      	ldr	r2, [r2, #28]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	3318      	adds	r3, #24
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d103      	bne.n	80035dc <xTaskRemoveFromEventList+0x5c>
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035ec:	4b4e      	ldr	r3, [pc, #312]	@ (8003728 <xTaskRemoveFromEventList+0x1a8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d164      	bne.n	80036be <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	3304      	adds	r3, #4
 8003616:	429a      	cmp	r2, r3
 8003618:	d103      	bne.n	8003622 <xTaskRemoveFromEventList+0xa2>
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2200      	movs	r2, #0
 8003626:	615a      	str	r2, [r3, #20]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fcc5 	bl	8006fc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	2201      	movs	r2, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <xTaskRemoveFromEventList+0x1ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	4a38      	ldr	r2, [pc, #224]	@ (800372c <xTaskRemoveFromEventList+0x1ac>)
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003650:	4937      	ldr	r1, [pc, #220]	@ (8003730 <xTaskRemoveFromEventList+0x1b0>)
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3304      	adds	r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	3204      	adds	r2, #4
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a28      	ldr	r2, [pc, #160]	@ (8003730 <xTaskRemoveFromEventList+0x1b0>)
 8003690:	441a      	add	r2, r3
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	615a      	str	r2, [r3, #20]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	4925      	ldr	r1, [pc, #148]	@ (8003730 <xTaskRemoveFromEventList+0x1b0>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	4820      	ldr	r0, [pc, #128]	@ (8003730 <xTaskRemoveFromEventList+0x1b0>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4403      	add	r3, r0
 80036ba:	6019      	str	r1, [r3, #0]
 80036bc:	e01b      	b.n	80036f6 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036be:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <xTaskRemoveFromEventList+0x1b4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	61da      	str	r2, [r3, #28]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	621a      	str	r2, [r3, #32]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	3218      	adds	r2, #24
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f103 0218 	add.w	r2, r3, #24
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <xTaskRemoveFromEventList+0x1b4>)
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <xTaskRemoveFromEventList+0x1b4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a10      	ldr	r2, [pc, #64]	@ (8003734 <xTaskRemoveFromEventList+0x1b4>)
 80036f4:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <xTaskRemoveFromEventList+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d905      	bls.n	8003710 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <xTaskRemoveFromEventList+0x1bc>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e001      	b.n	8003714 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	4619      	mov	r1, r3
 8003718:	20e4      	movs	r0, #228	@ 0xe4
 800371a:	f003 fb5b 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003720:	4618      	mov	r0, r3
 8003722:	3728      	adds	r7, #40	@ 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200001c0 	.word	0x200001c0
 800372c:	200001a0 	.word	0x200001a0
 8003730:	200000c4 	.word	0x200000c4
 8003734:	20000158 	.word	0x20000158
 8003738:	200000c0 	.word	0x200000c0
 800373c:	200001ac 	.word	0x200001ac

08003740 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003748:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <vTaskInternalSetTimeOutState+0x28>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003750:	4b06      	ldr	r3, [pc, #24]	@ (800376c <vTaskInternalSetTimeOutState+0x2c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003758:	20e7      	movs	r0, #231	@ 0xe7
 800375a:	f003 faff 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200001b0 	.word	0x200001b0
 800376c:	2000019c 	.word	0x2000019c

08003770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	60fb      	str	r3, [r7, #12]
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80037b6:	f000 fe4d 	bl	8004454 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037ba:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <xTaskCheckForTimeOut+0xd0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d102      	bne.n	80037da <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e026      	b.n	8003828 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <xTaskCheckForTimeOut+0xd4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d00a      	beq.n	80037fc <xTaskCheckForTimeOut+0x8c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d305      	bcc.n	80037fc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e015      	b.n	8003828 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20b      	bcs.n	800381e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff94 	bl	8003740 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e004      	b.n	8003828 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003828:	f000 fe46 	bl	80044b8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4619      	mov	r1, r3
 8003830:	20e8      	movs	r0, #232	@ 0xe8
 8003832:	f003 facf 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003836:	69fb      	ldr	r3, [r7, #28]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000019c 	.word	0x2000019c
 8003844:	200001b0 	.word	0x200001b0

08003848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <vTaskMissedYield+0x14>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003852:	20e9      	movs	r0, #233	@ 0xe9
 8003854:	f003 fa82 	bl	8006d5c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200001ac 	.word	0x200001ac

08003860 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003868:	f000 f852 	bl	8003910 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <prvIdleTask+0x28>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d9f9      	bls.n	8003868 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <prvIdleTask+0x2c>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003884:	e7f0      	b.n	8003868 <prvIdleTask+0x8>
 8003886:	bf00      	nop
 8003888:	200000c4 	.word	0x200000c4
 800388c:	e000ed04 	.word	0xe000ed04

08003890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e00c      	b.n	80038b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4a12      	ldr	r2, [pc, #72]	@ (80038f0 <prvInitialiseTaskLists+0x60>)
 80038a8:	4413      	add	r3, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fce8 	bl	8002280 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d9ef      	bls.n	800389c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038bc:	480d      	ldr	r0, [pc, #52]	@ (80038f4 <prvInitialiseTaskLists+0x64>)
 80038be:	f7fe fcdf 	bl	8002280 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038c2:	480d      	ldr	r0, [pc, #52]	@ (80038f8 <prvInitialiseTaskLists+0x68>)
 80038c4:	f7fe fcdc 	bl	8002280 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038c8:	480c      	ldr	r0, [pc, #48]	@ (80038fc <prvInitialiseTaskLists+0x6c>)
 80038ca:	f7fe fcd9 	bl	8002280 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80038ce:	480c      	ldr	r0, [pc, #48]	@ (8003900 <prvInitialiseTaskLists+0x70>)
 80038d0:	f7fe fcd6 	bl	8002280 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80038d4:	480b      	ldr	r0, [pc, #44]	@ (8003904 <prvInitialiseTaskLists+0x74>)
 80038d6:	f7fe fcd3 	bl	8002280 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <prvInitialiseTaskLists+0x78>)
 80038dc:	4a05      	ldr	r2, [pc, #20]	@ (80038f4 <prvInitialiseTaskLists+0x64>)
 80038de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <prvInitialiseTaskLists+0x7c>)
 80038e2:	4a05      	ldr	r2, [pc, #20]	@ (80038f8 <prvInitialiseTaskLists+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200000c4 	.word	0x200000c4
 80038f4:	20000128 	.word	0x20000128
 80038f8:	2000013c 	.word	0x2000013c
 80038fc:	20000158 	.word	0x20000158
 8003900:	2000016c 	.word	0x2000016c
 8003904:	20000184 	.word	0x20000184
 8003908:	20000150 	.word	0x20000150
 800390c:	20000154 	.word	0x20000154

08003910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003916:	e019      	b.n	800394c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003918:	f000 fd9c 	bl	8004454 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800391c:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <prvCheckTasksWaitingTermination+0x50>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fd15 	bl	8002358 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <prvCheckTasksWaitingTermination+0x54>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a0b      	ldr	r2, [pc, #44]	@ (8003964 <prvCheckTasksWaitingTermination+0x54>)
 8003936:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <prvCheckTasksWaitingTermination+0x58>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <prvCheckTasksWaitingTermination+0x58>)
 8003940:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003942:	f000 fdb9 	bl	80044b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f810 	bl	800396c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <prvCheckTasksWaitingTermination+0x58>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e1      	bne.n	8003918 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2000016c 	.word	0x2000016c
 8003964:	20000198 	.word	0x20000198
 8003968:	20000180 	.word	0x20000180

0800396c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	4618      	mov	r0, r3
 800397a:	f000 ffcb 	bl	8004914 <vPortFree>
            vPortFree( pxTCB );
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 ffc8 	bl	8004914 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <prvResetNextTaskUnblockTime+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <prvResetNextTaskUnblockTime+0x34>)
 800399c:	f04f 32ff 	mov.w	r2, #4294967295
 80039a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039a2:	e005      	b.n	80039b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <prvResetNextTaskUnblockTime+0x30>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <prvResetNextTaskUnblockTime+0x34>)
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000150 	.word	0x20000150
 80039c0:	200001b8 	.word	0x200001b8

080039c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <xTaskGetSchedulerState+0x3c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039d2:	2301      	movs	r3, #1
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	e008      	b.n	80039ea <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80039d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <xTaskGetSchedulerState+0x40>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80039e0:	2302      	movs	r3, #2
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e001      	b.n	80039ea <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4619      	mov	r1, r3
 80039ee:	20f5      	movs	r0, #245	@ 0xf5
 80039f0:	f003 f9f0 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80039f4:	687b      	ldr	r3, [r7, #4]
    }
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200001a4 	.word	0x200001a4
 8003a04:	200001c0 	.word	0x200001c0

08003a08 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a12:	4b3d      	ldr	r3, [pc, #244]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003a18:	4b3c      	ldr	r3, [pc, #240]	@ (8003b0c <prvAddCurrentTaskToDelayedList+0x104>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <prvAddCurrentTaskToDelayedList+0x108>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a24:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fc94 	bl	8002358 <uxListRemove>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a36:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	4b34      	ldr	r3, [pc, #208]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0x110>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	4a33      	ldr	r2, [pc, #204]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0x110>)
 8003a4c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d124      	bne.n	8003aa0 <prvAddCurrentTaskToDelayedList+0x98>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b2c      	ldr	r3, [pc, #176]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	3204      	adds	r2, #4
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a23      	ldr	r2, [pc, #140]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003a90:	615a      	str	r2, [r3, #20]
 8003a92:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a20      	ldr	r2, [pc, #128]	@ (8003b1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a9e:	e02e      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d20d      	bcs.n	8003ad4 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ab8:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2104      	movs	r1, #4
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fac2 	bl	8007048 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003ac4:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f7fe fc08 	bl	80022e2 <vListInsert>
}
 8003ad2:	e014      	b.n	8003afe <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 fab4 	bl	8007048 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	69b8      	ldr	r0, [r7, #24]
 8003aea:	f7fe fbfa 	bl	80022e2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <prvAddCurrentTaskToDelayedList+0x118>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d202      	bcs.n	8003afe <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003af8:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <prvAddCurrentTaskToDelayedList+0x118>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6013      	str	r3, [r2, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2000019c 	.word	0x2000019c
 8003b0c:	20000150 	.word	0x20000150
 8003b10:	20000154 	.word	0x20000154
 8003b14:	200000c0 	.word	0x200000c0
 8003b18:	200001a0 	.word	0x200001a0
 8003b1c:	20000184 	.word	0x20000184
 8003b20:	200001b8 	.word	0x200001b8

08003b24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b2e:	f000 fa5b 	bl	8003fe8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b32:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <xTimerCreateTimerTask+0x64>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b3a:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <xTimerCreateTimerTask+0x68>)
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b48:	4911      	ldr	r1, [pc, #68]	@ (8003b90 <xTimerCreateTimerTask+0x6c>)
 8003b4a:	4812      	ldr	r0, [pc, #72]	@ (8003b94 <xTimerCreateTimerTask+0x70>)
 8003b4c:	f7fe ff85 	bl	8002a5a <xTaskCreate>
 8003b50:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	603b      	str	r3, [r7, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4619      	mov	r1, r3
 8003b74:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003b78:	f003 f92c 	bl	8006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003b7c:	687b      	ldr	r3, [r7, #4]
    }
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200001f4 	.word	0x200001f4
 8003b8c:	200001f8 	.word	0x200001f8
 8003b90:	0800753c 	.word	0x0800753c
 8003b94:	08003c3d 	.word	0x08003c3d

08003b98 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ba4:	e008      	b.n	8003bb8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	18d1      	adds	r1, r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8df 	bl	8003d88 <prvInsertTimerInActiveList>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ea      	bne.n	8003ba6 <prvReloadTimer+0xe>
        }
    }
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be6:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <prvProcessExpiredTimer+0x5c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fbaf 	bl	8002358 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ffc3 	bl	8003b98 <prvReloadTimer>
 8003c12:	e008      	b.n	8003c26 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	4798      	blx	r3
    }
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200001ec 	.word	0x200001ec

08003c3c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c44:	f107 0308 	add.w	r3, r7, #8
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f859 	bl	8003d00 <prvGetNextExpireTime>
 8003c4e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4619      	mov	r1, r3
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f805 	bl	8003c64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c5a:	f000 f8d7 	bl	8003e0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c5e:	bf00      	nop
 8003c60:	e7f0      	b.n	8003c44 <prvTimerTask+0x8>
	...

08003c64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c6e:	f7ff f93f 	bl	8002ef0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f866 	bl	8003d48 <prvSampleTimeNow>
 8003c7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d130      	bne.n	8003ce6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <prvProcessTimerOrBlockTask+0x3c>
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d806      	bhi.n	8003ca0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c92:	f7ff f93b 	bl	8002f0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff9f 	bl	8003bdc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c9e:	e024      	b.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ca6:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <prvProcessTimerOrBlockTask+0x90>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <prvProcessTimerOrBlockTask+0x50>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <prvProcessTimerOrBlockTask+0x52>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <prvProcessTimerOrBlockTask+0x94>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fe fe55 	bl	8002974 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cca:	f7ff f91f 	bl	8002f0c <xTaskResumeAll>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <prvProcessTimerOrBlockTask+0x98>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
    }
 8003ce4:	e001      	b.n	8003cea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ce6:	f7ff f911 	bl	8002f0c <xTaskResumeAll>
    }
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200001f0 	.word	0x200001f0
 8003cf8:	200001f4 	.word	0x200001f4
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d08:	4b0e      	ldr	r3, [pc, #56]	@ (8003d44 <prvGetNextExpireTime+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <prvGetNextExpireTime+0x16>
 8003d12:	2201      	movs	r2, #1
 8003d14:	e000      	b.n	8003d18 <prvGetNextExpireTime+0x18>
 8003d16:	2200      	movs	r2, #0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <prvGetNextExpireTime+0x44>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e001      	b.n	8003d34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d34:	68fb      	ldr	r3, [r7, #12]
    }
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200001ec 	.word	0x200001ec

08003d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003d50:	f7ff f9ee 	bl	8003130 <xTaskGetTickCount>
 8003d54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <prvSampleTimeNow+0x3c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d205      	bcs.n	8003d6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d60:	f000 f91c 	bl	8003f9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <prvSampleTimeNow+0x3c>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d78:	68fb      	ldr	r3, [r7, #12]
    }
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200001fc 	.word	0x200001fc

08003d88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d812      	bhi.n	8003dd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad2      	subs	r2, r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e01b      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <prvInsertTimerInActiveList+0x7c>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fe fa88 	bl	80022e2 <vListInsert>
 8003dd2:	e012      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d206      	bcs.n	8003dea <prvInsertTimerInActiveList+0x62>
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e007      	b.n	8003dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <prvInsertTimerInActiveList+0x80>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fe fa74 	bl	80022e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dfa:	697b      	ldr	r3, [r7, #20]
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200001f0 	.word	0x200001f0
 8003e08:	200001ec 	.word	0x200001ec

08003e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003e1e:	e0a9      	b.n	8003f74 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f2c0 80a6 	blt.w	8003f74 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fa8d 	bl	8002358 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff81 	bl	8003d48 <prvSampleTimeNow>
 8003e46:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	f200 808e 	bhi.w	8003f6e <prvProcessReceivedCommands+0x162>
 8003e52:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <prvProcessReceivedCommands+0x4c>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e7d 	.word	0x08003e7d
 8003e60:	08003ee5 	.word	0x08003ee5
 8003e64:	08003ef9 	.word	0x08003ef9
 8003e68:	08003f45 	.word	0x08003f45
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e7d 	.word	0x08003e7d
 8003e74:	08003ee5 	.word	0x08003ee5
 8003e78:	08003ef9 	.word	0x08003ef9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	18d1      	adds	r1, r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	69f8      	ldr	r0, [r7, #28]
 8003e9c:	f7ff ff74 	bl	8003d88 <prvInsertTimerInActiveList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d065      	beq.n	8003f72 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	4413      	add	r3, r2
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	69f8      	ldr	r0, [r7, #28]
 8003ec2:	f7ff fe69 	bl	8003b98 <prvReloadTimer>
 8003ec6:	e008      	b.n	8003eda <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	69f8      	ldr	r0, [r7, #28]
 8003ee0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003ee2:	e046      	b.n	8003f72 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003ef6:	e03d      	b.n	8003f74 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	617b      	str	r3, [r7, #20]
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	18d1      	adds	r1, r2, r3
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	69f8      	ldr	r0, [r7, #28]
 8003f3e:	f7ff ff23 	bl	8003d88 <prvInsertTimerInActiveList>
                        break;
 8003f42:	e017      	b.n	8003f74 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003f52:	69f8      	ldr	r0, [r7, #28]
 8003f54:	f000 fcde 	bl	8004914 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f58:	e00c      	b.n	8003f74 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f6c:	e002      	b.n	8003f74 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <prvProcessReceivedCommands+0x168>
                        break;
 8003f72:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003f74:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <prvProcessReceivedCommands+0x18c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f107 0108 	add.w	r1, r7, #8
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fb2c 	bl	80025dc <xQueueReceive>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f47f af4a 	bne.w	8003e20 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200001f4 	.word	0x200001f4

08003f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fa2:	e009      	b.n	8003fb8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fae:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f7ff fe12 	bl	8003bdc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003fc2:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <prvSwitchTimerLists+0x48>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <prvSwitchTimerLists+0x44>)
 8003fce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <prvSwitchTimerLists+0x48>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6013      	str	r3, [r2, #0]
    }
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200001ec 	.word	0x200001ec
 8003fe4:	200001f0 	.word	0x200001f0

08003fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003fec:	f000 fa32 	bl	8004454 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ff0:	4b12      	ldr	r3, [pc, #72]	@ (800403c <prvCheckForValidListAndQueue+0x54>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11d      	bne.n	8004034 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ff8:	4811      	ldr	r0, [pc, #68]	@ (8004040 <prvCheckForValidListAndQueue+0x58>)
 8003ffa:	f7fe f941 	bl	8002280 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ffe:	4811      	ldr	r0, [pc, #68]	@ (8004044 <prvCheckForValidListAndQueue+0x5c>)
 8004000:	f7fe f93e 	bl	8002280 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <prvCheckForValidListAndQueue+0x60>)
 8004006:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <prvCheckForValidListAndQueue+0x58>)
 8004008:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800400a:	4b10      	ldr	r3, [pc, #64]	@ (800404c <prvCheckForValidListAndQueue+0x64>)
 800400c:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <prvCheckForValidListAndQueue+0x5c>)
 800400e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004010:	2200      	movs	r2, #0
 8004012:	210c      	movs	r1, #12
 8004014:	200a      	movs	r0, #10
 8004016:	f7fe fa65 	bl	80024e4 <xQueueGenericCreate>
 800401a:	4603      	mov	r3, r0
 800401c:	4a07      	ldr	r2, [pc, #28]	@ (800403c <prvCheckForValidListAndQueue+0x54>)
 800401e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <prvCheckForValidListAndQueue+0x54>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004028:	4b04      	ldr	r3, [pc, #16]	@ (800403c <prvCheckForValidListAndQueue+0x54>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4908      	ldr	r1, [pc, #32]	@ (8004050 <prvCheckForValidListAndQueue+0x68>)
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fc50 	bl	80028d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004034:	f000 fa40 	bl	80044b8 <vPortExitCritical>
    }
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200001f4 	.word	0x200001f4
 8004040:	200001c4 	.word	0x200001c4
 8004044:	200001d8 	.word	0x200001d8
 8004048:	200001ec 	.word	0x200001ec
 800404c:	200001f0 	.word	0x200001f0
 8004050:	08007544 	.word	0x08007544

08004054 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3b04      	subs	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800406c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004084:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <pxPortInitialiseStack+0x64>)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b14      	subs	r3, #20
 800408e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b04      	subs	r3, #4
 800409a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f06f 0202 	mvn.w	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b20      	subs	r3, #32
 80040a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	080040bd 	.word	0x080040bd

080040bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040c6:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <prvTaskExitError+0x58>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d00b      	beq.n	80040e8 <prvTaskExitError+0x2c>
    __asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <prvTaskExitError+0x28>
    __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60bb      	str	r3, [r7, #8]
}
 80040fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040fc:	bf00      	nop
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0fc      	beq.n	80040fe <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000000c 	.word	0x2000000c
	...

08004120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004120:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <pxCurrentTCBConst2>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	f380 8809 	msr	PSP, r0
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8811 	msr	BASEPRI, r0
 800413a:	4770      	bx	lr
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst2>:
 8004140:	200000c0 	.word	0x200000c0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004148:	4808      	ldr	r0, [pc, #32]	@ (800416c <prvPortStartFirstTask+0x24>)
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f380 8808 	msr	MSP, r0
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8814 	msr	CONTROL, r0
 800415a:	b662      	cpsie	i
 800415c:	b661      	cpsie	f
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	df00      	svc	0
 8004168:	bf00      	nop
 800416a:	0000      	.short	0x0000
 800416c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop

08004174 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08c      	sub	sp, #48	@ 0x30
 8004178:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800417a:	4b69      	ldr	r3, [pc, #420]	@ (8004320 <xPortStartScheduler+0x1ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <xPortStartScheduler+0x1b0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10b      	bne.n	800419c <xPortStartScheduler+0x28>
    __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800419c:	4b60      	ldr	r3, [pc, #384]	@ (8004320 <xPortStartScheduler+0x1ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a61      	ldr	r2, [pc, #388]	@ (8004328 <xPortStartScheduler+0x1b4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10b      	bne.n	80041be <xPortStartScheduler+0x4a>
    __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80041be:	4b5b      	ldr	r3, [pc, #364]	@ (800432c <xPortStartScheduler+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	332c      	adds	r3, #44	@ 0x2c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a59      	ldr	r2, [pc, #356]	@ (8004330 <xPortStartScheduler+0x1bc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <xPortStartScheduler+0x74>
    __asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	61fb      	str	r3, [r7, #28]
}
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80041e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ea:	3338      	adds	r3, #56	@ 0x38
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a51      	ldr	r2, [pc, #324]	@ (8004334 <xPortStartScheduler+0x1c0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00b      	beq.n	800420c <xPortStartScheduler+0x98>
    __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61bb      	str	r3, [r7, #24]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <xPortStartScheduler+0x1c4>)
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	22ff      	movs	r2, #255	@ 0xff
 8004220:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4b41      	ldr	r3, [pc, #260]	@ (800433c <xPortStartScheduler+0x1c8>)
 8004236:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004238:	4b40      	ldr	r3, [pc, #256]	@ (800433c <xPortStartScheduler+0x1c8>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xPortStartScheduler+0xe4>
    __asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	617b      	str	r3, [r7, #20]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d013      	beq.n	800428e <xPortStartScheduler+0x11a>
    __asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	613b      	str	r3, [r7, #16]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3301      	adds	r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d0f1      	beq.n	800427e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d103      	bne.n	80042a8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e004      	b.n	80042b2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042b0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042b2:	4b23      	ldr	r3, [pc, #140]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042ba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042bc:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <xPortStartScheduler+0x1cc>)
 80042c6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <xPortStartScheduler+0x1d0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004344 <xPortStartScheduler+0x1d0>)
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042dc:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <xPortStartScheduler+0x1d0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <xPortStartScheduler+0x1d0>)
 80042e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042e6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80042e8:	4b17      	ldr	r3, [pc, #92]	@ (8004348 <xPortStartScheduler+0x1d4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042ee:	f000 f96d 	bl	80045cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042f2:	4b16      	ldr	r3, [pc, #88]	@ (800434c <xPortStartScheduler+0x1d8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042f8:	f000 f98c 	bl	8004614 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042fc:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <xPortStartScheduler+0x1dc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	@ (8004350 <xPortStartScheduler+0x1dc>)
 8004302:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004306:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004308:	f7ff ff1e 	bl	8004148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800430c:	f7ff f85a 	bl	80033c4 <vTaskSwitchContext>
    prvTaskExitError();
 8004310:	f7ff fed4 	bl	80040bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3730      	adds	r7, #48	@ 0x30
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	e000ed00 	.word	0xe000ed00
 8004324:	410fc271 	.word	0x410fc271
 8004328:	410fc270 	.word	0x410fc270
 800432c:	e000ed08 	.word	0xe000ed08
 8004330:	08004121 	.word	0x08004121
 8004334:	08004511 	.word	0x08004511
 8004338:	e000e400 	.word	0xe000e400
 800433c:	20000200 	.word	0x20000200
 8004340:	20000204 	.word	0x20000204
 8004344:	e000ed20 	.word	0xe000ed20
 8004348:	e000ed1c 	.word	0xe000ed1c
 800434c:	2000000c 	.word	0x2000000c
 8004350:	e000ef34 	.word	0xe000ef34

08004354 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800435a:	4b38      	ldr	r3, [pc, #224]	@ (800443c <vInitPrioGroupValue+0xe8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <vInitPrioGroupValue+0xec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10b      	bne.n	800437c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	60fb      	str	r3, [r7, #12]
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800437c:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <vInitPrioGroupValue+0xe8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a30      	ldr	r2, [pc, #192]	@ (8004444 <vInitPrioGroupValue+0xf0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10b      	bne.n	800439e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	613b      	str	r3, [r7, #16]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439e:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <vInitPrioGroupValue+0xf4>)
 80043a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	22ff      	movs	r2, #255	@ 0xff
 80043ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <vInitPrioGroupValue+0xf8>)
 80043c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c6:	4b22      	ldr	r3, [pc, #136]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043cc:	e009      	b.n	80043e2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80043ce:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 80043d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b80      	cmp	r3, #128	@ 0x80
 80043ec:	d0ef      	beq.n	80043ce <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ee:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d00b      	beq.n	8004412 <vInitPrioGroupValue+0xbe>
    __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004412:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	4a0d      	ldr	r2, [pc, #52]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 800441a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004424:	4a0a      	ldr	r2, [pc, #40]	@ (8004450 <vInitPrioGroupValue+0xfc>)
 8004426:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000ed00 	.word	0xe000ed00
 8004440:	410fc271 	.word	0x410fc271
 8004444:	410fc270 	.word	0x410fc270
 8004448:	e000e400 	.word	0xe000e400
 800444c:	20000200 	.word	0x20000200
 8004450:	20000204 	.word	0x20000204

08004454 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
    __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	607b      	str	r3, [r7, #4]
}
 800446c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800446e:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <vPortEnterCritical+0x5c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a0e      	ldr	r2, [pc, #56]	@ (80044b0 <vPortEnterCritical+0x5c>)
 8004476:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004478:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <vPortEnterCritical+0x5c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d110      	bne.n	80044a2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <vPortEnterCritical+0x60>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <vPortEnterCritical+0x4e>
    __asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <vPortEnterCritical+0x4a>
    }
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044be:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <vPortExitCritical+0x50>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <vPortExitCritical+0x26>
    __asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	607b      	str	r3, [r7, #4]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80044de:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <vPortExitCritical+0x50>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a08      	ldr	r2, [pc, #32]	@ (8004508 <vPortExitCritical+0x50>)
 80044e6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <vPortExitCritical+0x50>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <vPortExitCritical+0x44>
 80044f0:	2300      	movs	r3, #0
 80044f2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80044fa:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	2000000c 	.word	0x2000000c
 800450c:	00000000 	.word	0x00000000

08004510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004510:	f3ef 8009 	mrs	r0, PSP
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <pxCurrentTCBConst>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f01e 0f10 	tst.w	lr, #16
 8004520:	bf08      	it	eq
 8004522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	6010      	str	r0, [r2, #0]
 800452c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004534:	f380 8811 	msr	BASEPRI, r0
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f7fe ff40 	bl	80033c4 <vTaskSwitchContext>
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	bc09      	pop	{r0, r3}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	f01e 0f10 	tst.w	lr, #16
 800455a:	bf08      	it	eq
 800455c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004560:	f380 8809 	msr	PSP, r0
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst>:
 8004570:	200000c0 	.word	0x200000c0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
    __asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004592:	f002 fb69 	bl	8006c68 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004596:	f7fe fdf3 	bl	8003180 <xTaskIncrementTick>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d006      	beq.n	80045ae <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80045a0:	f002 fbc0 	bl	8006d24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <SysTick_Handler+0x50>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e001      	b.n	80045b2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80045ae:	f002 fb9d 	bl	8006cec <SEGGER_SYSVIEW_RecordExitISR>
 80045b2:	2300      	movs	r3, #0
 80045b4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f383 8811 	msr	BASEPRI, r3
}
 80045bc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <vPortSetupTimerInterrupt+0x38>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <vPortSetupTimerInterrupt+0x3c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <vPortSetupTimerInterrupt+0x40>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	4a09      	ldr	r2, [pc, #36]	@ (8004610 <vPortSetupTimerInterrupt+0x44>)
 80045ea:	3b01      	subs	r3, #1
 80045ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ee:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010
 8004604:	e000e018 	.word	0xe000e018
 8004608:	20000000 	.word	0x20000000
 800460c:	10624dd3 	.word	0x10624dd3
 8004610:	e000e014 	.word	0xe000e014

08004614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004614:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004624 <vPortEnableVFP+0x10>
 8004618:	6801      	ldr	r1, [r0, #0]
 800461a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800461e:	6001      	str	r1, [r0, #0]
 8004620:	4770      	bx	lr
 8004622:	0000      	.short	0x0000
 8004624:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop

0800462c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004632:	f3ef 8305 	mrs	r3, IPSR
 8004636:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d915      	bls.n	800466a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800463e:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <vPortValidateInterruptPriority+0x74>)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004648:	4b16      	ldr	r3, [pc, #88]	@ (80046a4 <vPortValidateInterruptPriority+0x78>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	7afa      	ldrb	r2, [r7, #11]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20b      	bcs.n	800466a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	607b      	str	r3, [r7, #4]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800466a:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <vPortValidateInterruptPriority+0x7c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004672:	4b0e      	ldr	r3, [pc, #56]	@ (80046ac <vPortValidateInterruptPriority+0x80>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90b      	bls.n	8004692 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	603b      	str	r3, [r7, #0]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <vPortValidateInterruptPriority+0x62>
    }
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e3f0 	.word	0xe000e3f0
 80046a4:	20000200 	.word	0x20000200
 80046a8:	e000ed0c 	.word	0xe000ed0c
 80046ac:	20000204 	.word	0x20000204

080046b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d022      	beq.n	8004708 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80046c2:	2308      	movs	r3, #8
 80046c4:	43db      	mvns	r3, r3
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d81b      	bhi.n	8004704 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80046cc:	2208      	movs	r2, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d014      	beq.n	8004708 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	f1c3 0308 	rsb	r3, r3, #8
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	43db      	mvns	r3, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d804      	bhi.n	80046fe <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	4413      	add	r3, r2
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e004      	b.n	8004708 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	e001      	b.n	8004708 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004708:	f7fe fbf2 	bl	8002ef0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800470c:	4b7a      	ldr	r3, [pc, #488]	@ (80048f8 <pvPortMalloc+0x248>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004714:	f000 f974 	bl	8004a00 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f2c0 80d3 	blt.w	80048c6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80cf 	beq.w	80048c6 <pvPortMalloc+0x216>
 8004728:	4b74      	ldr	r3, [pc, #464]	@ (80048fc <pvPortMalloc+0x24c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	f200 80c9 	bhi.w	80048c6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004734:	4b72      	ldr	r3, [pc, #456]	@ (8004900 <pvPortMalloc+0x250>)
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004738:	4b71      	ldr	r3, [pc, #452]	@ (8004900 <pvPortMalloc+0x250>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800473e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004740:	4a70      	ldr	r2, [pc, #448]	@ (8004904 <pvPortMalloc+0x254>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d305      	bcc.n	8004752 <pvPortMalloc+0xa2>
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004748:	4a6f      	ldr	r2, [pc, #444]	@ (8004908 <pvPortMalloc+0x258>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d801      	bhi.n	8004752 <pvPortMalloc+0xa2>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <pvPortMalloc+0xa4>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d129      	bne.n	80047ac <pvPortMalloc+0xfc>
    __asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	623b      	str	r3, [r7, #32]
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800477a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477c:	4a61      	ldr	r2, [pc, #388]	@ (8004904 <pvPortMalloc+0x254>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d305      	bcc.n	800478e <pvPortMalloc+0xde>
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004784:	4a60      	ldr	r2, [pc, #384]	@ (8004908 <pvPortMalloc+0x258>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d801      	bhi.n	800478e <pvPortMalloc+0xde>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <pvPortMalloc+0xe0>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <pvPortMalloc+0xfc>
    __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	61fb      	str	r3, [r7, #28]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d903      	bls.n	80047be <pvPortMalloc+0x10e>
 80047b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1d8      	bne.n	8004770 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047be:	4b4e      	ldr	r3, [pc, #312]	@ (80048f8 <pvPortMalloc+0x248>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d07e      	beq.n	80048c6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2208      	movs	r2, #8
 80047ce:	4413      	add	r3, r2
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004904 <pvPortMalloc+0x254>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d305      	bcc.n	80047e6 <pvPortMalloc+0x136>
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004908 <pvPortMalloc+0x258>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d801      	bhi.n	80047e6 <pvPortMalloc+0x136>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <pvPortMalloc+0x138>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <pvPortMalloc+0x154>
    __asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	61bb      	str	r3, [r7, #24]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d90b      	bls.n	800482e <pvPortMalloc+0x17e>
    __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	617b      	str	r3, [r7, #20]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800482e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	2308      	movs	r3, #8
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	d924      	bls.n	8004888 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800483e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <pvPortMalloc+0x1b8>
    __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	613b      	str	r3, [r7, #16]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004886:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004888:	4b1c      	ldr	r3, [pc, #112]	@ (80048fc <pvPortMalloc+0x24c>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a1a      	ldr	r2, [pc, #104]	@ (80048fc <pvPortMalloc+0x24c>)
 8004894:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004896:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <pvPortMalloc+0x24c>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b1c      	ldr	r3, [pc, #112]	@ (800490c <pvPortMalloc+0x25c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d203      	bcs.n	80048aa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048a2:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <pvPortMalloc+0x24c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a19      	ldr	r2, [pc, #100]	@ (800490c <pvPortMalloc+0x25c>)
 80048a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <pvPortMalloc+0x260>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <pvPortMalloc+0x260>)
 80048c4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048c6:	f7fe fb21 	bl	8002f0c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <pvPortMalloc+0x23c>
    __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <pvPortMalloc+0x238>
    return pvReturn;
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3738      	adds	r7, #56	@ 0x38
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20012e10 	.word	0x20012e10
 80048fc:	20012e14 	.word	0x20012e14
 8004900:	20012e08 	.word	0x20012e08
 8004904:	20000208 	.word	0x20000208
 8004908:	20012e07 	.word	0x20012e07
 800490c:	20012e18 	.word	0x20012e18
 8004910:	20012e1c 	.word	0x20012e1c

08004914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d060      	beq.n	80049e8 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004926:	2308      	movs	r3, #8
 8004928:	425b      	negs	r3, r3
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	4a2e      	ldr	r2, [pc, #184]	@ (80049f0 <vPortFree+0xdc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d305      	bcc.n	8004948 <vPortFree+0x34>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <vPortFree+0xe0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d801      	bhi.n	8004948 <vPortFree+0x34>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <vPortFree+0x36>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <vPortFree+0x52>
    __asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	617b      	str	r3, [r7, #20]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db0b      	blt.n	8004986 <vPortFree+0x72>
    __asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	613b      	str	r3, [r7, #16]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <vPortFree+0x92>
    __asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60fb      	str	r3, [r7, #12]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da1c      	bge.n	80049e8 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d118      	bne.n	80049e8 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80049c2:	f7fe fa95 	bl	8002ef0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <vPortFree+0xe4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <vPortFree+0xe4>)
 80049d2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049d4:	69b8      	ldr	r0, [r7, #24]
 80049d6:	f000 f86d 	bl	8004ab4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049da:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <vPortFree+0xe8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	4a06      	ldr	r2, [pc, #24]	@ (80049fc <vPortFree+0xe8>)
 80049e2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049e4:	f7fe fa92 	bl	8002f0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049e8:	bf00      	nop
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000208 	.word	0x20000208
 80049f4:	20012e07 	.word	0x20012e07
 80049f8:	20012e14 	.word	0x20012e14
 80049fc:	20012e20 	.word	0x20012e20

08004a00 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a06:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004a0c:	4b24      	ldr	r3, [pc, #144]	@ (8004aa0 <prvHeapInit+0xa0>)
 8004a0e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <prvHeapInit+0xa0>)
 8004a30:	4413      	add	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <prvHeapInit+0xa4>)
 8004a38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa4 <prvHeapInit+0xa4>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004a48:	2208      	movs	r2, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f023 0307 	bic.w	r3, r3, #7
 8004a56:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	@ (8004aa8 <prvHeapInit+0xa8>)
 8004a5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a5e:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <prvHeapInit+0xa8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004a66:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <prvHeapInit+0xa8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <prvHeapInit+0xa8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <prvHeapInit+0xac>)
 8004a8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a07      	ldr	r2, [pc, #28]	@ (8004ab0 <prvHeapInit+0xb0>)
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000208 	.word	0x20000208
 8004aa4:	20012e08 	.word	0x20012e08
 8004aa8:	20012e10 	.word	0x20012e10
 8004aac:	20012e18 	.word	0x20012e18
 8004ab0:	20012e14 	.word	0x20012e14

08004ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004abc:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <prvInsertBlockIntoFreeList+0xe4>)
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e002      	b.n	8004ac8 <prvInsertBlockIntoFreeList+0x14>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d8f7      	bhi.n	8004ac2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a30      	ldr	r2, [pc, #192]	@ (8004b98 <prvInsertBlockIntoFreeList+0xe4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4a2f      	ldr	r2, [pc, #188]	@ (8004b9c <prvInsertBlockIntoFreeList+0xe8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d305      	bcc.n	8004aee <prvInsertBlockIntoFreeList+0x3a>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ba0 <prvInsertBlockIntoFreeList+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d801      	bhi.n	8004aee <prvInsertBlockIntoFreeList+0x3a>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <prvInsertBlockIntoFreeList+0x3c>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	e7fd      	b.n	8004b08 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d108      	bne.n	8004b30 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	441a      	add	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	441a      	add	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d118      	bne.n	8004b76 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b16      	ldr	r3, [pc, #88]	@ (8004ba4 <prvInsertBlockIntoFreeList+0xf0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d00d      	beq.n	8004b6c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e008      	b.n	8004b7e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <prvInsertBlockIntoFreeList+0xf0>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e003      	b.n	8004b7e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d002      	beq.n	8004b8c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20012e08 	.word	0x20012e08
 8004b9c:	20000208 	.word	0x20000208
 8004ba0:	20012e07 	.word	0x20012e07
 8004ba4:	20012e10 	.word	0x20012e10

08004ba8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004bac:	4803      	ldr	r0, [pc, #12]	@ (8004bbc <_cbSendSystemDesc+0x14>)
 8004bae:	f002 f805 	bl	8006bbc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004bb2:	4803      	ldr	r0, [pc, #12]	@ (8004bc0 <_cbSendSystemDesc+0x18>)
 8004bb4:	f002 f802 	bl	8006bbc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	0800754c 	.word	0x0800754c
 8004bc0:	08007588 	.word	0x08007588

08004bc4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bd2:	4a06      	ldr	r2, [pc, #24]	@ (8004bec <SEGGER_SYSVIEW_Conf+0x28>)
 8004bd4:	f001 fc76 	bl	80064c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004bd8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004bdc:	f001 fcb6 	bl	800654c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000000 	.word	0x20000000
 8004be8:	08004ba9 	.word	0x08004ba9
 8004bec:	08007628 	.word	0x08007628

08004bf0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	e033      	b.n	8004c64 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bfc:	491e      	ldr	r1, [pc, #120]	@ (8004c78 <_cbSendTaskList+0x88>)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	491a      	ldr	r1, [pc, #104]	@ (8004c78 <_cbSendTaskList+0x88>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	4c16      	ldr	r4, [pc, #88]	@ (8004c78 <_cbSendTaskList+0x88>)
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4423      	add	r3, r4
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	4d11      	ldr	r5, [pc, #68]	@ (8004c78 <_cbSendTaskList+0x88>)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	442b      	add	r3, r5
 8004c3e:	330c      	adds	r3, #12
 8004c40:	681d      	ldr	r5, [r3, #0]
 8004c42:	4e0d      	ldr	r6, [pc, #52]	@ (8004c78 <_cbSendTaskList+0x88>)
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4433      	add	r3, r6
 8004c50:	3310      	adds	r3, #16
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	462b      	mov	r3, r5
 8004c58:	4622      	mov	r2, r4
 8004c5a:	f000 f8bd 	bl	8004dd8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3301      	adds	r3, #1
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <_cbSendTaskList+0x8c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d3c6      	bcc.n	8004bfc <_cbSendTaskList+0xc>
  }
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c78:	20012e24 	.word	0x20012e24
 8004c7c:	20012ec4 	.word	0x20012ec4

08004c80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c88:	f7fe fa64 	bl	8003154 <xTaskGetTickCountFromISR>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2200      	movs	r2, #0
 8004c90:	469a      	mov	sl, r3
 8004c92:	4693      	mov	fp, r2
 8004c94:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	f04f 0a00 	mov.w	sl, #0
 8004ca4:	f04f 0b00 	mov.w	fp, #0
 8004ca8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004cac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004cb0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004cb4:	4652      	mov	r2, sl
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	1a14      	subs	r4, r2, r0
 8004cba:	eb63 0501 	sbc.w	r5, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	00ab      	lsls	r3, r5, #2
 8004cc8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ccc:	00a2      	lsls	r2, r4, #2
 8004cce:	4614      	mov	r4, r2
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	eb14 0800 	adds.w	r8, r4, r0
 8004cd6:	eb45 0901 	adc.w	r9, r5, r1
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d16:	2205      	movs	r2, #5
 8004d18:	492b      	ldr	r1, [pc, #172]	@ (8004dc8 <SYSVIEW_AddTask+0xc0>)
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f002 fb88 	bl	8007430 <memcmp>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d04b      	beq.n	8004dbe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d26:	4b29      	ldr	r3, [pc, #164]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	d903      	bls.n	8004d36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d2e:	4828      	ldr	r0, [pc, #160]	@ (8004dd0 <SYSVIEW_AddTask+0xc8>)
 8004d30:	f002 faf4 	bl	800731c <SEGGER_SYSVIEW_Warn>
    return;
 8004d34:	e044      	b.n	8004dc0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d36:	4b25      	ldr	r3, [pc, #148]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4926      	ldr	r1, [pc, #152]	@ (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d4a:	4b20      	ldr	r3, [pc, #128]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4921      	ldr	r1, [pc, #132]	@ (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d60:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	491b      	ldr	r1, [pc, #108]	@ (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3308      	adds	r3, #8
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d76:	4b15      	ldr	r3, [pc, #84]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4916      	ldr	r1, [pc, #88]	@ (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	330c      	adds	r3, #12
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4910      	ldr	r1, [pc, #64]	@ (8004dd4 <SYSVIEW_AddTask+0xcc>)
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <SYSVIEW_AddTask+0xc4>)
 8004daa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f80e 	bl	8004dd8 <SYSVIEW_SendTaskInfo>
 8004dbc:	e000      	b.n	8004dc0 <SYSVIEW_AddTask+0xb8>
    return;
 8004dbe:	bf00      	nop

}
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	08007598 	.word	0x08007598
 8004dcc:	20012ec4 	.word	0x20012ec4
 8004dd0:	080075a0 	.word	0x080075a0
 8004dd4:	20012e24 	.word	0x20012e24

08004dd8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004de6:	f107 0310 	add.w	r3, r7, #16
 8004dea:	2218      	movs	r2, #24
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f002 fb2e 	bl	8007450 <memset>
  TaskInfo.TaskID     = TaskID;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e08:	f107 0310 	add.w	r3, r7, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fddd 	bl	80069cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e12:	bf00      	nop
 8004e14:	3728      	adds	r7, #40	@ 0x28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <__NVIC_EnableIRQ>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	db0b      	blt.n	8004e46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4907      	ldr	r1, [pc, #28]	@ (8004e54 <__NVIC_EnableIRQ+0x38>)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	e000e100 	.word	0xe000e100

08004e58 <__NVIC_SetPriority>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db0a      	blt.n	8004e82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	490c      	ldr	r1, [pc, #48]	@ (8004ea4 <__NVIC_SetPriority+0x4c>)
 8004e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e80:	e00a      	b.n	8004e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4908      	ldr	r1, [pc, #32]	@ (8004ea8 <__NVIC_SetPriority+0x50>)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	3b04      	subs	r3, #4
 8004e90:	0112      	lsls	r2, r2, #4
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	440b      	add	r3, r1
 8004e96:	761a      	strb	r2, [r3, #24]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000e100 	.word	0xe000e100
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004eb2:	f002 fa8f 	bl	80073d4 <SEGGER_SYSVIEW_IsStarted>
 8004eb6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004ebe:	f001 fc09 	bl	80066d4 <SEGGER_SYSVIEW_Start>
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <_cbOnUARTRx+0x3c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d806      	bhi.n	8004eec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <_cbOnUARTRx+0x3c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <_cbOnUARTRx+0x3c>)
 8004ee8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004eea:	e009      	b.n	8004f00 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004eec:	f7ff ffde 	bl	8004eac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <_cbOnUARTRx+0x3c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	1dfb      	adds	r3, r7, #7
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4619      	mov	r1, r3
 8004efc:	f000 fb9c 	bl	8005638 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004f00:	bf00      	nop
}
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000010 	.word	0x20000010

08004f0c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004f14:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <_cbOnUARTTx+0x5c>)
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d80f      	bhi.n	8004f3c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004f1c:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <_cbOnUARTTx+0x5c>)
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <_cbOnUARTTx+0x60>)
 8004f24:	5c9a      	ldrb	r2, [r3, r2]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f68 <_cbOnUARTTx+0x5c>)
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <_cbOnUARTTx+0x5c>)
 8004f34:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f3a:	e00f      	b.n	8004f5c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <_cbOnUARTTx+0x5c>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fa1b 	bl	8005380 <SEGGER_RTT_ReadUpBufferNoLock>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da02      	bge.n	8004f5a <_cbOnUARTTx+0x4e>
    r = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e000      	b.n	8004f5c <_cbOnUARTTx+0x50>
  }
Done:
 8004f5a:	bf00      	nop
  return r;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000010 	.word	0x20000010
 8004f6c:	08007630 	.word	0x08007630

08004f70 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f78:	4a04      	ldr	r2, [pc, #16]	@ (8004f8c <SEGGER_UART_init+0x1c>)
 8004f7a:	4905      	ldr	r1, [pc, #20]	@ (8004f90 <SEGGER_UART_init+0x20>)
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f863 	bl	8005048 <HIF_UART_Init>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08004ecd 	.word	0x08004ecd
 8004f90:	08004f0d 	.word	0x08004f0d

08004f94 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005014 <USART2_IRQHandler+0x80>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d011      	beq.n	8004fce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <USART2_IRQHandler+0x84>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 030b 	and.w	r3, r3, #11
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d108      	bne.n	8004fce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004fbc:	4b17      	ldr	r3, [pc, #92]	@ (800501c <USART2_IRQHandler+0x88>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fc4:	4b15      	ldr	r3, [pc, #84]	@ (800501c <USART2_IRQHandler+0x88>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	79fa      	ldrb	r2, [r7, #7]
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fd8:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <USART2_IRQHandler+0x8c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <USART2_IRQHandler+0x8c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	1dfa      	adds	r2, r7, #7
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4798      	blx	r3
 8004fea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <USART2_IRQHandler+0x90>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8005024 <USART2_IRQHandler+0x90>)
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e006      	b.n	800500e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <USART2_IRQHandler+0x80>)
 8005002:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005004:	79fa      	ldrb	r2, [r7, #7]
 8005006:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <USART2_IRQHandler+0x84>)
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e000      	b.n	800500e <USART2_IRQHandler+0x7a>
      return;
 800500c:	bf00      	nop
    }
  }
}
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40004400 	.word	0x40004400
 8005018:	40004404 	.word	0x40004404
 800501c:	20012ec8 	.word	0x20012ec8
 8005020:	20012ecc 	.word	0x20012ecc
 8005024:	4000440c 	.word	0x4000440c

08005028 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	6013      	str	r3, [r2, #0]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	4000440c 	.word	0x4000440c

08005048 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005054:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HIF_UART_Init+0xc8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <HIF_UART_Init+0xc8>)
 800505a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800505e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005060:	4b2c      	ldr	r3, [pc, #176]	@ (8005114 <HIF_UART_Init+0xcc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2b      	ldr	r2, [pc, #172]	@ (8005114 <HIF_UART_Init+0xcc>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800506c:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HIF_UART_Init+0xd0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005078:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005080:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005082:	4a25      	ldr	r2, [pc, #148]	@ (8005118 <HIF_UART_Init+0xd0>)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005088:	4b24      	ldr	r3, [pc, #144]	@ (800511c <HIF_UART_Init+0xd4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005094:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800509c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800509e:	4a1f      	ldr	r2, [pc, #124]	@ (800511c <HIF_UART_Init+0xd4>)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80050a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <HIF_UART_Init+0xd8>)
 80050a6:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80050aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80050ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <HIF_UART_Init+0xdc>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80050b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005128 <HIF_UART_Init+0xe0>)
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80050be:	4a1b      	ldr	r2, [pc, #108]	@ (800512c <HIF_UART_Init+0xe4>)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	3301      	adds	r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d6:	d302      	bcc.n	80050de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050d8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80050dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <HIF_UART_Init+0xe8>)
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050ee:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HIF_UART_Init+0xec>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050f4:	4a10      	ldr	r2, [pc, #64]	@ (8005138 <HIF_UART_Init+0xf0>)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050fa:	2106      	movs	r1, #6
 80050fc:	2026      	movs	r0, #38	@ 0x26
 80050fe:	f7ff feab 	bl	8004e58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005102:	2026      	movs	r0, #38	@ 0x26
 8005104:	f7ff fe8a 	bl	8004e1c <__NVIC_EnableIRQ>
}
 8005108:	bf00      	nop
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023840 	.word	0x40023840
 8005114:	40023830 	.word	0x40023830
 8005118:	40020020 	.word	0x40020020
 800511c:	40020000 	.word	0x40020000
 8005120:	4000440c 	.word	0x4000440c
 8005124:	40004410 	.word	0x40004410
 8005128:	40004414 	.word	0x40004414
 800512c:	0501bd00 	.word	0x0501bd00
 8005130:	40004408 	.word	0x40004408
 8005134:	20012ec8 	.word	0x20012ec8
 8005138:	20012ecc 	.word	0x20012ecc

0800513c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005142:	4b26      	ldr	r3, [pc, #152]	@ (80051dc <_DoInit+0xa0>)
 8005144:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005146:	22a8      	movs	r2, #168	@ 0xa8
 8005148:	2100      	movs	r1, #0
 800514a:	6838      	ldr	r0, [r7, #0]
 800514c:	f002 f980 	bl	8007450 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2203      	movs	r2, #3
 8005154:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2203      	movs	r2, #3
 800515a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4a20      	ldr	r2, [pc, #128]	@ (80051e0 <_DoInit+0xa4>)
 8005160:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4a1f      	ldr	r2, [pc, #124]	@ (80051e4 <_DoInit+0xa8>)
 8005166:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800516e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <_DoInit+0xa4>)
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <_DoInit+0xac>)
 800518c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2210      	movs	r2, #16
 8005192:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051a6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	e00c      	b.n	80051ca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1c3 030f 	rsb	r3, r3, #15
 80051b6:	4a0d      	ldr	r2, [pc, #52]	@ (80051ec <_DoInit+0xb0>)
 80051b8:	5cd1      	ldrb	r1, [r2, r3]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	460a      	mov	r2, r1
 80051c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3301      	adds	r3, #1
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d9ef      	bls.n	80051b0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051d0:	f3bf 8f5f 	dmb	sy
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20012ed0 	.word	0x20012ed0
 80051e0:	080075f0 	.word	0x080075f0
 80051e4:	20012f78 	.word	0x20012f78
 80051e8:	20013378 	.word	0x20013378
 80051ec:	08007634 	.word	0x08007634

080051f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	@ 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051fc:	2300      	movs	r3, #0
 80051fe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	429a      	cmp	r2, r3
 8005212:	d905      	bls.n	8005220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
 800521e:	e007      	b.n	8005230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	1acb      	subs	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3b01      	subs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523a:	4293      	cmp	r3, r2
 800523c:	bf28      	it	cs
 800523e:	4613      	movcs	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4293      	cmp	r3, r2
 8005248:	bf28      	it	cs
 800524a:	4613      	movcs	r3, r2
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	6978      	ldr	r0, [r7, #20]
 800525e:	f002 f923 	bl	80074a8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	4413      	add	r3, r2
 8005268:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	4413      	add	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	4413      	add	r3, r2
 8005280:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	429a      	cmp	r2, r3
 800528a:	d101      	bne.n	8005290 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005290:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1b2      	bne.n	8005206 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3728      	adds	r7, #40	@ 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b088      	sub	sp, #32
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d911      	bls.n	80052f2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f002 f8e3 	bl	80074a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052e2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052f0:	e01f      	b.n	8005332 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6938      	ldr	r0, [r7, #16]
 8005306:	f002 f8cf 	bl	80074a8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	4413      	add	r3, r2
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4619      	mov	r1, r3
 8005322:	6938      	ldr	r0, [r7, #16]
 8005324:	f002 f8c0 	bl	80074a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005328:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	60da      	str	r2, [r3, #12]
}
 8005332:	bf00      	nop
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	429a      	cmp	r2, r3
 8005354:	d808      	bhi.n	8005368 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad2      	subs	r2, r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	3b01      	subs	r3, #1
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e004      	b.n	8005372 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005372:	697b      	ldr	r3, [r7, #20]
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	@ 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800538c:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b53      	cmp	r3, #83	@ 0x53
 8005398:	d001      	beq.n	800539e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800539a:	f7ff fecf 	bl	800513c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4a37      	ldr	r2, [pc, #220]	@ (8005488 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d92b      	bls.n	8005424 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4293      	cmp	r3, r2
 80053dc:	bf28      	it	cs
 80053de:	4613      	movcs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e8:	4413      	add	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	6939      	ldr	r1, [r7, #16]
 80053f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053f2:	f002 f859 	bl	80074a8 <memcpy>
    NumBytesRead += NumBytesRem;
 80053f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800540e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800541c:	429a      	cmp	r2, r3
 800541e:	d101      	bne.n	8005424 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005420:	2300      	movs	r3, #0
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4293      	cmp	r3, r2
 8005432:	bf28      	it	cs
 8005434:	4613      	movcs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d019      	beq.n	8005472 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	4413      	add	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800544e:	f002 f82b 	bl	80074a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800545a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800546a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4413      	add	r3, r2
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800547c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005480:	4618      	mov	r0, r3
 8005482:	3730      	adds	r7, #48	@ 0x30
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20012ed0 	.word	0x20012ed0

0800548c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	@ 0x30
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005498:	4b3e      	ldr	r3, [pc, #248]	@ (8005594 <SEGGER_RTT_ReadNoLock+0x108>)
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b53      	cmp	r3, #83	@ 0x53
 80054a4:	d001      	beq.n	80054aa <SEGGER_RTT_ReadNoLock+0x1e>
 80054a6:	f7ff fe49 	bl	800513c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	3360      	adds	r3, #96	@ 0x60
 80054b6:	4a37      	ldr	r2, [pc, #220]	@ (8005594 <SEGGER_RTT_ReadNoLock+0x108>)
 80054b8:	4413      	add	r3, r2
 80054ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d92b      	bls.n	8005530 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bf28      	it	cs
 80054ea:	4613      	movcs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	4413      	add	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	6939      	ldr	r1, [r7, #16]
 80054fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054fe:	f001 ffd3 	bl	80074a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800550a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4413      	add	r3, r2
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800551a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005528:	429a      	cmp	r2, r3
 800552a:	d101      	bne.n	8005530 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800552c:	2300      	movs	r3, #0
 800552e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4293      	cmp	r3, r2
 800553e:	bf28      	it	cs
 8005540:	4613      	movcs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d019      	beq.n	800557e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	4413      	add	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	6939      	ldr	r1, [r7, #16]
 8005558:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800555a:	f001 ffa5 	bl	80074a8 <memcpy>
    NumBytesRead += NumBytesRem;
 800555e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4413      	add	r3, r2
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005588:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800558c:	4618      	mov	r0, r3
 800558e:	3730      	adds	r7, #48	@ 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20012ed0 	.word	0x20012ed0

08005598 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	3360      	adds	r3, #96	@ 0x60
 80055b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80055b6:	4413      	add	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d029      	beq.n	8005616 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d82e      	bhi.n	8005624 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d013      	beq.n	80055f6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055ce:	e029      	b.n	8005624 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7ff feb2 	bl	800533a <_GetAvailWriteSpace>
 80055d6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d202      	bcs.n	80055e6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055e4:	e021      	b.n	800562a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f7ff fe5b 	bl	80052aa <_WriteNoCheck>
    break;
 80055f4:	e019      	b.n	800562a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff fe9f 	bl	800533a <_GetAvailWriteSpace>
 80055fc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4293      	cmp	r3, r2
 8005604:	bf28      	it	cs
 8005606:	4613      	movcs	r3, r2
 8005608:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff fe4b 	bl	80052aa <_WriteNoCheck>
    break;
 8005614:	e009      	b.n	800562a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	69b9      	ldr	r1, [r7, #24]
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f7ff fde8 	bl	80051f0 <_WriteBlocking>
 8005620:	61f8      	str	r0, [r7, #28]
    break;
 8005622:	e002      	b.n	800562a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
    break;
 8005628:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800562a:	69fb      	ldr	r3, [r7, #28]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20012ed0 	.word	0x20012ed0

08005638 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005644:	4b0e      	ldr	r3, [pc, #56]	@ (8005680 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b53      	cmp	r3, #83	@ 0x53
 8005650:	d001      	beq.n	8005656 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005652:	f7ff fd73 	bl	800513c <_DoInit>
  SEGGER_RTT_LOCK();
 8005656:	f3ef 8311 	mrs	r3, BASEPRI
 800565a:	f04f 0120 	mov.w	r1, #32
 800565e:	f381 8811 	msr	BASEPRI, r1
 8005662:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ff95 	bl	8005598 <SEGGER_RTT_WriteDownBufferNoLock>
 800566e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20012ed0 	.word	0x20012ed0

08005684 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005692:	4b3d      	ldr	r3, [pc, #244]	@ (8005788 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b53      	cmp	r3, #83	@ 0x53
 800569e:	d001      	beq.n	80056a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80056a0:	f7ff fd4c 	bl	800513c <_DoInit>
  SEGGER_RTT_LOCK();
 80056a4:	f3ef 8311 	mrs	r3, BASEPRI
 80056a8:	f04f 0120 	mov.w	r1, #32
 80056ac:	f381 8811 	msr	BASEPRI, r1
 80056b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056b2:	4b35      	ldr	r3, [pc, #212]	@ (8005788 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80056b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80056ba:	6939      	ldr	r1, [r7, #16]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	3304      	adds	r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	429a      	cmp	r2, r3
 80056e0:	dbeb      	blt.n	80056ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80056e2:	e000      	b.n	80056e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	da3f      	bge.n	8005770 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80056f0:	6939      	ldr	r1, [r7, #16]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	440b      	add	r3, r1
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005704:	6939      	ldr	r1, [r7, #16]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	3304      	adds	r3, #4
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800571a:	6939      	ldr	r1, [r7, #16]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	440b      	add	r3, r1
 8005728:	3320      	adds	r3, #32
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	4613      	mov	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	440b      	add	r3, r1
 800573c:	3328      	adds	r3, #40	@ 0x28
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005742:	6939      	ldr	r1, [r7, #16]
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	3324      	adds	r3, #36	@ 0x24
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	4613      	mov	r3, r2
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	332c      	adds	r3, #44	@ 0x2c
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800576a:	f3bf 8f5f 	dmb	sy
 800576e:	e002      	b.n	8005776 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800577c:	69fb      	ldr	r3, [r7, #28]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20012ed0 	.word	0x20012ed0

0800578c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	@ 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800579a:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b53      	cmp	r3, #83	@ 0x53
 80057a6:	d001      	beq.n	80057ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80057a8:	f7ff fcc8 	bl	800513c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80057ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d82c      	bhi.n	8005810 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80057b6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ba:	f04f 0120 	mov.w	r1, #32
 80057be:	f381 8811 	msr	BASEPRI, r1
 80057c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	3360      	adds	r3, #96	@ 0x60
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00e      	beq.n	80057fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2200      	movs	r2, #0
 80057f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005800:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	e002      	b.n	8005816 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20012ed0 	.word	0x20012ed0

08005824 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b80      	cmp	r3, #128	@ 0x80
 8005840:	d90a      	bls.n	8005858 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005846:	e007      	b.n	8005858 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	1c53      	adds	r3, r2, #1
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	60f9      	str	r1, [r7, #12]
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <_EncodeStr+0x46>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ee      	bne.n	8005848 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3307      	adds	r3, #7
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058a2:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <_HandleIncomingPacket+0xd8>)
 80058a4:	7e1b      	ldrb	r3, [r3, #24]
 80058a6:	4618      	mov	r0, r3
 80058a8:	1cfb      	adds	r3, r7, #3
 80058aa:	2201      	movs	r2, #1
 80058ac:	4619      	mov	r1, r3
 80058ae:	f7ff fded 	bl	800548c <SEGGER_RTT_ReadNoLock>
 80058b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d057      	beq.n	800596a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	2b80      	cmp	r3, #128	@ 0x80
 80058be:	d031      	beq.n	8005924 <_HandleIncomingPacket+0x88>
 80058c0:	2b80      	cmp	r3, #128	@ 0x80
 80058c2:	dc40      	bgt.n	8005946 <_HandleIncomingPacket+0xaa>
 80058c4:	2b07      	cmp	r3, #7
 80058c6:	dc15      	bgt.n	80058f4 <_HandleIncomingPacket+0x58>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dd3c      	ble.n	8005946 <_HandleIncomingPacket+0xaa>
 80058cc:	3b01      	subs	r3, #1
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d839      	bhi.n	8005946 <_HandleIncomingPacket+0xaa>
 80058d2:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <_HandleIncomingPacket+0x3c>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058fb 	.word	0x080058fb
 80058dc:	08005901 	.word	0x08005901
 80058e0:	08005907 	.word	0x08005907
 80058e4:	0800590d 	.word	0x0800590d
 80058e8:	08005913 	.word	0x08005913
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800591f 	.word	0x0800591f
 80058f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f6:	d033      	beq.n	8005960 <_HandleIncomingPacket+0xc4>
 80058f8:	e025      	b.n	8005946 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80058fa:	f000 feeb 	bl	80066d4 <SEGGER_SYSVIEW_Start>
      break;
 80058fe:	e034      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005900:	f000 ffa4 	bl	800684c <SEGGER_SYSVIEW_Stop>
      break;
 8005904:	e031      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005906:	f001 f97d 	bl	8006c04 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800590a:	e02e      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800590c:	f001 f942 	bl	8006b94 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005910:	e02b      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005912:	f000 ffc1 	bl	8006898 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005916:	e028      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005918:	f001 fcae 	bl	8007278 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800591c:	e025      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800591e:	f001 fc8d 	bl	800723c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005922:	e022      	b.n	800596a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005924:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <_HandleIncomingPacket+0xd8>)
 8005926:	7e1b      	ldrb	r3, [r3, #24]
 8005928:	4618      	mov	r0, r3
 800592a:	1cfb      	adds	r3, r7, #3
 800592c:	2201      	movs	r2, #1
 800592e:	4619      	mov	r1, r3
 8005930:	f7ff fdac 	bl	800548c <SEGGER_RTT_ReadNoLock>
 8005934:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d013      	beq.n	8005964 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fbf2 	bl	8007128 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005944:	e00e      	b.n	8005964 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	b25b      	sxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	da0c      	bge.n	8005968 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800594e:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <_HandleIncomingPacket+0xd8>)
 8005950:	7e1b      	ldrb	r3, [r3, #24]
 8005952:	4618      	mov	r0, r3
 8005954:	1cfb      	adds	r3, r7, #3
 8005956:	2201      	movs	r2, #1
 8005958:	4619      	mov	r1, r3
 800595a:	f7ff fd97 	bl	800548c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800595e:	e003      	b.n	8005968 <_HandleIncomingPacket+0xcc>
      break;
 8005960:	bf00      	nop
 8005962:	e002      	b.n	800596a <_HandleIncomingPacket+0xce>
      break;
 8005964:	bf00      	nop
 8005966:	e000      	b.n	800596a <_HandleIncomingPacket+0xce>
      break;
 8005968:	bf00      	nop
    }
  }
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20014390 	.word	0x20014390

08005978 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b08c      	sub	sp, #48	@ 0x30
 800597c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800597e:	2301      	movs	r3, #1
 8005980:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	3301      	adds	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598c:	4b32      	ldr	r3, [pc, #200]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005992:	e00b      	b.n	80059ac <_TrySendOverflowPacket+0x34>
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	b2da      	uxtb	r2, r3
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800599e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80059b0:	d8f0      	bhi.n	8005994 <_TrySendOverflowPacket+0x1c>
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059c2:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <_TrySendOverflowPacket+0xe4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059c8:	4b23      	ldr	r3, [pc, #140]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	e00b      	b.n	80059f4 <_TrySendOverflowPacket+0x7c>
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	1c59      	adds	r1, r3, #1
 80059e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80059e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	09db      	lsrs	r3, r3, #7
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80059f8:	d8f0      	bhi.n	80059dc <_TrySendOverflowPacket+0x64>
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005a0a:	4b13      	ldr	r3, [pc, #76]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fa fbf8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a20:	4603      	mov	r3, r0
 8005a22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a24:	f7ff fb00 	bl	8005028 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a34:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e004      	b.n	8005a4c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a42:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	3301      	adds	r3, #1
 8005a48:	4a03      	ldr	r2, [pc, #12]	@ (8005a58 <_TrySendOverflowPacket+0xe0>)
 8005a4a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a4c:	693b      	ldr	r3, [r7, #16]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3730      	adds	r7, #48	@ 0x30
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20014390 	.word	0x20014390
 8005a5c:	e0001004 	.word	0xe0001004

08005a60 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a6c:	4b96      	ldr	r3, [pc, #600]	@ (8005cc8 <_SendPacket+0x268>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d010      	beq.n	8005a96 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a74:	4b94      	ldr	r3, [pc, #592]	@ (8005cc8 <_SendPacket+0x268>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8130 	beq.w	8005cde <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a7e:	4b92      	ldr	r3, [pc, #584]	@ (8005cc8 <_SendPacket+0x268>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d109      	bne.n	8005a9a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a86:	f7ff ff77 	bl	8005978 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc8 <_SendPacket+0x268>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	f040 8127 	bne.w	8005ce2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005a94:	e001      	b.n	8005a9a <_SendPacket+0x3a>
    goto Send;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <_SendPacket+0x3c>
Send:
 8005a9a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b1f      	cmp	r3, #31
 8005aa0:	d809      	bhi.n	8005ab6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005aa2:	4b89      	ldr	r3, [pc, #548]	@ (8005cc8 <_SendPacket+0x268>)
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 8118 	bne.w	8005ce6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b17      	cmp	r3, #23
 8005aba:	d807      	bhi.n	8005acc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e0c4      	b.n	8005c56 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ad8:	d912      	bls.n	8005b00 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	09da      	lsrs	r2, r3, #7
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	60fa      	str	r2, [r7, #12]
 8005af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e006      	b.n	8005b0e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b7e      	cmp	r3, #126	@ 0x7e
 8005b12:	d807      	bhi.n	8005b24 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e098      	b.n	8005c56 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2a:	d212      	bcs.n	8005b52 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	09da      	lsrs	r2, r3, #7
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	3a01      	subs	r2, #1
 8005b44:	60fa      	str	r2, [r7, #12]
 8005b46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e081      	b.n	8005c56 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b58:	d21d      	bcs.n	8005b96 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0b9a      	lsrs	r2, r3, #14
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	09db      	lsrs	r3, r3, #7
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	3a01      	subs	r2, #1
 8005b74:	60fa      	str	r2, [r7, #12]
 8005b76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	3a01      	subs	r2, #1
 8005b88:	60fa      	str	r2, [r7, #12]
 8005b8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e05f      	b.n	8005c56 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b9c:	d228      	bcs.n	8005bf0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0d5a      	lsrs	r2, r3, #21
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0b9b      	lsrs	r3, r3, #14
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	60fa      	str	r2, [r7, #12]
 8005bba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	60fa      	str	r2, [r7, #12]
 8005bd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	3a01      	subs	r2, #1
 8005be2:	60fa      	str	r2, [r7, #12]
 8005be4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e032      	b.n	8005c56 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0f1a      	lsrs	r2, r3, #28
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0d5b      	lsrs	r3, r3, #21
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	60fa      	str	r2, [r7, #12]
 8005c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0b9b      	lsrs	r3, r3, #14
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	60fa      	str	r2, [r7, #12]
 8005c22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	09db      	lsrs	r3, r3, #7
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	3a01      	subs	r2, #1
 8005c36:	60fa      	str	r2, [r7, #12]
 8005c38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	60fa      	str	r2, [r7, #12]
 8005c4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <_SendPacket+0x26c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc8 <_SendPacket+0x268>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	623b      	str	r3, [r7, #32]
 8005c6e:	e00b      	b.n	8005c88 <_SendPacket+0x228>
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	09db      	lsrs	r3, r3, #7
 8005c86:	623b      	str	r3, [r7, #32]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c8c:	d8f0      	bhi.n	8005c70 <_SendPacket+0x210>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <_SendPacket+0x268>)
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	f7fa faaf 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005cb2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005cb4:	f7ff f9b8 	bl	8005028 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cbe:	4a02      	ldr	r2, [pc, #8]	@ (8005cc8 <_SendPacket+0x268>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	60d3      	str	r3, [r2, #12]
 8005cc4:	e010      	b.n	8005ce8 <_SendPacket+0x288>
 8005cc6:	bf00      	nop
 8005cc8:	20014390 	.word	0x20014390
 8005ccc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005cd0:	4b19      	ldr	r3, [pc, #100]	@ (8005d38 <_SendPacket+0x2d8>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	4b17      	ldr	r3, [pc, #92]	@ (8005d38 <_SendPacket+0x2d8>)
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e004      	b.n	8005ce8 <_SendPacket+0x288>
    goto SendDone;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <_SendPacket+0x288>
      goto SendDone;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <_SendPacket+0x288>
      goto SendDone;
 8005ce6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ce8:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <_SendPacket+0x2d8>)
 8005cea:	7e1b      	ldrb	r3, [r3, #24]
 8005cec:	4619      	mov	r1, r3
 8005cee:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <_SendPacket+0x2dc>)
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	336c      	adds	r3, #108	@ 0x6c
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005d38 <_SendPacket+0x2d8>)
 8005d00:	7e1b      	ldrb	r3, [r3, #24]
 8005d02:	4618      	mov	r0, r3
 8005d04:	490d      	ldr	r1, [pc, #52]	@ (8005d3c <_SendPacket+0x2dc>)
 8005d06:	4603      	mov	r3, r0
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4403      	add	r3, r0
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	440b      	add	r3, r1
 8005d10:	3370      	adds	r3, #112	@ 0x70
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d00b      	beq.n	8005d30 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <_SendPacket+0x2d8>)
 8005d1a:	789b      	ldrb	r3, [r3, #2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d107      	bne.n	8005d30 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <_SendPacket+0x2d8>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005d26:	f7ff fdb9 	bl	800589c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005d2a:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <_SendPacket+0x2d8>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005d30:	bf00      	nop
 8005d32:	3728      	adds	r7, #40	@ 0x28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20014390 	.word	0x20014390
 8005d3c:	20012ed0 	.word	0x20012ed0

08005d40 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	@ 0x28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3301      	adds	r3, #1
 8005d56:	2b80      	cmp	r3, #128	@ 0x80
 8005d58:	d80a      	bhi.n	8005d70 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6051      	str	r1, [r2, #4]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b80      	cmp	r3, #128	@ 0x80
 8005d76:	d15a      	bne.n	8005e2e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	e00b      	b.n	8005db2 <_StoreChar+0x72>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005da4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <_StoreChar+0x5a>
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e00b      	b.n	8005dea <_StoreChar+0xaa>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	61f9      	str	r1, [r7, #28]
 8005ddc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dee:	d8f0      	bhi.n	8005dd2 <_StoreChar+0x92>
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	61fa      	str	r2, [r7, #28]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	221a      	movs	r2, #26
 8005e06:	6939      	ldr	r1, [r7, #16]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fe29 	bl	8005a60 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fd36 	bl	8005884 <_PreparePacket>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
  }
}
 8005e2e:	bf00      	nop
 8005e30:	3728      	adds	r7, #40	@ 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	@ 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e52:	e007      	b.n	8005e64 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	623b      	str	r3, [r7, #32]
    Width++;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005e64:	6a3a      	ldr	r2, [r7, #32]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d2f3      	bcs.n	8005e54 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d901      	bls.n	8005e78 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d000      	beq.n	8005e84 <_PrintUnsigned+0x4c>
 8005e82:	e01f      	b.n	8005ec4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01c      	beq.n	8005ec4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <_PrintUnsigned+0x68>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <_PrintUnsigned+0x68>
        c = '0';
 8005e9a:	2330      	movs	r3, #48	@ 0x30
 8005e9c:	76fb      	strb	r3, [r7, #27]
 8005e9e:	e001      	b.n	8005ea4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ea4:	e007      	b.n	8005eb6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005eac:	7efb      	ldrb	r3, [r7, #27]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff ff45 	bl	8005d40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <_PrintUnsigned+0x8c>
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3f0      	bcc.n	8005ea6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d903      	bls.n	8005ed2 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	e009      	b.n	8005ee6 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d200      	bcs.n	8005ee6 <_PrintUnsigned+0xae>
        break;
 8005ee4:	e005      	b.n	8005ef2 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ef0:	e7e8      	b.n	8005ec4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005f0a:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <_PrintUnsigned+0x128>)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ff13 	bl	8005d40 <_StoreChar>
    Digit /= Base;
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e3      	bne.n	8005ef2 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f3a:	e006      	b.n	8005f4a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005f42:	2120      	movs	r1, #32
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fefb 	bl	8005d40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <_PrintUnsigned+0x120>
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3f1      	bcc.n	8005f3c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3728      	adds	r7, #40	@ 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	08007654 	.word	0x08007654

08005f64 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfb8      	it	lt
 8005f78:	425b      	neglt	r3, r3
 8005f7a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f80:	e007      	b.n	8005f92 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f8a:	613b      	str	r3, [r7, #16]
    Width++;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	daf3      	bge.n	8005f82 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d901      	bls.n	8005fa6 <_PrintInt+0x42>
    Width = NumDigits;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <_PrintInt+0x5e>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db04      	blt.n	8005fbc <_PrintInt+0x58>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <_PrintInt+0x5e>
    FieldWidth--;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <_PrintInt+0x6e>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <_PrintInt+0x9c>
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d111      	bne.n	8006000 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe2:	e006      	b.n	8005ff2 <_PrintInt+0x8e>
        FieldWidth--;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005fea:	2120      	movs	r1, #32
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fea7 	bl	8005d40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <_PrintInt+0x9c>
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3f1      	bcc.n	8005fe4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da07      	bge.n	8006016 <_PrintInt+0xb2>
    v = -v;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	425b      	negs	r3, r3
 800600a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800600c:	212d      	movs	r1, #45	@ 0x2d
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fe96 	bl	8005d40 <_StoreChar>
 8006014:	e008      	b.n	8006028 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006020:	212b      	movs	r1, #43	@ 0x2b
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fe8c 	bl	8005d40 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d019      	beq.n	8006066 <_PrintInt+0x102>
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <_PrintInt+0x102>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d111      	bne.n	8006066 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006048:	e006      	b.n	8006058 <_PrintInt+0xf4>
        FieldWidth--;
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	3b01      	subs	r3, #1
 800604e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006050:	2130      	movs	r1, #48	@ 0x30
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fe74 	bl	8005d40 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <_PrintInt+0x102>
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	429a      	cmp	r2, r3
 8006064:	d3f1      	bcc.n	800604a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fedf 	bl	8005e38 <_PrintUnsigned>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b098      	sub	sp, #96	@ 0x60
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006090:	f3ef 8311 	mrs	r3, BASEPRI
 8006094:	f04f 0120 	mov.w	r1, #32
 8006098:	f381 8811 	msr	BASEPRI, r1
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800609e:	48b7      	ldr	r0, [pc, #732]	@ (800637c <_VPrintTarget+0x2f8>)
 80060a0:	f7ff fbf0 	bl	8005884 <_PreparePacket>
 80060a4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80060a6:	4bb5      	ldr	r3, [pc, #724]	@ (800637c <_VPrintTarget+0x2f8>)
 80060a8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80060aa:	2300      	movs	r3, #0
 80060ac:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3301      	adds	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80060ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 81a8 	beq.w	8006424 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80060d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060d8:	2b25      	cmp	r3, #37	@ 0x25
 80060da:	f040 8195 	bne.w	8006408 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80060de:	2300      	movs	r3, #0
 80060e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80060ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060f2:	3b23      	subs	r3, #35	@ 0x23
 80060f4:	2b0d      	cmp	r3, #13
 80060f6:	d83f      	bhi.n	8006178 <_VPrintTarget+0xf4>
 80060f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <_VPrintTarget+0x7c>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006169 	.word	0x08006169
 8006104:	08006179 	.word	0x08006179
 8006108:	08006179 	.word	0x08006179
 800610c:	08006179 	.word	0x08006179
 8006110:	08006179 	.word	0x08006179
 8006114:	08006179 	.word	0x08006179
 8006118:	08006179 	.word	0x08006179
 800611c:	08006179 	.word	0x08006179
 8006120:	08006159 	.word	0x08006159
 8006124:	08006179 	.word	0x08006179
 8006128:	08006139 	.word	0x08006139
 800612c:	08006179 	.word	0x08006179
 8006130:	08006179 	.word	0x08006179
 8006134:	08006149 	.word	0x08006149
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e01a      	b.n	800617e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614a:	f043 0302 	orr.w	r3, r3, #2
 800614e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	e012      	b.n	800617e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615a:	f043 0304 	orr.w	r3, r3, #4
 800615e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e00a      	b.n	800617e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800616a:	f043 0308 	orr.w	r3, r3, #8
 800616e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e002      	b.n	800617e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006178:	2300      	movs	r3, #0
 800617a:	653b      	str	r3, [r7, #80]	@ 0x50
 800617c:	bf00      	nop
        }
      } while (v);
 800617e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1b0      	bne.n	80060e6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006184:	2300      	movs	r3, #0
 8006186:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006194:	2b2f      	cmp	r3, #47	@ 0x2f
 8006196:	d912      	bls.n	80061be <_VPrintTarget+0x13a>
 8006198:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800619c:	2b39      	cmp	r3, #57	@ 0x39
 800619e:	d80e      	bhi.n	80061be <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80061a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	461a      	mov	r2, r3
 80061b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061b6:	4413      	add	r3, r2
 80061b8:	3b30      	subs	r3, #48	@ 0x30
 80061ba:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80061bc:	e7e4      	b.n	8006188 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80061be:	2300      	movs	r3, #0
 80061c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80061ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80061d0:	d11d      	bne.n	800620e <_VPrintTarget+0x18a>
        sFormat++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80061e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80061e6:	d912      	bls.n	800620e <_VPrintTarget+0x18a>
 80061e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061ec:	2b39      	cmp	r3, #57	@ 0x39
 80061ee:	d80e      	bhi.n	800620e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80061f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	461a      	mov	r2, r3
 8006202:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006206:	4413      	add	r3, r2
 8006208:	3b30      	subs	r3, #48	@ 0x30
 800620a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800620c:	e7e4      	b.n	80061d8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800621a:	2b6c      	cmp	r3, #108	@ 0x6c
 800621c:	d003      	beq.n	8006226 <_VPrintTarget+0x1a2>
 800621e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006222:	2b68      	cmp	r3, #104	@ 0x68
 8006224:	d107      	bne.n	8006236 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006234:	e7ef      	b.n	8006216 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006236:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800623a:	2b25      	cmp	r3, #37	@ 0x25
 800623c:	f000 80d8 	beq.w	80063f0 <_VPrintTarget+0x36c>
 8006240:	2b25      	cmp	r3, #37	@ 0x25
 8006242:	f2c0 80dc 	blt.w	80063fe <_VPrintTarget+0x37a>
 8006246:	2b78      	cmp	r3, #120	@ 0x78
 8006248:	f300 80d9 	bgt.w	80063fe <_VPrintTarget+0x37a>
 800624c:	2b58      	cmp	r3, #88	@ 0x58
 800624e:	f2c0 80d6 	blt.w	80063fe <_VPrintTarget+0x37a>
 8006252:	3b58      	subs	r3, #88	@ 0x58
 8006254:	2b20      	cmp	r3, #32
 8006256:	f200 80d2 	bhi.w	80063fe <_VPrintTarget+0x37a>
 800625a:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <_VPrintTarget+0x1dc>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006357 	.word	0x08006357
 8006264:	080063ff 	.word	0x080063ff
 8006268:	080063ff 	.word	0x080063ff
 800626c:	080063ff 	.word	0x080063ff
 8006270:	080063ff 	.word	0x080063ff
 8006274:	080063ff 	.word	0x080063ff
 8006278:	080063ff 	.word	0x080063ff
 800627c:	080063ff 	.word	0x080063ff
 8006280:	080063ff 	.word	0x080063ff
 8006284:	080063ff 	.word	0x080063ff
 8006288:	080063ff 	.word	0x080063ff
 800628c:	080062e5 	.word	0x080062e5
 8006290:	0800630b 	.word	0x0800630b
 8006294:	080063ff 	.word	0x080063ff
 8006298:	080063ff 	.word	0x080063ff
 800629c:	080063ff 	.word	0x080063ff
 80062a0:	080063ff 	.word	0x080063ff
 80062a4:	080063ff 	.word	0x080063ff
 80062a8:	080063ff 	.word	0x080063ff
 80062ac:	080063ff 	.word	0x080063ff
 80062b0:	080063ff 	.word	0x080063ff
 80062b4:	080063ff 	.word	0x080063ff
 80062b8:	080063ff 	.word	0x080063ff
 80062bc:	080063ff 	.word	0x080063ff
 80062c0:	080063cb 	.word	0x080063cb
 80062c4:	080063ff 	.word	0x080063ff
 80062c8:	080063ff 	.word	0x080063ff
 80062cc:	08006381 	.word	0x08006381
 80062d0:	080063ff 	.word	0x080063ff
 80062d4:	08006331 	.word	0x08006331
 80062d8:	080063ff 	.word	0x080063ff
 80062dc:	080063ff 	.word	0x080063ff
 80062e0:	08006357 	.word	0x08006357
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	1d19      	adds	r1, r3, #4
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80062f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80062f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80062fc:	f107 0310 	add.w	r3, r7, #16
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fd1c 	bl	8005d40 <_StoreChar>
        break;
 8006308:	e07a      	b.n	8006400 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	1d19      	adds	r1, r3, #4
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6011      	str	r1, [r2, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006318:	f107 0010 	add.w	r0, r7, #16
 800631c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006326:	220a      	movs	r2, #10
 8006328:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800632a:	f7ff fe1b 	bl	8005f64 <_PrintInt>
        break;
 800632e:	e067      	b.n	8006400 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	1d19      	adds	r1, r3, #4
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800633e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006340:	f107 0010 	add.w	r0, r7, #16
 8006344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634e:	220a      	movs	r2, #10
 8006350:	f7ff fd72 	bl	8005e38 <_PrintUnsigned>
        break;
 8006354:	e054      	b.n	8006400 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1d19      	adds	r1, r3, #4
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6011      	str	r1, [r2, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006364:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006366:	f107 0010 	add.w	r0, r7, #16
 800636a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006374:	2210      	movs	r2, #16
 8006376:	f7ff fd5f 	bl	8005e38 <_PrintUnsigned>
        break;
 800637a:	e041      	b.n	8006400 <_VPrintTarget+0x37c>
 800637c:	200143c0 	.word	0x200143c0
      case 's':
        s = va_arg(*pParamList, const char*);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1d19      	adds	r1, r3, #4
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800638e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <_VPrintTarget+0x314>
          s = "(null)";
 8006394:	4b4a      	ldr	r3, [pc, #296]	@ (80064c0 <_VPrintTarget+0x43c>)
 8006396:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80063a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a2:	3301      	adds	r3, #1
 80063a4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80063a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80063ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80063b2:	f107 0310 	add.w	r3, r7, #16
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fcc1 	bl	8005d40 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c2:	d9e9      	bls.n	8006398 <_VPrintTarget+0x314>
        break;
 80063c4:	e01c      	b.n	8006400 <_VPrintTarget+0x37c>
            break;
 80063c6:	bf00      	nop
        break;
 80063c8:	e01a      	b.n	8006400 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1d19      	adds	r1, r3, #4
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6011      	str	r1, [r2, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80063d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063da:	f107 0010 	add.w	r0, r7, #16
 80063de:	2300      	movs	r3, #0
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	2308      	movs	r3, #8
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2308      	movs	r3, #8
 80063e8:	2210      	movs	r2, #16
 80063ea:	f7ff fd25 	bl	8005e38 <_PrintUnsigned>
        break;
 80063ee:	e007      	b.n	8006400 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	2125      	movs	r1, #37	@ 0x25
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fca2 	bl	8005d40 <_StoreChar>
        break;
 80063fc:	e000      	b.n	8006400 <_VPrintTarget+0x37c>
      default:
        break;
 80063fe:	bf00      	nop
      }
      sFormat++;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e007      	b.n	8006418 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006408:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fc94 	bl	8005d40 <_StoreChar>
    }
  } while (*sFormat);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f ae4d 	bne.w	80060bc <_VPrintTarget+0x38>
 8006422:	e000      	b.n	8006426 <_VPrintTarget+0x3a2>
      break;
 8006424:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d041      	beq.n	80064b0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643c:	e00b      	b.n	8006456 <_VPrintTarget+0x3d2>
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	b2da      	uxtb	r2, r3
 8006442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006448:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	09db      	lsrs	r3, r3, #7
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2b7f      	cmp	r3, #127	@ 0x7f
 800645a:	d8f0      	bhi.n	800643e <_VPrintTarget+0x3ba>
 800645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006470:	2300      	movs	r3, #0
 8006472:	633b      	str	r3, [r7, #48]	@ 0x30
 8006474:	e00b      	b.n	800648e <_VPrintTarget+0x40a>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	b2da      	uxtb	r2, r3
 800647a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647c:	1c59      	adds	r1, r3, #1
 800647e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006480:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	09db      	lsrs	r3, r3, #7
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	2b7f      	cmp	r3, #127	@ 0x7f
 8006492:	d8f0      	bhi.n	8006476 <_VPrintTarget+0x3f2>
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	637a      	str	r2, [r7, #52]	@ 0x34
 800649a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	6979      	ldr	r1, [r7, #20]
 80064a8:	221a      	movs	r2, #26
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fad8 	bl	8005a60 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80064b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80064b6:	bf00      	nop
 80064b8:	3758      	adds	r7, #88	@ 0x58
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	080075fc 	.word	0x080075fc

080064c4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064d2:	2300      	movs	r3, #0
 80064d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064d8:	4917      	ldr	r1, [pc, #92]	@ (8006538 <SEGGER_SYSVIEW_Init+0x74>)
 80064da:	4818      	ldr	r0, [pc, #96]	@ (800653c <SEGGER_SYSVIEW_Init+0x78>)
 80064dc:	f7ff f8d2 	bl	8005684 <SEGGER_RTT_AllocUpBuffer>
 80064e0:	4603      	mov	r3, r0
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	4b16      	ldr	r3, [pc, #88]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064e8:	4b15      	ldr	r3, [pc, #84]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ea:	785a      	ldrb	r2, [r3, #1]
 80064ec:	4b14      	ldr	r3, [pc, #80]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f2:	7e1b      	ldrb	r3, [r3, #24]
 80064f4:	4618      	mov	r0, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2308      	movs	r3, #8
 80064fc:	4a11      	ldr	r2, [pc, #68]	@ (8006544 <SEGGER_SYSVIEW_Init+0x80>)
 80064fe:	490f      	ldr	r1, [pc, #60]	@ (800653c <SEGGER_SYSVIEW_Init+0x78>)
 8006500:	f7ff f944 	bl	800578c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006504:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 8006506:	2200      	movs	r2, #0
 8006508:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <SEGGER_SYSVIEW_Init+0x84>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 8006510:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006512:	4a0b      	ldr	r2, [pc, #44]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006518:	4a09      	ldr	r2, [pc, #36]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800651e:	4a08      	ldr	r2, [pc, #32]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006524:	4a06      	ldr	r2, [pc, #24]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800652a:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <SEGGER_SYSVIEW_Init+0x7c>)
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20013388 	.word	0x20013388
 800653c:	08007604 	.word	0x08007604
 8006540:	20014390 	.word	0x20014390
 8006544:	20014388 	.word	0x20014388
 8006548:	e0001004 	.word	0xe0001004

0800654c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006554:	4a04      	ldr	r2, [pc, #16]	@ (8006568 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6113      	str	r3, [r2, #16]
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20014390 	.word	0x20014390

0800656c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006574:	f3ef 8311 	mrs	r3, BASEPRI
 8006578:	f04f 0120 	mov.w	r1, #32
 800657c:	f381 8811 	msr	BASEPRI, r1
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	4808      	ldr	r0, [pc, #32]	@ (80065a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006584:	f7ff f97e 	bl	8005884 <_PreparePacket>
 8006588:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	68b8      	ldr	r0, [r7, #8]
 8006590:	f7ff fa66 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f383 8811 	msr	BASEPRI, r3
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200143c0 	.word	0x200143c0

080065a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065b2:	f3ef 8311 	mrs	r3, BASEPRI
 80065b6:	f04f 0120 	mov.w	r1, #32
 80065ba:	f381 8811 	msr	BASEPRI, r1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	4816      	ldr	r0, [pc, #88]	@ (800661c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065c2:	f7ff f95f 	bl	8005884 <_PreparePacket>
 80065c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e00b      	b.n	80065ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	1c59      	adds	r1, r3, #1
 80065de:	61f9      	str	r1, [r7, #28]
 80065e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	09db      	lsrs	r3, r3, #7
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065f2:	d8f0      	bhi.n	80065d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	6938      	ldr	r0, [r7, #16]
 800660a:	f7ff fa29 	bl	8005a60 <_SendPacket>
  RECORD_END();
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f383 8811 	msr	BASEPRI, r3
}
 8006614:	bf00      	nop
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200143c0 	.word	0x200143c0

08006620 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	@ 0x30
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800662c:	f3ef 8311 	mrs	r3, BASEPRI
 8006630:	f04f 0120 	mov.w	r1, #32
 8006634:	f381 8811 	msr	BASEPRI, r1
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	4825      	ldr	r0, [pc, #148]	@ (80066d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800663c:	f7ff f922 	bl	8005884 <_PreparePacket>
 8006640:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800664e:	e00b      	b.n	8006668 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	b2da      	uxtb	r2, r3
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800665a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	09db      	lsrs	r3, r3, #7
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	2b7f      	cmp	r3, #127	@ 0x7f
 800666c:	d8f0      	bhi.n	8006650 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	6279      	str	r1, [r7, #36]	@ 0x24
 8006692:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	6979      	ldr	r1, [r7, #20]
 80066ba:	69b8      	ldr	r0, [r7, #24]
 80066bc:	f7ff f9d0 	bl	8005a60 <_SendPacket>
  RECORD_END();
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f383 8811 	msr	BASEPRI, r3
}
 80066c6:	bf00      	nop
 80066c8:	3730      	adds	r7, #48	@ 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	200143c0 	.word	0x200143c0

080066d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	@ 0x30
 80066d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066da:	4b59      	ldr	r3, [pc, #356]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066e0:	f3ef 8311 	mrs	r3, BASEPRI
 80066e4:	f04f 0120 	mov.w	r1, #32
 80066e8:	f381 8811 	msr	BASEPRI, r1
 80066ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066ee:	4b54      	ldr	r3, [pc, #336]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	220a      	movs	r2, #10
 80066f4:	4953      	ldr	r1, [pc, #332]	@ (8006844 <SEGGER_SYSVIEW_Start+0x170>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7f9 fd8a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006702:	f7fe fc91 	bl	8005028 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006706:	200a      	movs	r0, #10
 8006708:	f7ff ff30 	bl	800656c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800670c:	f3ef 8311 	mrs	r3, BASEPRI
 8006710:	f04f 0120 	mov.w	r1, #32
 8006714:	f381 8811 	msr	BASEPRI, r1
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	484b      	ldr	r0, [pc, #300]	@ (8006848 <SEGGER_SYSVIEW_Start+0x174>)
 800671c:	f7ff f8b2 	bl	8005884 <_PreparePacket>
 8006720:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672a:	4b45      	ldr	r3, [pc, #276]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_Start+0x76>
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800673c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	2b7f      	cmp	r3, #127	@ 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_Start+0x5e>
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
 8006764:	4b36      	ldr	r3, [pc, #216]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	e00b      	b.n	8006784 <SEGGER_SYSVIEW_Start+0xb0>
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	6279      	str	r1, [r7, #36]	@ 0x24
 8006776:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b7f      	cmp	r3, #127	@ 0x7f
 8006788:	d8f0      	bhi.n	800676c <SEGGER_SYSVIEW_Start+0x98>
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e00b      	b.n	80067be <SEGGER_SYSVIEW_Start+0xea>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	61f9      	str	r1, [r7, #28]
 80067b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c2:	d8f0      	bhi.n	80067a6 <SEGGER_SYSVIEW_Start+0xd2>
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	2300      	movs	r3, #0
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	e00b      	b.n	80067f6 <SEGGER_SYSVIEW_Start+0x122>
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	6179      	str	r1, [r7, #20]
 80067e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	09db      	lsrs	r3, r3, #7
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067fa:	d8f0      	bhi.n	80067de <SEGGER_SYSVIEW_Start+0x10a>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	617a      	str	r2, [r7, #20]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800680c:	2218      	movs	r2, #24
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff f925 	bl	8005a60 <_SendPacket>
      RECORD_END();
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800681c:	4b08      	ldr	r3, [pc, #32]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <SEGGER_SYSVIEW_Start+0x16c>)
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800682a:	f000 f9eb 	bl	8006c04 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800682e:	f000 f9b1 	bl	8006b94 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006832:	f000 fd21 	bl	8007278 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006836:	bf00      	nop
 8006838:	3730      	adds	r7, #48	@ 0x30
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20014390 	.word	0x20014390
 8006844:	08007648 	.word	0x08007648
 8006848:	200143c0 	.word	0x200143c0

0800684c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006852:	f3ef 8311 	mrs	r3, BASEPRI
 8006856:	f04f 0120 	mov.w	r1, #32
 800685a:	f381 8811 	msr	BASEPRI, r1
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	480b      	ldr	r0, [pc, #44]	@ (8006890 <SEGGER_SYSVIEW_Stop+0x44>)
 8006862:	f7ff f80f 	bl	8005884 <_PreparePacket>
 8006866:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006868:	4b0a      	ldr	r3, [pc, #40]	@ (8006894 <SEGGER_SYSVIEW_Stop+0x48>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006870:	220b      	movs	r2, #11
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6838      	ldr	r0, [r7, #0]
 8006876:	f7ff f8f3 	bl	8005a60 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800687a:	4b06      	ldr	r3, [pc, #24]	@ (8006894 <SEGGER_SYSVIEW_Stop+0x48>)
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f383 8811 	msr	BASEPRI, r3
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200143c0 	.word	0x200143c0
 8006894:	20014390 	.word	0x20014390

08006898 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	@ 0x30
 800689c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800689e:	f3ef 8311 	mrs	r3, BASEPRI
 80068a2:	f04f 0120 	mov.w	r1, #32
 80068a6:	f381 8811 	msr	BASEPRI, r1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	4845      	ldr	r0, [pc, #276]	@ (80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068ae:	f7fe ffe9 	bl	8005884 <_PreparePacket>
 80068b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068bc:	4b42      	ldr	r3, [pc, #264]	@ (80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c2:	e00b      	b.n	80068dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	09db      	lsrs	r3, r3, #7
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	2b7f      	cmp	r3, #127	@ 0x7f
 80068e0:	d8f0      	bhi.n	80068c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068f6:	4b34      	ldr	r3, [pc, #208]	@ (80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	6279      	str	r1, [r7, #36]	@ 0x24
 8006908:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	2b7f      	cmp	r3, #127	@ 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	627a      	str	r2, [r7, #36]	@ 0x24
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	4b25      	ldr	r3, [pc, #148]	@ (80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e00b      	b.n	8006950 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	61f9      	str	r1, [r7, #28]
 8006942:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	09db      	lsrs	r3, r3, #7
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b7f      	cmp	r3, #127	@ 0x7f
 8006954:	d8f0      	bhi.n	8006938 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	61fa      	str	r2, [r7, #28]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	e00b      	b.n	8006988 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	6179      	str	r1, [r7, #20]
 800697a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	09db      	lsrs	r3, r3, #7
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b7f      	cmp	r3, #127	@ 0x7f
 800698c:	d8f0      	bhi.n	8006970 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	617a      	str	r2, [r7, #20]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800699e:	2218      	movs	r2, #24
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	68b8      	ldr	r0, [r7, #8]
 80069a4:	f7ff f85c 	bl	8005a60 <_SendPacket>
  RECORD_END();
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069ae:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069b6:	4b04      	ldr	r3, [pc, #16]	@ (80069c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	4798      	blx	r3
  }
}
 80069bc:	bf00      	nop
 80069be:	3730      	adds	r7, #48	@ 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	200143c0 	.word	0x200143c0
 80069c8:	20014390 	.word	0x20014390

080069cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b092      	sub	sp, #72	@ 0x48
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069d4:	f3ef 8311 	mrs	r3, BASEPRI
 80069d8:	f04f 0120 	mov.w	r1, #32
 80069dc:	f381 8811 	msr	BASEPRI, r1
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	486a      	ldr	r0, [pc, #424]	@ (8006b8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069e4:	f7fe ff4e 	bl	8005884 <_PreparePacket>
 80069e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b66      	ldr	r3, [pc, #408]	@ (8006b90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80069fe:	e00b      	b.n	8006a18 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	6479      	str	r1, [r7, #68]	@ 0x44
 8006a0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a14:	09db      	lsrs	r3, r3, #7
 8006a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a1c:	d8f0      	bhi.n	8006a00 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a38:	e00b      	b.n	8006a52 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a56:	d8f0      	bhi.n	8006a3a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a66:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	4619      	mov	r1, r3
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7fe fed7 	bl	8005824 <_EncodeStr>
 8006a76:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a78:	2209      	movs	r2, #9
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6938      	ldr	r0, [r7, #16]
 8006a7e:	f7fe ffef 	bl	8005a60 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b40      	ldr	r3, [pc, #256]	@ (8006b90 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a96:	e00b      	b.n	8006ab0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	6379      	str	r1, [r7, #52]	@ 0x34
 8006aa2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	09db      	lsrs	r3, r3, #7
 8006aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ab4:	d8f0      	bhi.n	8006a98 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	637a      	str	r2, [r7, #52]	@ 0x34
 8006abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad0:	e00b      	b.n	8006aea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006adc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	09db      	lsrs	r3, r3, #7
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aee:	d8f0      	bhi.n	8006ad2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	e00b      	b.n	8006b24 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	09db      	lsrs	r3, r3, #7
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b28:	d8f0      	bhi.n	8006b0c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b30:	6a3a      	ldr	r2, [r7, #32]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	61f9      	str	r1, [r7, #28]
 8006b50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b74:	2215      	movs	r2, #21
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	6938      	ldr	r0, [r7, #16]
 8006b7a:	f7fe ff71 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f383 8811 	msr	BASEPRI, r3
}
 8006b84:	bf00      	nop
 8006b86:	3748      	adds	r7, #72	@ 0x48
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	200143c0 	.word	0x200143c0
 8006b90:	20014390 	.word	0x20014390

08006b94 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b98:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006baa:	4b03      	ldr	r3, [pc, #12]	@ (8006bb8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4798      	blx	r3
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20014390 	.word	0x20014390

08006bbc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc8:	f04f 0120 	mov.w	r1, #32
 8006bcc:	f381 8811 	msr	BASEPRI, r1
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	480b      	ldr	r0, [pc, #44]	@ (8006c00 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bd4:	f7fe fe56 	bl	8005884 <_PreparePacket>
 8006bd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bda:	2280      	movs	r2, #128	@ 0x80
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	6938      	ldr	r0, [r7, #16]
 8006be0:	f7fe fe20 	bl	8005824 <_EncodeStr>
 8006be4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006be6:	220e      	movs	r2, #14
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f7fe ff38 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f383 8811 	msr	BASEPRI, r3
}
 8006bf6:	bf00      	nop
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200143c0 	.word	0x200143c0

08006c04 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c0a:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01a      	beq.n	8006c48 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c12:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d015      	beq.n	8006c48 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c1c:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4798      	blx	r3
 8006c24:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c28:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	000a      	movs	r2, r1
 8006c38:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4621      	mov	r1, r4
 8006c40:	200d      	movs	r0, #13
 8006c42:	f7ff fced 	bl	8006620 <SEGGER_SYSVIEW_RecordU32x2>
 8006c46:	e006      	b.n	8006c56 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	200c      	movs	r0, #12
 8006c50:	f7ff fcaa 	bl	80065a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd90      	pop	{r4, r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20014390 	.word	0x20014390
 8006c64:	e0001004 	.word	0xe0001004

08006c68 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	f04f 0120 	mov.w	r1, #32
 8006c76:	f381 8811 	msr	BASEPRI, r1
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	4819      	ldr	r0, [pc, #100]	@ (8006ce4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c7e:	f7fe fe01 	bl	8005884 <_PreparePacket>
 8006c82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c88:	4b17      	ldr	r3, [pc, #92]	@ (8006ce8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	e00b      	b.n	8006cb4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	6179      	str	r1, [r7, #20]
 8006ca6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	09db      	lsrs	r3, r3, #7
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb8:	d8f0      	bhi.n	8006c9c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	617a      	str	r2, [r7, #20]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006cca:	2202      	movs	r2, #2
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	68b8      	ldr	r0, [r7, #8]
 8006cd0:	f7fe fec6 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f383 8811 	msr	BASEPRI, r3
}
 8006cda:	bf00      	nop
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200143c0 	.word	0x200143c0
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf6:	f04f 0120 	mov.w	r1, #32
 8006cfa:	f381 8811 	msr	BASEPRI, r1
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	4807      	ldr	r0, [pc, #28]	@ (8006d20 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d02:	f7fe fdbf 	bl	8005884 <_PreparePacket>
 8006d06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d08:	2203      	movs	r2, #3
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6838      	ldr	r0, [r7, #0]
 8006d0e:	f7fe fea7 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f383 8811 	msr	BASEPRI, r3
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	200143c0 	.word	0x200143c0

08006d24 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2e:	f04f 0120 	mov.w	r1, #32
 8006d32:	f381 8811 	msr	BASEPRI, r1
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	4807      	ldr	r0, [pc, #28]	@ (8006d58 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d3a:	f7fe fda3 	bl	8005884 <_PreparePacket>
 8006d3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d40:	2212      	movs	r2, #18
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6838      	ldr	r0, [r7, #0]
 8006d46:	f7fe fe8b 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f383 8811 	msr	BASEPRI, r3
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200143c0 	.word	0x200143c0

08006d5c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d64:	f3ef 8311 	mrs	r3, BASEPRI
 8006d68:	f04f 0120 	mov.w	r1, #32
 8006d6c:	f381 8811 	msr	BASEPRI, r1
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	4817      	ldr	r0, [pc, #92]	@ (8006dd0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006d74:	f7fe fd86 	bl	8005884 <_PreparePacket>
 8006d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e00b      	b.n	8006da0 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	61f9      	str	r1, [r7, #28]
 8006d92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	09db      	lsrs	r3, r3, #7
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da4:	d8f0      	bhi.n	8006d88 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	61fa      	str	r2, [r7, #28]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006db6:	221c      	movs	r2, #28
 8006db8:	68f9      	ldr	r1, [r7, #12]
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f7fe fe50 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f383 8811 	msr	BASEPRI, r3
}
 8006dc6:	bf00      	nop
 8006dc8:	3720      	adds	r7, #32
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200143c0 	.word	0x200143c0

08006dd4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	@ 0x28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dde:	f3ef 8311 	mrs	r3, BASEPRI
 8006de2:	f04f 0120 	mov.w	r1, #32
 8006de6:	f381 8811 	msr	BASEPRI, r1
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	4824      	ldr	r0, [pc, #144]	@ (8006e80 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006dee:	f7fe fd49 	bl	8005884 <_PreparePacket>
 8006df2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e00b      	b.n	8006e52 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	61f9      	str	r1, [r7, #28]
 8006e44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	09db      	lsrs	r3, r3, #7
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e56:	d8f0      	bhi.n	8006e3a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006e68:	221c      	movs	r2, #28
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6938      	ldr	r0, [r7, #16]
 8006e6e:	f7fe fdf7 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f383 8811 	msr	BASEPRI, r3
}
 8006e78:	bf00      	nop
 8006e7a:	3728      	adds	r7, #40	@ 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	200143c0 	.word	0x200143c0

08006e84 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8e:	f04f 0120 	mov.w	r1, #32
 8006e92:	f381 8811 	msr	BASEPRI, r1
 8006e96:	607b      	str	r3, [r7, #4]
 8006e98:	4807      	ldr	r0, [pc, #28]	@ (8006eb8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e9a:	f7fe fcf3 	bl	8005884 <_PreparePacket>
 8006e9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ea0:	2211      	movs	r2, #17
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6838      	ldr	r0, [r7, #0]
 8006ea6:	f7fe fddb 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f383 8811 	msr	BASEPRI, r3
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200143c0 	.word	0x200143c0

08006ebc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec8:	f04f 0120 	mov.w	r1, #32
 8006ecc:	f381 8811 	msr	BASEPRI, r1
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	4819      	ldr	r0, [pc, #100]	@ (8006f38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ed4:	f7fe fcd6 	bl	8005884 <_PreparePacket>
 8006ed8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ede:	4b17      	ldr	r3, [pc, #92]	@ (8006f3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	e00b      	b.n	8006f0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	1c59      	adds	r1, r3, #1
 8006efa:	61f9      	str	r1, [r7, #28]
 8006efc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	09db      	lsrs	r3, r3, #7
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f0e:	d8f0      	bhi.n	8006ef2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	61fa      	str	r2, [r7, #28]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f20:	2208      	movs	r2, #8
 8006f22:	68f9      	ldr	r1, [r7, #12]
 8006f24:	6938      	ldr	r0, [r7, #16]
 8006f26:	f7fe fd9b 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f383 8811 	msr	BASEPRI, r3
}
 8006f30:	bf00      	nop
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	200143c0 	.word	0x200143c0
 8006f3c:	20014390 	.word	0x20014390

08006f40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f48:	f3ef 8311 	mrs	r3, BASEPRI
 8006f4c:	f04f 0120 	mov.w	r1, #32
 8006f50:	f381 8811 	msr	BASEPRI, r1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4819      	ldr	r0, [pc, #100]	@ (8006fbc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f58:	f7fe fc94 	bl	8005884 <_PreparePacket>
 8006f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f62:	4b17      	ldr	r3, [pc, #92]	@ (8006fc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	61f9      	str	r1, [r7, #28]
 8006f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	6938      	ldr	r0, [r7, #16]
 8006faa:	f7fe fd59 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f383 8811 	msr	BASEPRI, r3
}
 8006fb4:	bf00      	nop
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200143c0 	.word	0x200143c0
 8006fc0:	20014390 	.word	0x20014390

08006fc4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd0:	f04f 0120 	mov.w	r1, #32
 8006fd4:	f381 8811 	msr	BASEPRI, r1
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	4819      	ldr	r0, [pc, #100]	@ (8007040 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fdc:	f7fe fc52 	bl	8005884 <_PreparePacket>
 8006fe0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fe6:	4b17      	ldr	r3, [pc, #92]	@ (8007044 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e00b      	b.n	8007012 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	1c59      	adds	r1, r3, #1
 8007002:	61f9      	str	r1, [r7, #28]
 8007004:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	09db      	lsrs	r3, r3, #7
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b7f      	cmp	r3, #127	@ 0x7f
 8007016:	d8f0      	bhi.n	8006ffa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	61fa      	str	r2, [r7, #28]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007028:	2206      	movs	r2, #6
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	6938      	ldr	r0, [r7, #16]
 800702e:	f7fe fd17 	bl	8005a60 <_SendPacket>
  RECORD_END();
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f383 8811 	msr	BASEPRI, r3
}
 8007038:	bf00      	nop
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	200143c0 	.word	0x200143c0
 8007044:	20014390 	.word	0x20014390

08007048 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	@ 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007052:	f3ef 8311 	mrs	r3, BASEPRI
 8007056:	f04f 0120 	mov.w	r1, #32
 800705a:	f381 8811 	msr	BASEPRI, r1
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	4827      	ldr	r0, [pc, #156]	@ (8007100 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007062:	f7fe fc0f 	bl	8005884 <_PreparePacket>
 8007066:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800706c:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	e00b      	b.n	8007098 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	6279      	str	r1, [r7, #36]	@ 0x24
 800708a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	09db      	lsrs	r3, r3, #7
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	2b7f      	cmp	r3, #127	@ 0x7f
 800709c:	d8f0      	bhi.n	8007080 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	61f9      	str	r1, [r7, #28]
 80070c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	61fa      	str	r2, [r7, #28]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070e6:	2207      	movs	r2, #7
 80070e8:	68f9      	ldr	r1, [r7, #12]
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f7fe fcb8 	bl	8005a60 <_SendPacket>
  RECORD_END();
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f383 8811 	msr	BASEPRI, r3
}
 80070f6:	bf00      	nop
 80070f8:	3728      	adds	r7, #40	@ 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200143c0 	.word	0x200143c0
 8007104:	20014390 	.word	0x20014390

08007108 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007110:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	1ad3      	subs	r3, r2, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	20014390 	.word	0x20014390

08007128 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b08c      	sub	sp, #48	@ 0x30
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007132:	4b40      	ldr	r3, [pc, #256]	@ (8007234 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d077      	beq.n	800722a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800713a:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007140:	2300      	movs	r3, #0
 8007142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007144:	e008      	b.n	8007158 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	3301      	adds	r3, #1
 8007156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800715c:	429a      	cmp	r2, r3
 800715e:	d3f2      	bcc.n	8007146 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007160:	e000      	b.n	8007164 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007162:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d055      	beq.n	8007216 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800716a:	f3ef 8311 	mrs	r3, BASEPRI
 800716e:	f04f 0120 	mov.w	r1, #32
 8007172:	f381 8811 	msr	BASEPRI, r1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	482f      	ldr	r0, [pc, #188]	@ (8007238 <SEGGER_SYSVIEW_SendModule+0x110>)
 800717a:	f7fe fb83 	bl	8005884 <_PreparePacket>
 800717e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	623b      	str	r3, [r7, #32]
 800718c:	e00b      	b.n	80071a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	1c59      	adds	r1, r3, #1
 8007196:	6279      	str	r1, [r7, #36]	@ 0x24
 8007198:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	09db      	lsrs	r3, r3, #7
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071aa:	d8f0      	bhi.n	800718e <SEGGER_SYSVIEW_SendModule+0x66>
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e00b      	b.n	80071e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1c59      	adds	r1, r3, #1
 80071d0:	61f9      	str	r1, [r7, #28]
 80071d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	09db      	lsrs	r3, r3, #7
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071e4:	d8f0      	bhi.n	80071c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2280      	movs	r2, #128	@ 0x80
 80071fc:	4619      	mov	r1, r3
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7fe fb10 	bl	8005824 <_EncodeStr>
 8007204:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007206:	2216      	movs	r2, #22
 8007208:	68f9      	ldr	r1, [r7, #12]
 800720a:	6938      	ldr	r0, [r7, #16]
 800720c:	f7fe fc28 	bl	8005a60 <_SendPacket>
      RECORD_END();
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <SEGGER_SYSVIEW_SendModule+0x102>
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4798      	blx	r3
    }
  }
}
 800722a:	bf00      	nop
 800722c:	3730      	adds	r7, #48	@ 0x30
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	200143b8 	.word	0x200143b8
 8007238:	200143c0 	.word	0x200143c0

0800723c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00f      	beq.n	800726a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800724a:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f2      	bne.n	8007250 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	200143b8 	.word	0x200143b8

08007278 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800727e:	f3ef 8311 	mrs	r3, BASEPRI
 8007282:	f04f 0120 	mov.w	r1, #32
 8007286:	f381 8811 	msr	BASEPRI, r1
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	4817      	ldr	r0, [pc, #92]	@ (80072ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800728e:	f7fe faf9 	bl	8005884 <_PreparePacket>
 8007292:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e00b      	b.n	80072bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1c59      	adds	r1, r3, #1
 80072ac:	6179      	str	r1, [r7, #20]
 80072ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	09db      	lsrs	r3, r3, #7
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b7f      	cmp	r3, #127	@ 0x7f
 80072c0:	d8f0      	bhi.n	80072a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	617a      	str	r2, [r7, #20]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072d2:	221b      	movs	r2, #27
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f7fe fbc2 	bl	8005a60 <_SendPacket>
  RECORD_END();
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f383 8811 	msr	BASEPRI, r3
}
 80072e2:	bf00      	nop
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200143c0 	.word	0x200143c0
 80072f0:	200143bc 	.word	0x200143bc

080072f4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072f4:	b40f      	push	{r0, r1, r2, r3}
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007302:	1d3b      	adds	r3, r7, #4
 8007304:	461a      	mov	r2, r3
 8007306:	2100      	movs	r1, #0
 8007308:	6938      	ldr	r0, [r7, #16]
 800730a:	f7fe febb 	bl	8006084 <_VPrintTarget>
  va_end(ParamList);
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007318:	b004      	add	sp, #16
 800731a:	4770      	bx	lr

0800731c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	@ 0x28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007324:	f3ef 8311 	mrs	r3, BASEPRI
 8007328:	f04f 0120 	mov.w	r1, #32
 800732c:	f381 8811 	msr	BASEPRI, r1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	4827      	ldr	r0, [pc, #156]	@ (80073d0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007334:	f7fe faa6 	bl	8005884 <_PreparePacket>
 8007338:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800733a:	2280      	movs	r2, #128	@ 0x80
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	6938      	ldr	r0, [r7, #16]
 8007340:	f7fe fa70 	bl	8005824 <_EncodeStr>
 8007344:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
 800734a:	2301      	movs	r3, #1
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	e00b      	b.n	8007368 <SEGGER_SYSVIEW_Warn+0x4c>
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	6279      	str	r1, [r7, #36]	@ 0x24
 800735a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	09db      	lsrs	r3, r3, #7
 8007366:	623b      	str	r3, [r7, #32]
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2b7f      	cmp	r3, #127	@ 0x7f
 800736c:	d8f0      	bhi.n	8007350 <SEGGER_SYSVIEW_Warn+0x34>
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	627a      	str	r2, [r7, #36]	@ 0x24
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e00b      	b.n	80073a0 <SEGGER_SYSVIEW_Warn+0x84>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	61f9      	str	r1, [r7, #28]
 8007392:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	09db      	lsrs	r3, r3, #7
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073a4:	d8f0      	bhi.n	8007388 <SEGGER_SYSVIEW_Warn+0x6c>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	61fa      	str	r2, [r7, #28]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80073b6:	221a      	movs	r2, #26
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f7fe fb50 	bl	8005a60 <_SendPacket>
  RECORD_END();
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f383 8811 	msr	BASEPRI, r3
}
 80073c6:	bf00      	nop
 80073c8:	3728      	adds	r7, #40	@ 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200143c0 	.word	0x200143c0

080073d4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80073d8:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073da:	7e1b      	ldrb	r3, [r3, #24]
 80073dc:	4619      	mov	r1, r3
 80073de:	4a13      	ldr	r2, [pc, #76]	@ (800742c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073e0:	460b      	mov	r3, r1
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	440b      	add	r3, r1
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	336c      	adds	r3, #108	@ 0x6c
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073f0:	7e1b      	ldrb	r3, [r3, #24]
 80073f2:	4618      	mov	r0, r3
 80073f4:	490d      	ldr	r1, [pc, #52]	@ (800742c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073f6:	4603      	mov	r3, r0
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4403      	add	r3, r0
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	440b      	add	r3, r1
 8007400:	3370      	adds	r3, #112	@ 0x70
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d00b      	beq.n	8007420 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007408:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800740a:	789b      	ldrb	r3, [r3, #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d107      	bne.n	8007420 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007412:	2201      	movs	r2, #1
 8007414:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007416:	f7fe fa41 	bl	800589c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800741a:	4b03      	ldr	r3, [pc, #12]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800741c:	2200      	movs	r2, #0
 800741e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007420:	4b01      	ldr	r3, [pc, #4]	@ (8007428 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007422:	781b      	ldrb	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20014390 	.word	0x20014390
 800742c:	20012ed0 	.word	0x20012ed0

08007430 <memcmp>:
 8007430:	b510      	push	{r4, lr}
 8007432:	3901      	subs	r1, #1
 8007434:	4402      	add	r2, r0
 8007436:	4290      	cmp	r0, r2
 8007438:	d101      	bne.n	800743e <memcmp+0xe>
 800743a:	2000      	movs	r0, #0
 800743c:	e005      	b.n	800744a <memcmp+0x1a>
 800743e:	7803      	ldrb	r3, [r0, #0]
 8007440:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007444:	42a3      	cmp	r3, r4
 8007446:	d001      	beq.n	800744c <memcmp+0x1c>
 8007448:	1b18      	subs	r0, r3, r4
 800744a:	bd10      	pop	{r4, pc}
 800744c:	3001      	adds	r0, #1
 800744e:	e7f2      	b.n	8007436 <memcmp+0x6>

08007450 <memset>:
 8007450:	4402      	add	r2, r0
 8007452:	4603      	mov	r3, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <__libc_init_array>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4d0d      	ldr	r5, [pc, #52]	@ (8007498 <__libc_init_array+0x38>)
 8007464:	4c0d      	ldr	r4, [pc, #52]	@ (800749c <__libc_init_array+0x3c>)
 8007466:	1b64      	subs	r4, r4, r5
 8007468:	10a4      	asrs	r4, r4, #2
 800746a:	2600      	movs	r6, #0
 800746c:	42a6      	cmp	r6, r4
 800746e:	d109      	bne.n	8007484 <__libc_init_array+0x24>
 8007470:	4d0b      	ldr	r5, [pc, #44]	@ (80074a0 <__libc_init_array+0x40>)
 8007472:	4c0c      	ldr	r4, [pc, #48]	@ (80074a4 <__libc_init_array+0x44>)
 8007474:	f000 f826 	bl	80074c4 <_init>
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	2600      	movs	r6, #0
 800747e:	42a6      	cmp	r6, r4
 8007480:	d105      	bne.n	800748e <__libc_init_array+0x2e>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	f855 3b04 	ldr.w	r3, [r5], #4
 8007488:	4798      	blx	r3
 800748a:	3601      	adds	r6, #1
 800748c:	e7ee      	b.n	800746c <__libc_init_array+0xc>
 800748e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007492:	4798      	blx	r3
 8007494:	3601      	adds	r6, #1
 8007496:	e7f2      	b.n	800747e <__libc_init_array+0x1e>
 8007498:	0800766c 	.word	0x0800766c
 800749c:	0800766c 	.word	0x0800766c
 80074a0:	0800766c 	.word	0x0800766c
 80074a4:	08007670 	.word	0x08007670

080074a8 <memcpy>:
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b0:	d100      	bne.n	80074b4 <memcpy+0xc>
 80074b2:	4770      	bx	lr
 80074b4:	b510      	push	{r4, lr}
 80074b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074be:	4291      	cmp	r1, r2
 80074c0:	d1f9      	bne.n	80074b6 <memcpy+0xe>
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
