
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007ca8  08007ca8  00008ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e5c  08007e5c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e5c  08007e5c  00008e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e64  08007e64  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e64  08007e64  00008e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e68  08007e68  00008e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007e6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  2000006c  08007ed8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08007ed8  00009644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f9  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330d  00000000  00000000  0001ea95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00021da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe2  00000000  00000000  00023250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025de9  00000000  00000000  00024232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018733  00000000  00000000  0004a01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eee81  00000000  00000000  0006274e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001515cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b00  00000000  00000000  00151614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00157114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c90 	.word	0x08007c90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007c90 	.word	0x08007c90

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f24 	.word	0x20012f24
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fa9d 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f857 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8c1 	bl	80007d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000652:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <main+0x9c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <main+0x9c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800065e:	4820      	ldr	r0, [pc, #128]	@ (80006e0 <main+0xa0>)
 8000660:	f004 fbea 	bl	8004e38 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 8000664:	f004 fa12 	bl	8004a8c <SEGGER_SYSVIEW_Conf>
//  SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1 ashok", 2, &task1_handle);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <main+0xa4>)
 8000674:	22c8      	movs	r2, #200	@ 0xc8
 8000676:	491c      	ldr	r1, [pc, #112]	@ (80006e8 <main+0xa8>)
 8000678:	481c      	ldr	r0, [pc, #112]	@ (80006ec <main+0xac>)
 800067a:	f002 f9d2 	bl	8002a22 <xTaskCreate>
 800067e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d00b      	beq.n	800069e <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2 xshok", 2, &task2_handle);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	2302      	movs	r3, #2
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <main+0xb0>)
 80006a8:	22c8      	movs	r2, #200	@ 0xc8
 80006aa:	4912      	ldr	r1, [pc, #72]	@ (80006f4 <main+0xb4>)
 80006ac:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <main+0xb8>)
 80006ae:	f002 f9b8 	bl	8002a22 <xTaskCreate>
 80006b2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d00b      	beq.n	80006d2 <main+0x92>
    __asm volatile
 80006ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006be:	f383 8811 	msr	BASEPRI, r3
 80006c2:	f3bf 8f6f 	isb	sy
 80006c6:	f3bf 8f4f 	dsb	sy
 80006ca:	60fb      	str	r3, [r7, #12]
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	e7fd      	b.n	80006ce <main+0x8e>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80006d2:	f002 fb4d 	bl	8002d70 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d6:	bf00      	nop
 80006d8:	e7fd      	b.n	80006d6 <main+0x96>
 80006da:	bf00      	nop
 80006dc:	e0001000 	.word	0xe0001000
 80006e0:	0007a120 	.word	0x0007a120
 80006e4:	08007ca8 	.word	0x08007ca8
 80006e8:	08007cc8 	.word	0x08007cc8
 80006ec:	080008d1 	.word	0x080008d1
 80006f0:	08007cd0 	.word	0x08007cd0
 80006f4:	08007cf0 	.word	0x08007cf0
 80006f8:	0800090d 	.word	0x0800090d

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	@ 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fe38 	bl	8007380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a28      	ldr	r2, [pc, #160]	@ (80007cc <SystemClock_Config+0xd0>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <SystemClock_Config+0xd4>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <SystemClock_Config+0xd4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	@ 0xa8
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f837 	bl	80017f8 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 f8ec 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2105      	movs	r1, #5
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fcb8 	bl	8001128 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 f8d5 	bl	800096c <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a34      	ldr	r2, [pc, #208]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b32      	ldr	r3, [pc, #200]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a2d      	ldr	r2, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a26      	ldr	r2, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a1f      	ldr	r2, [pc, #124]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	481a      	ldr	r0, [pc, #104]	@ (80008c8 <MX_GPIO_Init+0xf4>)
 8000860:	f000 fc48 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <MX_GPIO_Init+0xf8>)
 800087c:	f000 faa6 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <MX_GPIO_Init+0xf4>)
 800089c:	f000 fa96 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0xf4>)
 80008b8:	f000 fa88 	bl	8000dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09c      	sub	sp, #112	@ 0x70
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  while(1){
	  char msg[100];
//    printf("%s\n",(char*)parameters);
	  snprintf(msg,100,"%s\n", (char *)parameters);
 80008d8:	f107 000c 	add.w	r0, r7, #12
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <task1_handler+0x34>)
 80008e0:	2164      	movs	r1, #100	@ 0x64
 80008e2:	f006 fd09 	bl	80072f8 <sniprintf>
	  SEGGER_SYSVIEW_PrintfTarget(msg);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4618      	mov	r0, r3
 80008ec:	f006 fc66 	bl	80071bc <SEGGER_SYSVIEW_PrintfTarget>
	  taskYIELD();
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <task1_handler+0x38>)
 80008f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	f3bf 8f6f 	isb	sy
  while(1){
 8000900:	bf00      	nop
 8000902:	e7e9      	b.n	80008d8 <task1_handler+0x8>
 8000904:	08007cf8 	.word	0x08007cf8
 8000908:	e000ed04 	.word	0xe000ed04

0800090c <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	@ 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  while(1){
	  char msg[100];
//    printf("%s\n",(char*)parameters);
	  snprintf(msg,100,"%s\n", (char *)parameters);
 8000914:	f107 000c 	add.w	r0, r7, #12
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <task2_handler+0x34>)
 800091c:	2164      	movs	r1, #100	@ 0x64
 800091e:	f006 fceb 	bl	80072f8 <sniprintf>
	  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fc48 	bl	80071bc <SEGGER_SYSVIEW_PrintfTarget>
	  taskYIELD();
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <task2_handler+0x38>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
  while(1){
 800093c:	bf00      	nop
 800093e:	e7e9      	b.n	8000914 <task2_handler+0x8>
 8000940:	08007cf8 	.word	0x08007cf8
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f935 	bl	8000bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40001000 	.word	0x40001000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80009b6:	f003 fc2d 	bl	8004214 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <HAL_InitTick+0xe4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a32      	ldr	r2, [pc, #200]	@ (8000aac <HAL_InitTick+0xe4>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e8:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <HAL_InitTick+0xe4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fc98 	bl	8001334 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f000 fc7d 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8000a12:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a16:	f000 fc79 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a22:	4a23      	ldr	r2, [pc, #140]	@ (8000ab0 <HAL_InitTick+0xe8>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	0c9b      	lsrs	r3, r3, #18
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a30:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <HAL_InitTick+0xf0>)
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a54:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a56:	f001 f96d 	bl	8001d34 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d11b      	bne.n	8000aa0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a68:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <HAL_InitTick+0xec>)
 8000a6a:	f001 f9bd 	bl	8001de8 <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d111      	bne.n	8000aa0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a7c:	2036      	movs	r0, #54	@ 0x36
 8000a7e:	f000 f997 	bl	8000db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d808      	bhi.n	8000a9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2036      	movs	r0, #54	@ 0x36
 8000a8e:	f000 f973 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_InitTick+0xf4>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e002      	b.n	8000aa0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3738      	adds	r7, #56	@ 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	20000088 	.word	0x20000088
 8000ab8:	40001000 	.word	0x40001000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <TIM6_DAC_IRQHandler+0x10>)
 8000afe:	f001 f9e3 	bl	8001ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000088 	.word	0x20000088

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f006 fc17 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fd6d 	bl	8000640 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b74:	08007e6c 	.word	0x08007e6c
  ldr r2, =_sbss
 8000b78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b7c:	20014644 	.word	0x20014644

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f8d8 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff ff08 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fede 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200000d0 	.word	0x200000d0

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000d0 	.word	0x200000d0

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff4c 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8a:	f7ff ff61 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f7ff ffb1 	bl	8000cfc <NVIC_EncodePriority>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff80 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff54 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e165      	b.n	80010b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8154 	bne.w	80010ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d017      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0203 	and.w	r2, r3, #3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80ae 	beq.w	80010ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b5d      	ldr	r3, [pc, #372]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a5c      	ldr	r2, [pc, #368]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f62:	4b5a      	ldr	r3, [pc, #360]	@ (80010cc <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6e:	4a58      	ldr	r2, [pc, #352]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	@ (80010d4 <HAL_GPIO_Init+0x308>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d025      	beq.n	8000fe6 <HAL_GPIO_Init+0x21a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80010d8 <HAL_GPIO_Init+0x30c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d01f      	beq.n	8000fe2 <HAL_GPIO_Init+0x216>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80010dc <HAL_GPIO_Init+0x310>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x212>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	@ (80010e0 <HAL_GPIO_Init+0x314>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x20e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80010e4 <HAL_GPIO_Init+0x318>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x20a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	@ (80010e8 <HAL_GPIO_Init+0x31c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x206>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a49      	ldr	r2, [pc, #292]	@ (80010ec <HAL_GPIO_Init+0x320>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x202>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x21c>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	@ (80010d0 <HAL_GPIO_Init+0x304>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b3a      	ldr	r3, [pc, #232]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102a:	4a31      	ldr	r2, [pc, #196]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001054:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105a:	4b25      	ldr	r3, [pc, #148]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a8:	4a11      	ldr	r2, [pc, #68]	@ (80010f0 <HAL_GPIO_Init+0x324>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f67f ae96 	bls.w	8000de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001110:	e003      	b.n	800111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0cc      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800113c:	4b68      	ldr	r3, [pc, #416]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d90c      	bls.n	8001164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114a:	4b65      	ldr	r3, [pc, #404]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001152:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0b8      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d020      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800117c:	4b59      	ldr	r3, [pc, #356]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a58      	ldr	r2, [pc, #352]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001186:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001194:	4b53      	ldr	r3, [pc, #332]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a52      	ldr	r2, [pc, #328]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800119e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a0:	4b50      	ldr	r3, [pc, #320]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	494d      	ldr	r1, [pc, #308]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d044      	beq.n	8001248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d119      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e07f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d003      	beq.n	80011e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d107      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e6:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	4b3b      	ldr	r3, [pc, #236]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e067      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f023 0203 	bic.w	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4934      	ldr	r1, [pc, #208]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001218:	f7ff fcea 	bl	8000bf0 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	e00a      	b.n	8001236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001220:	f7ff fce6 	bl	8000bf0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e04f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 020c 	and.w	r2, r3, #12
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	429a      	cmp	r2, r3
 8001246:	d1eb      	bne.n	8001220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d20c      	bcs.n	8001270 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d001      	beq.n	8001270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e032      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4916      	ldr	r1, [pc, #88]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	490e      	ldr	r1, [pc, #56]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ae:	f000 f873 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	490a      	ldr	r1, [pc, #40]	@ (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	fa22 f303 	lsr.w	r3, r2, r3
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb7a 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00
 80012e4:	40023800 	.word	0x40023800
 80012e8:	08007dd4 	.word	0x08007dd4
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_RCC_GetHCLKFreq+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000

0800130c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001310:	f7ff fff0 	bl	80012f4 <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	0a9b      	lsrs	r3, r3, #10
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	@ (8001330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	08007de4 	.word	0x08007de4

08001334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	220f      	movs	r2, #15
 8001342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_RCC_GetClockConfig+0x60>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b0ae      	sub	sp, #184	@ 0xb8
 800139e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013be:	4bcb      	ldr	r3, [pc, #812]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	f200 8206 	bhi.w	80017d8 <HAL_RCC_GetSysClockFreq+0x440>
 80013cc:	a201      	add	r2, pc, #4	@ (adr r2, 80013d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	08001409 	.word	0x08001409
 80013d8:	080017d9 	.word	0x080017d9
 80013dc:	080017d9 	.word	0x080017d9
 80013e0:	080017d9 	.word	0x080017d9
 80013e4:	08001411 	.word	0x08001411
 80013e8:	080017d9 	.word	0x080017d9
 80013ec:	080017d9 	.word	0x080017d9
 80013f0:	080017d9 	.word	0x080017d9
 80013f4:	08001419 	.word	0x08001419
 80013f8:	080017d9 	.word	0x080017d9
 80013fc:	080017d9 	.word	0x080017d9
 8001400:	080017d9 	.word	0x080017d9
 8001404:	08001609 	.word	0x08001609
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001408:	4bb9      	ldr	r3, [pc, #740]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800140e:	e1e7      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4bb8      	ldr	r3, [pc, #736]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e3      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4bb4      	ldr	r3, [pc, #720]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	4bb1      	ldr	r3, [pc, #708]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d071      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4bae      	ldr	r3, [pc, #696]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	2200      	movs	r2, #0
 8001438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800143c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001456:	4622      	mov	r2, r4
 8001458:	462b      	mov	r3, r5
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	0159      	lsls	r1, r3, #5
 8001464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001468:	0150      	lsls	r0, r2, #5
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4621      	mov	r1, r4
 8001470:	1a51      	subs	r1, r2, r1
 8001472:	6439      	str	r1, [r7, #64]	@ 0x40
 8001474:	4629      	mov	r1, r5
 8001476:	eb63 0301 	sbc.w	r3, r3, r1
 800147a:	647b      	str	r3, [r7, #68]	@ 0x44
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001488:	4649      	mov	r1, r9
 800148a:	018b      	lsls	r3, r1, #6
 800148c:	4641      	mov	r1, r8
 800148e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001492:	4641      	mov	r1, r8
 8001494:	018a      	lsls	r2, r1, #6
 8001496:	4641      	mov	r1, r8
 8001498:	1a51      	subs	r1, r2, r1
 800149a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800149c:	4649      	mov	r1, r9
 800149e:	eb63 0301 	sbc.w	r3, r3, r1
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b0:	4649      	mov	r1, r9
 80014b2:	00cb      	lsls	r3, r1, #3
 80014b4:	4641      	mov	r1, r8
 80014b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ba:	4641      	mov	r1, r8
 80014bc:	00ca      	lsls	r2, r1, #3
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	4622      	mov	r2, r4
 80014c6:	189b      	adds	r3, r3, r2
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80014ca:	462b      	mov	r3, r5
 80014cc:	460a      	mov	r2, r1
 80014ce:	eb42 0303 	adc.w	r3, r2, r3
 80014d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e0:	4629      	mov	r1, r5
 80014e2:	024b      	lsls	r3, r1, #9
 80014e4:	4621      	mov	r1, r4
 80014e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ea:	4621      	mov	r1, r4
 80014ec:	024a      	lsls	r2, r1, #9
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001504:	f7fe ff24 	bl	8000350 <__aeabi_uldivmod>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4613      	mov	r3, r2
 800150e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001512:	e067      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	2200      	movs	r2, #0
 800151c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001520:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001524:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800152e:	2300      	movs	r3, #0
 8001530:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001532:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001536:	4622      	mov	r2, r4
 8001538:	462b      	mov	r3, r5
 800153a:	f04f 0000 	mov.w	r0, #0
 800153e:	f04f 0100 	mov.w	r1, #0
 8001542:	0159      	lsls	r1, r3, #5
 8001544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001548:	0150      	lsls	r0, r2, #5
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4621      	mov	r1, r4
 8001550:	1a51      	subs	r1, r2, r1
 8001552:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001554:	4629      	mov	r1, r5
 8001556:	eb63 0301 	sbc.w	r3, r3, r1
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001568:	4649      	mov	r1, r9
 800156a:	018b      	lsls	r3, r1, #6
 800156c:	4641      	mov	r1, r8
 800156e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001572:	4641      	mov	r1, r8
 8001574:	018a      	lsls	r2, r1, #6
 8001576:	4641      	mov	r1, r8
 8001578:	ebb2 0a01 	subs.w	sl, r2, r1
 800157c:	4649      	mov	r1, r9
 800157e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800158e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001596:	4692      	mov	sl, r2
 8001598:	469b      	mov	fp, r3
 800159a:	4623      	mov	r3, r4
 800159c:	eb1a 0303 	adds.w	r3, sl, r3
 80015a0:	623b      	str	r3, [r7, #32]
 80015a2:	462b      	mov	r3, r5
 80015a4:	eb4b 0303 	adc.w	r3, fp, r3
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015b6:	4629      	mov	r1, r5
 80015b8:	028b      	lsls	r3, r1, #10
 80015ba:	4621      	mov	r1, r4
 80015bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c0:	4621      	mov	r1, r4
 80015c2:	028a      	lsls	r2, r1, #10
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015cc:	2200      	movs	r2, #0
 80015ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80015d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015d6:	f7fe febb 	bl	8000350 <__aeabi_uldivmod>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4613      	mov	r3, r2
 80015e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015e4:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	3301      	adds	r3, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001606:	e0eb      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001614:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d06b      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	2200      	movs	r2, #0
 8001628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800162a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800162c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800162e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001632:	663b      	str	r3, [r7, #96]	@ 0x60
 8001634:	2300      	movs	r3, #0
 8001636:	667b      	str	r3, [r7, #100]	@ 0x64
 8001638:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800163c:	4622      	mov	r2, r4
 800163e:	462b      	mov	r3, r5
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	0159      	lsls	r1, r3, #5
 800164a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800164e:	0150      	lsls	r0, r2, #5
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4621      	mov	r1, r4
 8001656:	1a51      	subs	r1, r2, r1
 8001658:	61b9      	str	r1, [r7, #24]
 800165a:	4629      	mov	r1, r5
 800165c:	eb63 0301 	sbc.w	r3, r3, r1
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800166e:	4659      	mov	r1, fp
 8001670:	018b      	lsls	r3, r1, #6
 8001672:	4651      	mov	r1, sl
 8001674:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001678:	4651      	mov	r1, sl
 800167a:	018a      	lsls	r2, r1, #6
 800167c:	4651      	mov	r1, sl
 800167e:	ebb2 0801 	subs.w	r8, r2, r1
 8001682:	4659      	mov	r1, fp
 8001684:	eb63 0901 	sbc.w	r9, r3, r1
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169c:	4690      	mov	r8, r2
 800169e:	4699      	mov	r9, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	eb18 0303 	adds.w	r3, r8, r3
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	462b      	mov	r3, r5
 80016aa:	eb49 0303 	adc.w	r3, r9, r3
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016bc:	4629      	mov	r1, r5
 80016be:	024b      	lsls	r3, r1, #9
 80016c0:	4621      	mov	r1, r4
 80016c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c6:	4621      	mov	r1, r4
 80016c8:	024a      	lsls	r2, r1, #9
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d2:	2200      	movs	r2, #0
 80016d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016dc:	f7fe fe38 	bl	8000350 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4613      	mov	r3, r2
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016ea:	e065      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x420>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f8:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	2200      	movs	r2, #0
 8001700:	4618      	mov	r0, r3
 8001702:	4611      	mov	r1, r2
 8001704:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001708:	653b      	str	r3, [r7, #80]	@ 0x50
 800170a:	2300      	movs	r3, #0
 800170c:	657b      	str	r3, [r7, #84]	@ 0x54
 800170e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001712:	4642      	mov	r2, r8
 8001714:	464b      	mov	r3, r9
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4641      	mov	r1, r8
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001744:	4659      	mov	r1, fp
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4651      	mov	r1, sl
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4651      	mov	r1, sl
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4651      	mov	r1, sl
 8001754:	1a54      	subs	r4, r2, r1
 8001756:	4659      	mov	r1, fp
 8001758:	eb63 0501 	sbc.w	r5, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	00eb      	lsls	r3, r5, #3
 8001766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800176a:	00e2      	lsls	r2, r4, #3
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	4643      	mov	r3, r8
 8001772:	18e3      	adds	r3, r4, r3
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	464b      	mov	r3, r9
 8001778:	eb45 0303 	adc.w	r3, r5, r3
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178a:	4629      	mov	r1, r5
 800178c:	028b      	lsls	r3, r1, #10
 800178e:	4621      	mov	r1, r4
 8001790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001794:	4621      	mov	r1, r4
 8001796:	028a      	lsls	r2, r1, #10
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a0:	2200      	movs	r2, #0
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017aa:	f7fe fdd1 	bl	8000350 <__aeabi_uldivmod>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4613      	mov	r3, r2
 80017b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0f1b      	lsrs	r3, r3, #28
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d6:	e003      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	37b8      	adds	r7, #184	@ 0xb8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	00f42400 	.word	0x00f42400

080017f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e28d      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8083 	beq.w	800191e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001818:	4b94      	ldr	r3, [pc, #592]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d019      	beq.n	8001858 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001824:	4b91      	ldr	r3, [pc, #580]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
        || \
 800182c:	2b08      	cmp	r3, #8
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001830:	4b8e      	ldr	r3, [pc, #568]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b84      	ldr	r3, [pc, #528]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0x124>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d157      	bne.n	800191c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e25a      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x90>
 800187a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xcc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xb4>
 8001892:	4b76      	ldr	r3, [pc, #472]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a72      	ldr	r2, [pc, #456]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xcc>
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6b      	ldr	r2, [pc, #428]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f990 	bl	8000bf0 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff f98c 	bl	8000bf0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	@ 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e21f      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xdc>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f97c 	bl	8000bf0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f978 	bl	8000bf0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e20b      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x104>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06f      	beq.n	8001a0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800192a:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d017      	beq.n	8001966 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001936:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
        || \
 800193e:	2b08      	cmp	r3, #8
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x186>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1d3      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f925 	bl	8000bf0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff f921 	bl	8000bf0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1b4      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4925      	ldr	r1, [pc, #148]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f904 	bl	8000bf0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff f900 	bl	8000bf0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e193      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f8e4 	bl	8000bf0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8e0 	bl	8000bf0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e173      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x234>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff f8cd 	bl	8000bf0 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	e00e      	b.n	8001a78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f8c9 	bl	8000bf0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d907      	bls.n	8001a78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e15c      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470000 	.word	0x42470000
 8001a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b8a      	ldr	r3, [pc, #552]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8097 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b83      	ldr	r3, [pc, #524]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b79      	ldr	r3, [pc, #484]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f889 	bl	8000bf0 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f885 	bl	8000bf0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e118      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x31e>
 8001b08:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x358>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x340>
 8001b1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	4a60      	ldr	r2, [pc, #384]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x358>
 8001b38:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	4a59      	ldr	r2, [pc, #356]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b44:	4b57      	ldr	r3, [pc, #348]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b48:	4a56      	ldr	r2, [pc, #344]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f84a 	bl	8000bf0 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f846 	bl	8000bf0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0d7      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x368>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f834 	bl	8000bf0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f830 	bl	8000bf0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0c1      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b40      	ldr	r3, [pc, #256]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ad 	beq.w	8001d24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d060      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d145      	bne.n	8001c6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f804 	bl	8000bf0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f800 	bl	8000bf0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e093      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	071b      	lsls	r3, r3, #28
 8001c36:	491b      	ldr	r1, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffd5 	bl	8000bf0 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ffd1 	bl	8000bf0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e064      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x452>
 8001c68:	e05c      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ffbe 	bl	8000bf0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe ffba 	bl	8000bf0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04d      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x480>
 8001c96:	e045      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e040      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <HAL_RCC_OscConfig+0x538>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d030      	beq.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d129      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d122      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d119      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10f      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e041      	b.n	8001dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f839 	bl	8001dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 f9c0 	bl	80020f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d001      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e04e      	b.n	8001e9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_TIM_Base_Start_IT+0xc4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2a:	d01d      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40010400 	.word	0x40010400
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40001800 	.word	0x40001800

08001ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d020      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0202 	mvn.w	r2, #2
 8001efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8d2 	bl	80020bc <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8c4 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8d5 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d020      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0204 	mvn.w	r2, #4
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8ac 	bl	80020bc <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f89e 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f8af 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0208 	mvn.w	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f886 	bl	80020bc <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f878 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f889 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d020      	beq.n	8002010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0210 	mvn.w	r2, #16
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f860 	bl	80020bc <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f852 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f863 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fc8a 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f906 	bl	8002264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f834 	bl	80020e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0220 	mvn.w	r2, #32
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8d8 	bl	8002250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a46      	ldr	r2, [pc, #280]	@ (8002224 <TIM_Base_SetConfig+0x12c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002116:	d00f      	beq.n	8002138 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a43      	ldr	r2, [pc, #268]	@ (8002228 <TIM_Base_SetConfig+0x130>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00b      	beq.n	8002138 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a42      	ldr	r2, [pc, #264]	@ (800222c <TIM_Base_SetConfig+0x134>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a41      	ldr	r2, [pc, #260]	@ (8002230 <TIM_Base_SetConfig+0x138>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a40      	ldr	r2, [pc, #256]	@ (8002234 <TIM_Base_SetConfig+0x13c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d108      	bne.n	800214a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800213e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a35      	ldr	r2, [pc, #212]	@ (8002224 <TIM_Base_SetConfig+0x12c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d02b      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002158:	d027      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a32      	ldr	r2, [pc, #200]	@ (8002228 <TIM_Base_SetConfig+0x130>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d023      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a31      	ldr	r2, [pc, #196]	@ (800222c <TIM_Base_SetConfig+0x134>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a30      	ldr	r2, [pc, #192]	@ (8002230 <TIM_Base_SetConfig+0x138>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01b      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <TIM_Base_SetConfig+0x13c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d017      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2e      	ldr	r2, [pc, #184]	@ (8002238 <TIM_Base_SetConfig+0x140>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <TIM_Base_SetConfig+0x144>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00f      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2c      	ldr	r2, [pc, #176]	@ (8002240 <TIM_Base_SetConfig+0x148>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00b      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <TIM_Base_SetConfig+0x14c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <TIM_Base_SetConfig+0x150>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d003      	beq.n	80021aa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a29      	ldr	r2, [pc, #164]	@ (800224c <TIM_Base_SetConfig+0x154>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d108      	bne.n	80021bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <TIM_Base_SetConfig+0x12c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0xf8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <TIM_Base_SetConfig+0x13c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d103      	bne.n	80021f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f023 0201 	bic.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
  }
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40000c00 	.word	0x40000c00
 8002234:	40010400 	.word	0x40010400
 8002238:	40014000 	.word	0x40014000
 800223c:	40014400 	.word	0x40014400
 8002240:	40014800 	.word	0x40014800
 8002244:	40001800 	.word	0x40001800
 8002248:	40001c00 	.word	0x40001c00
 800224c:	40002000 	.word	0x40002000

08002250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f103 0208 	add.w	r2, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f103 0208 	add.w	r2, r3, #8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f103 0208 	add.w	r2, r3, #8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022ac:	f240 1019 	movw	r0, #281	@ 0x119
 80022b0:	f004 fcb8 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022ca:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022ce:	f004 fca9 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d103      	bne.n	80022fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e00c      	b.n	8002314 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3308      	adds	r3, #8
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e002      	b.n	8002308 <vListInsert+0x2e>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d2f6      	bcs.n	8002302 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002340:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002344:	f004 fc6e 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f240 101d 	movw	r0, #285	@ 0x11d
 800239e:	f004 fc7d 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <xQueueGenericReset+0x30>
    __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	60fb      	str	r3, [r7, #12]
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d052      	beq.n	800248a <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04e      	beq.n	800248a <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	2100      	movs	r1, #0
 80023f6:	fba3 2302 	umull	r2, r3, r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d000      	beq.n	8002400 <xQueueGenericReset+0x52>
 80023fe:	2101      	movs	r1, #1
 8002400:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d141      	bne.n	800248a <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002406:	f001 ff85 	bl	8004314 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	6939      	ldr	r1, [r7, #16]
 8002414:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	441a      	add	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2200      	movs	r2, #0
 8002424:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002436:	3b01      	subs	r3, #1
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	22ff      	movs	r2, #255	@ 0xff
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	22ff      	movs	r2, #255	@ 0xff
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00f      	beq.n	8002484 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3310      	adds	r3, #16
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fff1 	bl	8003450 <xTaskRemoveFromEventList>
 800246e:	e009      	b.n	8002484 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	3310      	adds	r3, #16
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff feff 	bl	8002278 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3324      	adds	r3, #36	@ 0x24
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fefa 	bl	8002278 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002484:	f001 ff78 	bl	8004378 <vPortExitCritical>
 8002488:	e001      	b.n	800248e <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <xQueueGenericReset+0xfe>
    __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	60bb      	str	r3, [r7, #8]
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4619      	mov	r1, r3
 80024b0:	2096      	movs	r0, #150	@ 0x96
 80024b2:	f004 fbf3 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80024b6:	697b      	ldr	r3, [r7, #20]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02e      	beq.n	8002536 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024d8:	2100      	movs	r1, #0
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	fba3 2302 	umull	r2, r3, r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d000      	beq.n	80024e8 <xQueueGenericCreate+0x28>
 80024e6:	2101      	movs	r1, #1
 80024e8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d123      	bne.n	8002536 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024f6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80024fa:	d81c      	bhi.n	8002536 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	3350      	adds	r3, #80	@ 0x50
 800250a:	4618      	mov	r0, r3
 800250c:	f002 f830 	bl	8004570 <pvPortMalloc>
 8002510:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01d      	beq.n	8002554 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3350      	adds	r3, #80	@ 0x50
 8002520:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f81e 	bl	8002570 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002534:	e00e      	b.n	8002554 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <xQueueGenericCreate+0x94>
    __asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	613b      	str	r3, [r7, #16]
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4618      	mov	r0, r3
 8002558:	f004 fd3a 	bl	8006fd0 <SEGGER_SYSVIEW_ShrinkId>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	2098      	movs	r0, #152	@ 0x98
 8002562:	f004 fb9b 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002566:	69fb      	ldr	r3, [r7, #28]
    }
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e002      	b.n	8002592 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800259e:	2101      	movs	r1, #1
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	f7ff ff04 	bl	80023ae <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	@ 0x30
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <xQueueReceive+0x32>
    __asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	623b      	str	r3, [r7, #32]
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d103      	bne.n	80025f8 <xQueueReceive+0x40>
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <xQueueReceive+0x44>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <xQueueReceive+0x46>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <xQueueReceive+0x62>
    __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	61fb      	str	r3, [r7, #28]
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261a:	f001 f935 	bl	8003888 <xTaskGetSchedulerState>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <xQueueReceive+0x72>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <xQueueReceive+0x76>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <xQueueReceive+0x78>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <xQueueReceive+0x94>
    __asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61bb      	str	r3, [r7, #24]
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800264c:	f001 fe62 	bl	8004314 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d018      	beq.n	800268e <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002660:	f000 f88e 	bl	8002780 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	3310      	adds	r3, #16
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fee9 	bl	8003450 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800267e:	f001 fe7b 	bl	8004378 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002682:	2101      	movs	r1, #1
 8002684:	20a4      	movs	r0, #164	@ 0xa4
 8002686:	f004 fb09 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800268a:	2301      	movs	r3, #1
 800268c:	e071      	b.n	8002772 <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002694:	f001 fe70 	bl	8004378 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002698:	2100      	movs	r1, #0
 800269a:	20a4      	movs	r0, #164	@ 0xa4
 800269c:	f004 fafe 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e066      	b.n	8002772 <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 ffae 	bl	8003610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026b8:	f001 fe5e 	bl	8004378 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026bc:	f000 fbb2 	bl	8002e24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c0:	f001 fe28 	bl	8004314 <vPortEnterCritical>
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d103      	bne.n	80026da <xQueueReceive+0x122>
 80026d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d103      	bne.n	80026f0 <xQueueReceive+0x138>
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026f0:	f001 fe42 	bl	8004378 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026f4:	1d3a      	adds	r2, r7, #4
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 ff9f 	bl	8003640 <xTaskCheckForTimeOut>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800270a:	f000 f8b1 	bl	8002870 <prvIsQueueEmpty>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d017      	beq.n	8002744 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	3324      	adds	r3, #36	@ 0x24
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fe25 	bl	800336c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002724:	f000 f852 	bl	80027cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002728:	f000 fb8a 	bl	8002e40 <xTaskResumeAll>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d18c      	bne.n	800264c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <xQueueReceive+0x1c4>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	e783      	b.n	800264c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002746:	f000 f841 	bl	80027cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800274a:	f000 fb79 	bl	8002e40 <xTaskResumeAll>
 800274e:	e77d      	b.n	800264c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002752:	f000 f83b 	bl	80027cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002756:	f000 fb73 	bl	8002e40 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800275a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800275c:	f000 f888 	bl	8002870 <prvIsQueueEmpty>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f43f af72 	beq.w	800264c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002768:	2100      	movs	r1, #0
 800276a:	20a4      	movs	r0, #164	@ 0xa4
 800276c:	f004 fa96 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002770:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3730      	adds	r7, #48	@ 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d018      	beq.n	80027c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d303      	bcc.n	80027b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	461a      	mov	r2, r3
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f004 fe0c 	bl	80073dc <memcpy>
    }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027d4:	f001 fd9e 	bl	8004314 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027e0:	e011      	b.n	8002806 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d012      	beq.n	8002810 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3324      	adds	r3, #36	@ 0x24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe2e 	bl	8003450 <xTaskRemoveFromEventList>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027fa:	f000 ff8d 	bl	8003718 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	dce9      	bgt.n	80027e2 <prvUnlockQueue+0x16>
 800280e:	e000      	b.n	8002812 <prvUnlockQueue+0x46>
                    break;
 8002810:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	22ff      	movs	r2, #255	@ 0xff
 8002816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800281a:	f001 fdad 	bl	8004378 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800281e:	f001 fd79 	bl	8004314 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002828:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800282a:	e011      	b.n	8002850 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3310      	adds	r3, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fe09 	bl	8003450 <xTaskRemoveFromEventList>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002844:	f000 ff68 	bl	8003718 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	3b01      	subs	r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dce9      	bgt.n	800282c <prvUnlockQueue+0x60>
 8002858:	e000      	b.n	800285c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800285a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	22ff      	movs	r2, #255	@ 0xff
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002864:	f001 fd88 	bl	8004378 <vPortExitCritical>
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002878:	f001 fd4c 	bl	8004314 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e001      	b.n	800288e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800288e:	f001 fd73 	bl	8004378 <vPortExitCritical>

    return xReturn;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60fb      	str	r3, [r7, #12]
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d024      	beq.n	8002918 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e01e      	b.n	8002912 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <vQueueAddToRegistry+0x9c>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d105      	bne.n	80028f0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <vQueueAddToRegistry+0x9c>)
 80028ea:	4413      	add	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
                    break;
 80028ee:	e013      	b.n	8002918 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <vQueueAddToRegistry+0x70>
 80028f6:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <vQueueAddToRegistry+0x9c>)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d104      	bne.n	800290c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <vQueueAddToRegistry+0x9c>)
 8002908:	4413      	add	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b07      	cmp	r3, #7
 8002916:	d9dd      	bls.n	80028d4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800292a:	20b6      	movs	r0, #182	@ 0xb6
 800292c:	f004 f97a 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200000d4 	.word	0x200000d4

0800293c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800294c:	f001 fce2 	bl	8004314 <vPortEnterCritical>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <vQueueWaitForMessageRestricted+0x2a>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d103      	bne.n	800297c <vQueueWaitForMessageRestricted+0x40>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800297c:	f001 fcfc 	bl	8004378 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3324      	adds	r3, #36	@ 0x24
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fd13 	bl	80033bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff18 	bl	80027cc <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 800299c:	20b9      	movs	r0, #185	@ 0xb9
 800299e:	f004 f941 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08a      	sub	sp, #40	@ 0x28
 80029ae:	af04      	add	r7, sp, #16
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fdd7 	bl	8004570 <pvPortMalloc>
 80029c2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80029ca:	2058      	movs	r0, #88	@ 0x58
 80029cc:	f001 fdd0 	bl	8004570 <pvPortMalloc>
 80029d0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029d8:	2258      	movs	r2, #88	@ 0x58
 80029da:	2100      	movs	r1, #0
 80029dc:	6978      	ldr	r0, [r7, #20]
 80029de:	f004 fccf 	bl	8007380 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e8:	e005      	b.n	80029f6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029ea:	6938      	ldr	r0, [r7, #16]
 80029ec:	f001 fef2 	bl	80047d4 <vPortFree>
 80029f0:	e001      	b.n	80029f6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029fc:	2300      	movs	r3, #0
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f82d 	bl	8002a72 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a18:	697b      	ldr	r3, [r7, #20]
    }
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff ffb3 	bl	80029aa <prvCreateTask>
 8002a44:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a4c:	6938      	ldr	r0, [r7, #16]
 8002a4e:	f000 f8a1 	bl	8002b94 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e002      	b.n	8002a5e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4619      	mov	r1, r3
 8002a62:	20c2      	movs	r0, #194	@ 0xc2
 8002a64:	f004 f91a 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002a68:	697b      	ldr	r3, [r7, #20]
    }
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	21a5      	movs	r1, #165	@ 0xa5
 8002a8c:	f004 fc78 	bl	8007380 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f023 0307 	bic.w	r3, r3, #7
 8002aa8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	617b      	str	r3, [r7, #20]
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01e      	beq.n	8002b10 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e012      	b.n	8002afe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	7819      	ldrb	r1, [r3, #0]
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3334      	adds	r3, #52	@ 0x34
 8002ae8:	460a      	mov	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d9e9      	bls.n	8002ad8 <prvInitialiseNewTask+0x66>
 8002b04:	e000      	b.n	8002b08 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d90b      	bls.n	8002b2e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	613b      	str	r3, [r7, #16]
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	e7fd      	b.n	8002b2a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d901      	bls.n	8002b38 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b34:	2304      	movs	r3, #4
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b42:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	3304      	adds	r3, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fbb7 	bl	80022bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	3318      	adds	r3, #24
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fbb2 	bl	80022bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	f1c3 0205 	rsb	r2, r3, #5
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	69b8      	ldr	r0, [r7, #24]
 8002b74:	f001 f9d0 	bl	8003f18 <pxPortInitialiseStack>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b88:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b8a:	bf00      	nop
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002b9c:	f001 fbba 	bl	8004314 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002ba0:	4b48      	ldr	r3, [pc, #288]	@ (8002cc4 <prvAddNewTaskToReadyList+0x130>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <prvAddNewTaskToReadyList+0x130>)
 8002ba8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <prvAddNewTaskToReadyList+0x134>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002bb2:	4a45      	ldr	r2, [pc, #276]	@ (8002cc8 <prvAddNewTaskToReadyList+0x134>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bb8:	4b42      	ldr	r3, [pc, #264]	@ (8002cc4 <prvAddNewTaskToReadyList+0x130>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d110      	bne.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002bc0:	f000 fdc8 	bl	8003754 <prvInitialiseTaskLists>
 8002bc4:	e00d      	b.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <prvAddNewTaskToReadyList+0x138>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bce:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <prvAddNewTaskToReadyList+0x134>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d802      	bhi.n	8002be2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc8 <prvAddNewTaskToReadyList+0x134>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <prvAddNewTaskToReadyList+0x13c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	4a39      	ldr	r2, [pc, #228]	@ (8002cd0 <prvAddNewTaskToReadyList+0x13c>)
 8002bea:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <prvAddNewTaskToReadyList+0x13c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <prvAddNewTaskToReadyList+0x94>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 f8c1 	bl	8006d84 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	461d      	mov	r5, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461c      	mov	r4, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	1ae3      	subs	r3, r4, r3
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	462b      	mov	r3, r5
 8002c24:	f001 ffd4 	bl	8004bd0 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f92e 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <prvAddNewTaskToReadyList+0x140>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	4a25      	ldr	r2, [pc, #148]	@ (8002cd4 <prvAddNewTaskToReadyList+0x140>)
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c46:	4924      	ldr	r1, [pc, #144]	@ (8002cd8 <prvAddNewTaskToReadyList+0x144>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3304      	adds	r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	3204      	adds	r2, #4
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1d1a      	adds	r2, r3, #4
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <prvAddNewTaskToReadyList+0x144>)
 8002c86:	441a      	add	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	615a      	str	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c90:	4911      	ldr	r1, [pc, #68]	@ (8002cd8 <prvAddNewTaskToReadyList+0x144>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <prvAddNewTaskToReadyList+0x144>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4403      	add	r3, r0
 8002cb0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002cb2:	f001 fb61 	bl	8004378 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <prvAddNewTaskToReadyList+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200001ec 	.word	0x200001ec
 8002cc8:	20000114 	.word	0x20000114
 8002ccc:	200001f8 	.word	0x200001f8
 8002cd0:	20000208 	.word	0x20000208
 8002cd4:	200001f4 	.word	0x200001f4
 8002cd8:	20000118 	.word	0x20000118

08002cdc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	@ 0x28
 8002ce0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e011      	b.n	8002d14 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <prvCreateIdleTasks+0x88>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7819      	ldrb	r1, [r3, #0]
 8002cf8:	1d3a      	adds	r2, r7, #4
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	460a      	mov	r2, r1
 8002d00:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	ddea      	ble.n	8002cf0 <prvCreateIdleTasks+0x14>
 8002d1a:	e000      	b.n	8002d1e <prvCreateIdleTasks+0x42>
        {
            break;
 8002d1c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e015      	b.n	8002d50 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002d24:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <prvCreateIdleTasks+0x8c>)
 8002d26:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <prvCreateIdleTasks+0x90>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	1d39      	adds	r1, r7, #4
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2282      	movs	r2, #130	@ 0x82
 8002d3c:	6938      	ldr	r0, [r7, #16]
 8002d3e:	f7ff fe70 	bl	8002a22 <xTaskCreate>
 8002d42:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	dde6      	ble.n	8002d24 <prvCreateIdleTasks+0x48>
 8002d56:	e000      	b.n	8002d5a <prvCreateIdleTasks+0x7e>
        {
            break;
 8002d58:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	08007cfc 	.word	0x08007cfc
 8002d68:	08003731 	.word	0x08003731
 8002d6c:	20000210 	.word	0x20000210

08002d70 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002d76:	f7ff ffb1 	bl	8002cdc <prvCreateIdleTasks>
 8002d7a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002d82:	f000 fe31 	bl	80039e8 <xTimerCreateTimerTask>
 8002d86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d124      	bne.n	8002dd8 <vTaskStartScheduler+0x68>
    __asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	60bb      	str	r3, [r7, #8]
}
 8002da0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <vTaskStartScheduler+0x9c>)
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <vTaskStartScheduler+0xa0>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db0:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <vTaskStartScheduler+0xa4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002db6:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <vTaskStartScheduler+0xa8>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <vTaskStartScheduler+0xac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d102      	bne.n	8002dc8 <vTaskStartScheduler+0x58>
 8002dc2:	f003 ffc3 	bl	8006d4c <SEGGER_SYSVIEW_OnIdle>
 8002dc6:	e004      	b.n	8002dd2 <vTaskStartScheduler+0x62>
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <vTaskStartScheduler+0xac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 f81b 	bl	8006e08 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002dd2:	f001 f92f 	bl	8004034 <xPortStartScheduler>
 8002dd6:	e00f      	b.n	8002df8 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d10b      	bne.n	8002df8 <vTaskStartScheduler+0x88>
    __asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	607b      	str	r3, [r7, #4]
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <vTaskStartScheduler+0xb0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002dfc:	20cd      	movs	r0, #205	@ 0xcd
 8002dfe:	f003 ff11 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000020c 	.word	0x2000020c
 8002e10:	200001f8 	.word	0x200001f8
 8002e14:	200001f0 	.word	0x200001f0
 8002e18:	20000210 	.word	0x20000210
 8002e1c:	20000114 	.word	0x20000114
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <vTaskSuspendAll+0x18>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	4a03      	ldr	r2, [pc, #12]	@ (8002e3c <vTaskSuspendAll+0x18>)
 8002e30:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002e32:	20cf      	movs	r0, #207	@ 0xcf
 8002e34:	f003 fef6 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000214 	.word	0x20000214

08002e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002e4e:	f001 fa61 	bl	8004314 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002e56:	4b73      	ldr	r3, [pc, #460]	@ (8003024 <xTaskResumeAll+0x1e4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <xTaskResumeAll+0x36>
    __asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	603b      	str	r3, [r7, #0]
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002e76:	4b6b      	ldr	r3, [pc, #428]	@ (8003024 <xTaskResumeAll+0x1e4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	4a69      	ldr	r2, [pc, #420]	@ (8003024 <xTaskResumeAll+0x1e4>)
 8002e7e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e80:	4b68      	ldr	r3, [pc, #416]	@ (8003024 <xTaskResumeAll+0x1e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80c0 	bne.w	800300a <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e8a:	4b67      	ldr	r3, [pc, #412]	@ (8003028 <xTaskResumeAll+0x1e8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80bb 	beq.w	800300a <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e94:	e092      	b.n	8002fbc <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e96:	4b65      	ldr	r3, [pc, #404]	@ (800302c <xTaskResumeAll+0x1ec>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	6a12      	ldr	r2, [r2, #32]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	69d2      	ldr	r2, [r2, #28]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d103      	bne.n	8002ecc <xTaskResumeAll+0x8c>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	68d2      	ldr	r2, [r2, #12]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	6892      	ldr	r2, [r2, #8]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d103      	bne.n	8002f0a <xTaskResumeAll+0xca>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 ffb5 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <xTaskResumeAll+0x1f0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	4a3f      	ldr	r2, [pc, #252]	@ (8003030 <xTaskResumeAll+0x1f0>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	493e      	ldr	r1, [pc, #248]	@ (8003034 <xTaskResumeAll+0x1f4>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3304      	adds	r3, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	3204      	adds	r2, #4
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <xTaskResumeAll+0x1f4>)
 8002f78:	441a      	add	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f82:	492c      	ldr	r1, [pc, #176]	@ (8003034 <xTaskResumeAll+0x1f4>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f94:	1c59      	adds	r1, r3, #1
 8002f96:	4827      	ldr	r0, [pc, #156]	@ (8003034 <xTaskResumeAll+0x1f4>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa8:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <xTaskResumeAll+0x1f8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d904      	bls.n	8002fbc <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002fb2:	4a22      	ldr	r2, [pc, #136]	@ (800303c <xTaskResumeAll+0x1fc>)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <xTaskResumeAll+0x1ec>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f af68 	bne.w	8002e96 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002fcc:	f000 fc40 	bl	8003850 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <xTaskResumeAll+0x200>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002fdc:	f000 f85a 	bl	8003094 <xTaskIncrementTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <xTaskResumeAll+0x1fc>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2101      	movs	r1, #1
 8002fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ef      	bne.n	8002fdc <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <xTaskResumeAll+0x200>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003002:	4a0e      	ldr	r2, [pc, #56]	@ (800303c <xTaskResumeAll+0x1fc>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800300a:	f001 f9b5 	bl	8004378 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4619      	mov	r1, r3
 8003012:	20d0      	movs	r0, #208	@ 0xd0
 8003014:	f003 fe42 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003018:	697b      	ldr	r3, [r7, #20]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000214 	.word	0x20000214
 8003028:	200001ec 	.word	0x200001ec
 800302c:	200001ac 	.word	0x200001ac
 8003030:	200001f4 	.word	0x200001f4
 8003034:	20000118 	.word	0x20000118
 8003038:	20000114 	.word	0x20000114
 800303c:	20000200 	.word	0x20000200
 8003040:	200001fc 	.word	0x200001fc

08003044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <xTaskGetTickCount+0x20>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	20d1      	movs	r0, #209	@ 0xd1
 8003054:	f003 fe22 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200001f0 	.word	0x200001f0

08003068 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800306e:	f001 fa3d 	bl	80044ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <xTaskGetTickCountFromISR+0x28>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	20d2      	movs	r0, #210	@ 0xd2
 8003080:	f003 fe0c 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003084:	683b      	ldr	r3, [r7, #0]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200001f0 	.word	0x200001f0

08003094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	@ 0x28
 8003098:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800309e:	4b74      	ldr	r3, [pc, #464]	@ (8003270 <xTaskIncrementTick+0x1dc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 80d4 	bne.w	8003250 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030a8:	4b72      	ldr	r3, [pc, #456]	@ (8003274 <xTaskIncrementTick+0x1e0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030b0:	4a70      	ldr	r2, [pc, #448]	@ (8003274 <xTaskIncrementTick+0x1e0>)
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d121      	bne.n	8003100 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80030bc:	4b6e      	ldr	r3, [pc, #440]	@ (8003278 <xTaskIncrementTick+0x1e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <xTaskIncrementTick+0x4a>
    __asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	607b      	str	r3, [r7, #4]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <xTaskIncrementTick+0x46>
 80030de:	4b66      	ldr	r3, [pc, #408]	@ (8003278 <xTaskIncrementTick+0x1e4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	4b65      	ldr	r3, [pc, #404]	@ (800327c <xTaskIncrementTick+0x1e8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a63      	ldr	r2, [pc, #396]	@ (8003278 <xTaskIncrementTick+0x1e4>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <xTaskIncrementTick+0x1e8>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b63      	ldr	r3, [pc, #396]	@ (8003280 <xTaskIncrementTick+0x1ec>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <xTaskIncrementTick+0x1ec>)
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	f000 fba8 	bl	8003850 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003100:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <xTaskIncrementTick+0x1f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	429a      	cmp	r2, r3
 8003108:	f0c0 80a7 	bcc.w	800325a <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800310c:	4b5a      	ldr	r3, [pc, #360]	@ (8003278 <xTaskIncrementTick+0x1e4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003116:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <xTaskIncrementTick+0x1f0>)
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	601a      	str	r2, [r3, #0]
                    break;
 800311e:	e09c      	b.n	800325a <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003120:	4b55      	ldr	r3, [pc, #340]	@ (8003278 <xTaskIncrementTick+0x1e4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	d203      	bcs.n	8003140 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003138:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <xTaskIncrementTick+0x1f0>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6013      	str	r3, [r2, #0]
                        break;
 800313e:	e08c      	b.n	800325a <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3304      	adds	r3, #4
 8003162:	429a      	cmp	r2, r3
 8003164:	d103      	bne.n	800316e <xTaskIncrementTick+0xda>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2200      	movs	r2, #0
 8003172:	615a      	str	r2, [r3, #20]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01e      	beq.n	80031c4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	6a12      	ldr	r2, [r2, #32]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	69d2      	ldr	r2, [r2, #28]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	3318      	adds	r3, #24
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d103      	bne.n	80031b4 <xTaskIncrementTick+0x120>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2200      	movs	r2, #0
 80031b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fe60 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <xTaskIncrementTick+0x1f4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	4a2b      	ldr	r2, [pc, #172]	@ (8003288 <xTaskIncrementTick+0x1f4>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e2:	492a      	ldr	r1, [pc, #168]	@ (800328c <xTaskIncrementTick+0x1f8>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	3204      	adds	r2, #4
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <xTaskIncrementTick+0x1f8>)
 8003222:	441a      	add	r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	4917      	ldr	r1, [pc, #92]	@ (800328c <xTaskIncrementTick+0x1f8>)
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	4812      	ldr	r0, [pc, #72]	@ (800328c <xTaskIncrementTick+0x1f8>)
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4403      	add	r3, r0
 800324c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324e:	e75d      	b.n	800310c <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <xTaskIncrementTick+0x1fc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a0e      	ldr	r2, [pc, #56]	@ (8003290 <xTaskIncrementTick+0x1fc>)
 8003258:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	4619      	mov	r1, r3
 800325e:	20db      	movs	r0, #219	@ 0xdb
 8003260:	f003 fd1c 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003266:	4618      	mov	r0, r3
 8003268:	3728      	adds	r7, #40	@ 0x28
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000214 	.word	0x20000214
 8003274:	200001f0 	.word	0x200001f0
 8003278:	200001a4 	.word	0x200001a4
 800327c:	200001a8 	.word	0x200001a8
 8003280:	20000204 	.word	0x20000204
 8003284:	2000020c 	.word	0x2000020c
 8003288:	200001f4 	.word	0x200001f4
 800328c:	20000118 	.word	0x20000118
 8003290:	200001fc 	.word	0x200001fc

08003294 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800329a:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <vTaskSwitchContext+0xc0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80032a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <vTaskSwitchContext+0xc4>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80032a8:	e04f      	b.n	800334a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80032aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003358 <vTaskSwitchContext+0xc4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80032b0:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <vTaskSwitchContext+0xc8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	f1c3 031f 	rsb	r3, r3, #31
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	4926      	ldr	r1, [pc, #152]	@ (8003360 <vTaskSwitchContext+0xcc>)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <vTaskSwitchContext+0x5e>
    __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	607b      	str	r3, [r7, #4]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <vTaskSwitchContext+0x5a>
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <vTaskSwitchContext+0xcc>)
 80032fe:	4413      	add	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3308      	adds	r3, #8
 8003314:	429a      	cmp	r2, r3
 8003316:	d103      	bne.n	8003320 <vTaskSwitchContext+0x8c>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4a0f      	ldr	r2, [pc, #60]	@ (8003364 <vTaskSwitchContext+0xd0>)
 8003328:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <vTaskSwitchContext+0xd4>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <vTaskSwitchContext+0xd0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d102      	bne.n	800333c <vTaskSwitchContext+0xa8>
 8003336:	f003 fd09 	bl	8006d4c <SEGGER_SYSVIEW_OnIdle>
 800333a:	e004      	b.n	8003346 <vTaskSwitchContext+0xb2>
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <vTaskSwitchContext+0xd0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fd61 	bl	8006e08 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <vTaskSwitchContext+0xd0>)
 8003348:	681b      	ldr	r3, [r3, #0]
    }
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000214 	.word	0x20000214
 8003358:	20000200 	.word	0x20000200
 800335c:	200001f4 	.word	0x200001f4
 8003360:	20000118 	.word	0x20000118
 8003364:	20000114 	.word	0x20000114
 8003368:	20000210 	.word	0x20000210

0800336c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	60fb      	str	r3, [r7, #12]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <vTaskPlaceOnEventList+0x4c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3318      	adds	r3, #24
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe ff9c 	bl	80022da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033a2:	2101      	movs	r1, #1
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f000 fa91 	bl	80038cc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80033aa:	20e1      	movs	r0, #225	@ 0xe1
 80033ac:	f003 fc3a 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000114 	.word	0x20000114

080033bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	613b      	str	r3, [r7, #16]
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	e7fd      	b.n	80033e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <vTaskPlaceOnEventListRestricted+0x90>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	61da      	str	r2, [r3, #28]
 80033f4:	4b15      	ldr	r3, [pc, #84]	@ (800344c <vTaskPlaceOnEventListRestricted+0x90>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	621a      	str	r2, [r3, #32]
 80033fe:	4b13      	ldr	r3, [pc, #76]	@ (800344c <vTaskPlaceOnEventListRestricted+0x90>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	3218      	adds	r2, #24
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <vTaskPlaceOnEventListRestricted+0x90>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f103 0218 	add.w	r2, r3, #24
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <vTaskPlaceOnEventListRestricted+0x90>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68b8      	ldr	r0, [r7, #8]
 8003438:	f000 fa48 	bl	80038cc <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 800343c:	20e3      	movs	r0, #227	@ 0xe3
 800343e:	f003 fbf1 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000114 	.word	0x20000114

08003450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60fb      	str	r3, [r7, #12]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	6a12      	ldr	r2, [r2, #32]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	69d2      	ldr	r2, [r2, #28]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	3318      	adds	r3, #24
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d103      	bne.n	80034ac <xTaskRemoveFromEventList+0x5c>
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80034bc:	4b4e      	ldr	r3, [pc, #312]	@ (80035f8 <xTaskRemoveFromEventList+0x1a8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d164      	bne.n	800358e <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	6a3a      	ldr	r2, [r7, #32]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	3304      	adds	r3, #4
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d103      	bne.n	80034f2 <xTaskRemoveFromEventList+0xa2>
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	4618      	mov	r0, r3
 8003506:	f003 fcc1 	bl	8006e8c <SEGGER_SYSVIEW_OnTaskStartReady>
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	2201      	movs	r2, #1
 8003510:	409a      	lsls	r2, r3
 8003512:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <xTaskRemoveFromEventList+0x1ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	4a38      	ldr	r2, [pc, #224]	@ (80035fc <xTaskRemoveFromEventList+0x1ac>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003520:	4937      	ldr	r1, [pc, #220]	@ (8003600 <xTaskRemoveFromEventList+0x1b0>)
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	3204      	adds	r2, #4
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a28      	ldr	r2, [pc, #160]	@ (8003600 <xTaskRemoveFromEventList+0x1b0>)
 8003560:	441a      	add	r2, r3
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	615a      	str	r2, [r3, #20]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356a:	4925      	ldr	r1, [pc, #148]	@ (8003600 <xTaskRemoveFromEventList+0x1b0>)
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800357c:	1c59      	adds	r1, r3, #1
 800357e:	4820      	ldr	r0, [pc, #128]	@ (8003600 <xTaskRemoveFromEventList+0x1b0>)
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	6019      	str	r1, [r3, #0]
 800358c:	e01b      	b.n	80035c6 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800358e:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <xTaskRemoveFromEventList+0x1b4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	61da      	str	r2, [r3, #28]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	621a      	str	r2, [r3, #32]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	3218      	adds	r2, #24
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f103 0218 	add.w	r2, r3, #24
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	4a12      	ldr	r2, [pc, #72]	@ (8003604 <xTaskRemoveFromEventList+0x1b4>)
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <xTaskRemoveFromEventList+0x1b4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a10      	ldr	r2, [pc, #64]	@ (8003604 <xTaskRemoveFromEventList+0x1b4>)
 80035c4:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <xTaskRemoveFromEventList+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d905      	bls.n	80035e0 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <xTaskRemoveFromEventList+0x1bc>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e001      	b.n	80035e4 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	4619      	mov	r1, r3
 80035e8:	20e4      	movs	r0, #228	@ 0xe4
 80035ea:	f003 fb57 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	@ 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000214 	.word	0x20000214
 80035fc:	200001f4 	.word	0x200001f4
 8003600:	20000118 	.word	0x20000118
 8003604:	200001ac 	.word	0x200001ac
 8003608:	20000114 	.word	0x20000114
 800360c:	20000200 	.word	0x20000200

08003610 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003618:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <vTaskInternalSetTimeOutState+0x28>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <vTaskInternalSetTimeOutState+0x2c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003628:	20e7      	movs	r0, #231	@ 0xe7
 800362a:	f003 fafb 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000204 	.word	0x20000204
 800363c:	200001f0 	.word	0x200001f0

08003640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	613b      	str	r3, [r7, #16]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60fb      	str	r3, [r7, #12]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003686:	f000 fe45 	bl	8004314 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800368a:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <xTaskCheckForTimeOut+0xd0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d102      	bne.n	80036aa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e026      	b.n	80036f8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <xTaskCheckForTimeOut+0xd4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d00a      	beq.n	80036cc <xTaskCheckForTimeOut+0x8c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d305      	bcc.n	80036cc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e015      	b.n	80036f8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20b      	bcs.n	80036ee <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	1ad2      	subs	r2, r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff94 	bl	8003610 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e004      	b.n	80036f8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036f8:	f000 fe3e 	bl	8004378 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4619      	mov	r1, r3
 8003700:	20e8      	movs	r0, #232	@ 0xe8
 8003702:	f003 facb 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003706:	69fb      	ldr	r3, [r7, #28]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200001f0 	.word	0x200001f0
 8003714:	20000204 	.word	0x20000204

08003718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800371c:	4b03      	ldr	r3, [pc, #12]	@ (800372c <vTaskMissedYield+0x14>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003722:	20e9      	movs	r0, #233	@ 0xe9
 8003724:	f003 fa7e 	bl	8006c24 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000200 	.word	0x20000200

08003730 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003738:	f000 f84c 	bl	80037d4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <prvIdleTask+0x20>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800374c:	bf00      	nop
 800374e:	e7f3      	b.n	8003738 <prvIdleTask+0x8>
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e00c      	b.n	800377a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <prvInitialiseTaskLists+0x60>)
 800376c:	4413      	add	r3, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fd82 	bl	8002278 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3301      	adds	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d9ef      	bls.n	8003760 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003780:	480d      	ldr	r0, [pc, #52]	@ (80037b8 <prvInitialiseTaskLists+0x64>)
 8003782:	f7fe fd79 	bl	8002278 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003786:	480d      	ldr	r0, [pc, #52]	@ (80037bc <prvInitialiseTaskLists+0x68>)
 8003788:	f7fe fd76 	bl	8002278 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <prvInitialiseTaskLists+0x6c>)
 800378e:	f7fe fd73 	bl	8002278 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003792:	480c      	ldr	r0, [pc, #48]	@ (80037c4 <prvInitialiseTaskLists+0x70>)
 8003794:	f7fe fd70 	bl	8002278 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003798:	480b      	ldr	r0, [pc, #44]	@ (80037c8 <prvInitialiseTaskLists+0x74>)
 800379a:	f7fe fd6d 	bl	8002278 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <prvInitialiseTaskLists+0x78>)
 80037a0:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <prvInitialiseTaskLists+0x64>)
 80037a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <prvInitialiseTaskLists+0x7c>)
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <prvInitialiseTaskLists+0x68>)
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000118 	.word	0x20000118
 80037b8:	2000017c 	.word	0x2000017c
 80037bc:	20000190 	.word	0x20000190
 80037c0:	200001ac 	.word	0x200001ac
 80037c4:	200001c0 	.word	0x200001c0
 80037c8:	200001d8 	.word	0x200001d8
 80037cc:	200001a4 	.word	0x200001a4
 80037d0:	200001a8 	.word	0x200001a8

080037d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037da:	e019      	b.n	8003810 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80037dc:	f000 fd9a 	bl	8004314 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037e0:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <prvCheckTasksWaitingTermination+0x50>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fdaf 	bl	8002350 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003828 <prvCheckTasksWaitingTermination+0x54>)
 80037fa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3b01      	subs	r3, #1
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003804:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003806:	f000 fdb7 	bl	8004378 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f810 	bl	8003830 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <prvCheckTasksWaitingTermination+0x58>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e1      	bne.n	80037dc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200001c0 	.word	0x200001c0
 8003828:	200001ec 	.word	0x200001ec
 800382c:	200001d4 	.word	0x200001d4

08003830 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4618      	mov	r0, r3
 800383e:	f000 ffc9 	bl	80047d4 <vPortFree>
            vPortFree( pxTCB );
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 ffc6 	bl	80047d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <prvResetNextTaskUnblockTime+0x30>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <prvResetNextTaskUnblockTime+0x34>)
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003866:	e005      	b.n	8003874 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003868:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <prvResetNextTaskUnblockTime+0x30>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <prvResetNextTaskUnblockTime+0x34>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	200001a4 	.word	0x200001a4
 8003884:	2000020c 	.word	0x2000020c

08003888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <xTaskGetSchedulerState+0x3c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003896:	2301      	movs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e008      	b.n	80038ae <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800389c:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <xTaskGetSchedulerState+0x40>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80038a4:	2302      	movs	r3, #2
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e001      	b.n	80038ae <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4619      	mov	r1, r3
 80038b2:	20f5      	movs	r0, #245	@ 0xf5
 80038b4:	f003 f9f2 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80038b8:	687b      	ldr	r3, [r7, #4]
    }
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001f8 	.word	0x200001f8
 80038c8:	20000214 	.word	0x20000214

080038cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038d6:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <prvAddCurrentTaskToDelayedList+0x100>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80038dc:	4b3c      	ldr	r3, [pc, #240]	@ (80039d0 <prvAddCurrentTaskToDelayedList+0x104>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80038e2:	4b3c      	ldr	r3, [pc, #240]	@ (80039d4 <prvAddCurrentTaskToDelayedList+0x108>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e8:	4b3b      	ldr	r3, [pc, #236]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fd2e 	bl	8002350 <uxListRemove>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038fa:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	2201      	movs	r2, #1
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	4b34      	ldr	r3, [pc, #208]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x110>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4013      	ands	r3, r2
 800390e:	4a33      	ldr	r2, [pc, #204]	@ (80039dc <prvAddCurrentTaskToDelayedList+0x110>)
 8003910:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d124      	bne.n	8003964 <prvAddCurrentTaskToDelayedList+0x98>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d021      	beq.n	8003964 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003920:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	3204      	adds	r2, #4
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003954:	615a      	str	r2, [r3, #20]
 8003956:	4b22      	ldr	r3, [pc, #136]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	4a20      	ldr	r2, [pc, #128]	@ (80039e0 <prvAddCurrentTaskToDelayedList+0x114>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003962:	e02e      	b.n	80039c2 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800396c:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	d20d      	bcs.n	8003998 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2104      	movs	r1, #4
 8003982:	4618      	mov	r0, r3
 8003984:	f003 fac4 	bl	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003988:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	4619      	mov	r1, r3
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7fe fca2 	bl	80022da <vListInsert>
}
 8003996:	e014      	b.n	80039c2 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003998:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2104      	movs	r1, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fab6 	bl	8006f10 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	69b8      	ldr	r0, [r7, #24]
 80039ae:	f7fe fc94 	bl	80022da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <prvAddCurrentTaskToDelayedList+0x118>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d202      	bcs.n	80039c2 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80039bc:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <prvAddCurrentTaskToDelayedList+0x118>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6013      	str	r3, [r2, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200001f0 	.word	0x200001f0
 80039d0:	200001a4 	.word	0x200001a4
 80039d4:	200001a8 	.word	0x200001a8
 80039d8:	20000114 	.word	0x20000114
 80039dc:	200001f4 	.word	0x200001f4
 80039e0:	200001d8 	.word	0x200001d8
 80039e4:	2000020c 	.word	0x2000020c

080039e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039f2:	f000 fa5b 	bl	8003eac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <xTimerCreateTimerTask+0x64>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039fe:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <xTimerCreateTimerTask+0x68>)
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2302      	movs	r3, #2
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a0c:	4911      	ldr	r1, [pc, #68]	@ (8003a54 <xTimerCreateTimerTask+0x6c>)
 8003a0e:	4812      	ldr	r0, [pc, #72]	@ (8003a58 <xTimerCreateTimerTask+0x70>)
 8003a10:	f7ff f807 	bl	8002a22 <xTaskCreate>
 8003a14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	603b      	str	r3, [r7, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003a3c:	f003 f92e 	bl	8006c9c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003a40:	687b      	ldr	r3, [r7, #4]
    }
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000248 	.word	0x20000248
 8003a50:	2000024c 	.word	0x2000024c
 8003a54:	08007d04 	.word	0x08007d04
 8003a58:	08003b01 	.word	0x08003b01

08003a5c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a68:	e008      	b.n	8003a7c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	18d1      	adds	r1, r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f8df 	bl	8003c4c <prvInsertTimerInActiveList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ea      	bne.n	8003a6a <prvReloadTimer+0xe>
        }
    }
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aaa:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <prvProcessExpiredTimer+0x5c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fc49 	bl	8002350 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff ffc3 	bl	8003a5c <prvReloadTimer>
 8003ad6:	e008      	b.n	8003aea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	4798      	blx	r3
    }
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000240 	.word	0x20000240

08003b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f859 	bl	8003bc4 <prvGetNextExpireTime>
 8003b12:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f805 	bl	8003b28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b1e:	f000 f8d7 	bl	8003cd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b22:	bf00      	nop
 8003b24:	e7f0      	b.n	8003b08 <prvTimerTask+0x8>
	...

08003b28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b32:	f7ff f977 	bl	8002e24 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f866 	bl	8003c0c <prvSampleTimeNow>
 8003b40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d130      	bne.n	8003baa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <prvProcessTimerOrBlockTask+0x3c>
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d806      	bhi.n	8003b64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b56:	f7ff f973 	bl	8002e40 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff9f 	bl	8003aa0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b62:	e024      	b.n	8003bae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b6a:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <prvProcessTimerOrBlockTask+0x90>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <prvProcessTimerOrBlockTask+0x50>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <prvProcessTimerOrBlockTask+0x52>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <prvProcessTimerOrBlockTask+0x94>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f7fe fed7 	bl	800293c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b8e:	f7ff f957 	bl	8002e40 <xTaskResumeAll>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003b98:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <prvProcessTimerOrBlockTask+0x98>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
    }
 8003ba8:	e001      	b.n	8003bae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003baa:	f7ff f949 	bl	8002e40 <xTaskResumeAll>
    }
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000244 	.word	0x20000244
 8003bbc:	20000248 	.word	0x20000248
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <prvGetNextExpireTime+0x44>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <prvGetNextExpireTime+0x16>
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	e000      	b.n	8003bdc <prvGetNextExpireTime+0x18>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be8:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <prvGetNextExpireTime+0x44>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e001      	b.n	8003bf8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
    }
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000240 	.word	0x20000240

08003c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003c14:	f7ff fa16 	bl	8003044 <xTaskGetTickCount>
 8003c18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <prvSampleTimeNow+0x3c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d205      	bcs.n	8003c30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c24:	f000 f91c 	bl	8003e60 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e002      	b.n	8003c36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c36:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <prvSampleTimeNow+0x3c>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000250 	.word	0x20000250

08003c4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d812      	bhi.n	8003c98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e01b      	b.n	8003cbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c86:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <prvInsertTimerInActiveList+0x7c>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7fe fb22 	bl	80022da <vListInsert>
 8003c96:	e012      	b.n	8003cbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d206      	bcs.n	8003cae <prvInsertTimerInActiveList+0x62>
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e007      	b.n	8003cbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cae:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <prvInsertTimerInActiveList+0x80>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe fb0e 	bl	80022da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cbe:	697b      	ldr	r3, [r7, #20]
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000244 	.word	0x20000244
 8003ccc:	20000240 	.word	0x20000240

08003cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003ce2:	e0a9      	b.n	8003e38 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f2c0 80a6 	blt.w	8003e38 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fb27 	bl	8002350 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff81 	bl	8003c0c <prvSampleTimeNow>
 8003d0a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	f200 808e 	bhi.w	8003e32 <prvProcessReceivedCommands+0x162>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <prvProcessReceivedCommands+0x4c>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d41 	.word	0x08003d41
 8003d24:	08003da9 	.word	0x08003da9
 8003d28:	08003dbd 	.word	0x08003dbd
 8003d2c:	08003e09 	.word	0x08003e09
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d41 	.word	0x08003d41
 8003d38:	08003da9 	.word	0x08003da9
 8003d3c:	08003dbd 	.word	0x08003dbd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	18d1      	adds	r1, r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	69f8      	ldr	r0, [r7, #28]
 8003d60:	f7ff ff74 	bl	8003c4c <prvInsertTimerInActiveList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d065      	beq.n	8003e36 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	4413      	add	r3, r2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4619      	mov	r1, r3
 8003d84:	69f8      	ldr	r0, [r7, #28]
 8003d86:	f7ff fe69 	bl	8003a5c <prvReloadTimer>
 8003d8a:	e008      	b.n	8003d9e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	69f8      	ldr	r0, [r7, #28]
 8003da4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003da6:	e046      	b.n	8003e36 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003dba:	e03d      	b.n	8003e38 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	617b      	str	r3, [r7, #20]
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	18d1      	adds	r1, r2, r3
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	69f8      	ldr	r0, [r7, #28]
 8003e02:	f7ff ff23 	bl	8003c4c <prvInsertTimerInActiveList>
                        break;
 8003e06:	e017      	b.n	8003e38 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003e16:	69f8      	ldr	r0, [r7, #28]
 8003e18:	f000 fcdc 	bl	80047d4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e1c:	e00c      	b.n	8003e38 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e30:	e002      	b.n	8003e38 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <prvProcessReceivedCommands+0x168>
                        break;
 8003e36:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003e38:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <prvProcessReceivedCommands+0x18c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f107 0108 	add.w	r1, r7, #8
 8003e40:	2200      	movs	r2, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fbb8 	bl	80025b8 <xQueueReceive>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f af4a 	bne.w	8003ce4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000248 	.word	0x20000248

08003e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e66:	e009      	b.n	8003e7c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <prvSwitchTimerLists+0x44>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003e72:	f04f 31ff 	mov.w	r1, #4294967295
 8003e76:	6838      	ldr	r0, [r7, #0]
 8003e78:	f7ff fe12 	bl	8003aa0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <prvSwitchTimerLists+0x44>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <prvSwitchTimerLists+0x44>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <prvSwitchTimerLists+0x48>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <prvSwitchTimerLists+0x44>)
 8003e92:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <prvSwitchTimerLists+0x48>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6013      	str	r3, [r2, #0]
    }
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000240 	.word	0x20000240
 8003ea8:	20000244 	.word	0x20000244

08003eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003eb0:	f000 fa30 	bl	8004314 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <prvCheckForValidListAndQueue+0x54>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ebc:	4811      	ldr	r0, [pc, #68]	@ (8003f04 <prvCheckForValidListAndQueue+0x58>)
 8003ebe:	f7fe f9db 	bl	8002278 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ec2:	4811      	ldr	r0, [pc, #68]	@ (8003f08 <prvCheckForValidListAndQueue+0x5c>)
 8003ec4:	f7fe f9d8 	bl	8002278 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ec8:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <prvCheckForValidListAndQueue+0x60>)
 8003eca:	4a0e      	ldr	r2, [pc, #56]	@ (8003f04 <prvCheckForValidListAndQueue+0x58>)
 8003ecc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <prvCheckForValidListAndQueue+0x64>)
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <prvCheckForValidListAndQueue+0x5c>)
 8003ed2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	210c      	movs	r1, #12
 8003ed8:	200a      	movs	r0, #10
 8003eda:	f7fe faf1 	bl	80024c0 <xQueueGenericCreate>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a07      	ldr	r2, [pc, #28]	@ (8003f00 <prvCheckForValidListAndQueue+0x54>)
 8003ee2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003ee4:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <prvCheckForValidListAndQueue+0x54>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003eec:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <prvCheckForValidListAndQueue+0x54>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4908      	ldr	r1, [pc, #32]	@ (8003f14 <prvCheckForValidListAndQueue+0x68>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fcd2 	bl	800289c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ef8:	f000 fa3e 	bl	8004378 <vPortExitCritical>
    }
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000248 	.word	0x20000248
 8003f04:	20000218 	.word	0x20000218
 8003f08:	2000022c 	.word	0x2000022c
 8003f0c:	20000240 	.word	0x20000240
 8003f10:	20000244 	.word	0x20000244
 8003f14:	08007d0c 	.word	0x08007d0c

08003f18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b04      	subs	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3b04      	subs	r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b04      	subs	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f48:	4a0c      	ldr	r2, [pc, #48]	@ (8003f7c <pxPortInitialiseStack+0x64>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3b14      	subs	r3, #20
 8003f52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3b04      	subs	r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f06f 0202 	mvn.w	r2, #2
 8003f66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b20      	subs	r3, #32
 8003f6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	08003f81 	.word	0x08003f81

08003f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f8a:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <prvTaskExitError+0x58>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d00b      	beq.n	8003fac <prvTaskExitError+0x2c>
    __asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <prvTaskExitError+0x28>
    __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60bb      	str	r3, [r7, #8]
}
 8003fbe:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003fc0:	bf00      	nop
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0fc      	beq.n	8003fc2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <pxCurrentTCBConst2>)
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	f380 8809 	msr	PSP, r0
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	4770      	bx	lr
 8003ffc:	f3af 8000 	nop.w

08004000 <pxCurrentTCBConst2>:
 8004000:	20000114 	.word	0x20000114
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop

08004008 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004008:	4808      	ldr	r0, [pc, #32]	@ (800402c <prvPortStartFirstTask+0x24>)
 800400a:	6800      	ldr	r0, [r0, #0]
 800400c:	6800      	ldr	r0, [r0, #0]
 800400e:	f380 8808 	msr	MSP, r0
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f380 8814 	msr	CONTROL, r0
 800401a:	b662      	cpsie	i
 800401c:	b661      	cpsie	f
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	df00      	svc	0
 8004028:	bf00      	nop
 800402a:	0000      	.short	0x0000
 800402c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop

08004034 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	@ 0x30
 8004038:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800403a:	4b69      	ldr	r3, [pc, #420]	@ (80041e0 <xPortStartScheduler+0x1ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a69      	ldr	r2, [pc, #420]	@ (80041e4 <xPortStartScheduler+0x1b0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10b      	bne.n	800405c <xPortStartScheduler+0x28>
    __asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800405c:	4b60      	ldr	r3, [pc, #384]	@ (80041e0 <xPortStartScheduler+0x1ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a61      	ldr	r2, [pc, #388]	@ (80041e8 <xPortStartScheduler+0x1b4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10b      	bne.n	800407e <xPortStartScheduler+0x4a>
    __asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	623b      	str	r3, [r7, #32]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800407e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <xPortStartScheduler+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	332c      	adds	r3, #44	@ 0x2c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a59      	ldr	r2, [pc, #356]	@ (80041f0 <xPortStartScheduler+0x1bc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <xPortStartScheduler+0x74>
    __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	61fb      	str	r3, [r7, #28]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	3338      	adds	r3, #56	@ 0x38
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a51      	ldr	r2, [pc, #324]	@ (80041f4 <xPortStartScheduler+0x1c0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00b      	beq.n	80040cc <xPortStartScheduler+0x98>
    __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	61bb      	str	r3, [r7, #24]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040d0:	4b49      	ldr	r3, [pc, #292]	@ (80041f8 <xPortStartScheduler+0x1c4>)
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <xPortStartScheduler+0x1c8>)
 80040f6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80040f8:	4b40      	ldr	r3, [pc, #256]	@ (80041fc <xPortStartScheduler+0x1c8>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <xPortStartScheduler+0xe4>
    __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	617b      	str	r3, [r7, #20]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004122:	2b00      	cmp	r3, #0
 8004124:	d013      	beq.n	800414e <xPortStartScheduler+0x11a>
    __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	613b      	str	r3, [r7, #16]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d0f1      	beq.n	800413e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d103      	bne.n	8004168 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004160:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <xPortStartScheduler+0x1cc>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e004      	b.n	8004172 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f1c3 0307 	rsb	r3, r3, #7
 800416e:	4a24      	ldr	r2, [pc, #144]	@ (8004200 <xPortStartScheduler+0x1cc>)
 8004170:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004172:	4b23      	ldr	r3, [pc, #140]	@ (8004200 <xPortStartScheduler+0x1cc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <xPortStartScheduler+0x1cc>)
 800417a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800417c:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <xPortStartScheduler+0x1cc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004184:	4a1e      	ldr	r2, [pc, #120]	@ (8004200 <xPortStartScheduler+0x1cc>)
 8004186:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004190:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <xPortStartScheduler+0x1d0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <xPortStartScheduler+0x1d0>)
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800419a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800419c:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <xPortStartScheduler+0x1d0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a18      	ldr	r2, [pc, #96]	@ (8004204 <xPortStartScheduler+0x1d0>)
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80041a8:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <xPortStartScheduler+0x1d4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041ae:	f000 f96d 	bl	800448c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <xPortStartScheduler+0x1d8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041b8:	f000 f98c 	bl	80044d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041bc:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <xPortStartScheduler+0x1dc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <xPortStartScheduler+0x1dc>)
 80041c2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041c6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041c8:	f7ff ff1e 	bl	8004008 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041cc:	f7ff f862 	bl	8003294 <vTaskSwitchContext>
    prvTaskExitError();
 80041d0:	f7ff fed6 	bl	8003f80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	@ 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000ed00 	.word	0xe000ed00
 80041e4:	410fc271 	.word	0x410fc271
 80041e8:	410fc270 	.word	0x410fc270
 80041ec:	e000ed08 	.word	0xe000ed08
 80041f0:	08003fe1 	.word	0x08003fe1
 80041f4:	080043d1 	.word	0x080043d1
 80041f8:	e000e400 	.word	0xe000e400
 80041fc:	20000254 	.word	0x20000254
 8004200:	20000258 	.word	0x20000258
 8004204:	e000ed20 	.word	0xe000ed20
 8004208:	e000ed1c 	.word	0xe000ed1c
 800420c:	20000010 	.word	0x20000010
 8004210:	e000ef34 	.word	0xe000ef34

08004214 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800421a:	4b38      	ldr	r3, [pc, #224]	@ (80042fc <vInitPrioGroupValue+0xe8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a38      	ldr	r2, [pc, #224]	@ (8004300 <vInitPrioGroupValue+0xec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10b      	bne.n	800423c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	613b      	str	r3, [r7, #16]
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800423c:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <vInitPrioGroupValue+0xe8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <vInitPrioGroupValue+0xf0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10b      	bne.n	800425e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800425e:	4b2a      	ldr	r3, [pc, #168]	@ (8004308 <vInitPrioGroupValue+0xf4>)
 8004260:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	22ff      	movs	r2, #255	@ 0xff
 800426e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b22      	ldr	r3, [pc, #136]	@ (800430c <vInitPrioGroupValue+0xf8>)
 8004284:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004286:	4b22      	ldr	r3, [pc, #136]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 8004288:	2207      	movs	r2, #7
 800428a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800428c:	e009      	b.n	80042a2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800428e:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3b01      	subs	r3, #1
 8004294:	4a1e      	ldr	r2, [pc, #120]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 8004296:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042aa:	2b80      	cmp	r3, #128	@ 0x80
 80042ac:	d0ef      	beq.n	800428e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ae:	4b18      	ldr	r3, [pc, #96]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1c3 0307 	rsb	r3, r3, #7
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d00b      	beq.n	80042d2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	60bb      	str	r3, [r7, #8]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 80042da:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <vInitPrioGroupValue+0xfc>)
 80042e6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000ed00 	.word	0xe000ed00
 8004300:	410fc271 	.word	0x410fc271
 8004304:	410fc270 	.word	0x410fc270
 8004308:	e000e400 	.word	0xe000e400
 800430c:	20000254 	.word	0x20000254
 8004310:	20000258 	.word	0x20000258

08004314 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
    __asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <vPortEnterCritical+0x5c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a0e      	ldr	r2, [pc, #56]	@ (8004370 <vPortEnterCritical+0x5c>)
 8004336:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <vPortEnterCritical+0x5c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d110      	bne.n	8004362 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <vPortEnterCritical+0x60>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <vPortEnterCritical+0x4e>
    __asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vPortEnterCritical+0x4a>
    }
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000010 	.word	0x20000010
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800437e:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <vPortExitCritical+0x50>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <vPortExitCritical+0x26>
    __asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	607b      	str	r3, [r7, #4]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <vPortExitCritical+0x50>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <vPortExitCritical+0x50>)
 80043a6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <vPortExitCritical+0x50>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <vPortExitCritical+0x44>
 80043b0:	2300      	movs	r3, #0
 80043b2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80043ba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000010 	.word	0x20000010
 80043cc:	00000000 	.word	0x00000000

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f01e 0f10 	tst.w	lr, #16
 80043e0:	bf08      	it	eq
 80043e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043f4:	f380 8811 	msr	BASEPRI, r0
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f7fe ff48 	bl	8003294 <vTaskSwitchContext>
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	bc09      	pop	{r0, r3}
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6808      	ldr	r0, [r1, #0]
 8004412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004416:	f01e 0f10 	tst.w	lr, #16
 800441a:	bf08      	it	eq
 800441c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004420:	f380 8809 	msr	PSP, r0
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst>:
 8004430:	20000114 	.word	0x20000114
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
    __asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004452:	f002 fb6d 	bl	8006b30 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004456:	f7fe fe1d 	bl	8003094 <xTaskIncrementTick>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d006      	beq.n	800446e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004460:	f002 fbc4 	bl	8006bec <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004464:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <SysTick_Handler+0x50>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e001      	b.n	8004472 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800446e:	f002 fba1 	bl	8006bb4 <SEGGER_SYSVIEW_RecordExitISR>
 8004472:	2300      	movs	r3, #0
 8004474:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f383 8811 	msr	BASEPRI, r3
}
 800447c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <vPortSetupTimerInterrupt+0x34>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <vPortSetupTimerInterrupt+0x38>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <vPortSetupTimerInterrupt+0x3c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <vPortSetupTimerInterrupt+0x40>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <vPortSetupTimerInterrupt+0x44>)
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ae:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <vPortSetupTimerInterrupt+0x34>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010
 80044c4:	e000e018 	.word	0xe000e018
 80044c8:	20000000 	.word	0x20000000
 80044cc:	10624dd3 	.word	0x10624dd3
 80044d0:	e000e014 	.word	0xe000e014

080044d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044e4 <vPortEnableVFP+0x10>
 80044d8:	6801      	ldr	r1, [r0, #0]
 80044da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044de:	6001      	str	r1, [r0, #0]
 80044e0:	4770      	bx	lr
 80044e2:	0000      	.short	0x0000
 80044e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop

080044ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80044f2:	f3ef 8305 	mrs	r3, IPSR
 80044f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	d915      	bls.n	800452a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <vPortValidateInterruptPriority+0x74>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004508:	4b16      	ldr	r3, [pc, #88]	@ (8004564 <vPortValidateInterruptPriority+0x78>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	7afa      	ldrb	r2, [r7, #11]
 800450e:	429a      	cmp	r2, r3
 8004510:	d20b      	bcs.n	800452a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	607b      	str	r3, [r7, #4]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800452a:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <vPortValidateInterruptPriority+0x7c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004532:	4b0e      	ldr	r3, [pc, #56]	@ (800456c <vPortValidateInterruptPriority+0x80>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d90b      	bls.n	8004552 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	603b      	str	r3, [r7, #0]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <vPortValidateInterruptPriority+0x62>
    }
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e3f0 	.word	0xe000e3f0
 8004564:	20000254 	.word	0x20000254
 8004568:	e000ed0c 	.word	0xe000ed0c
 800456c:	20000258 	.word	0x20000258

08004570 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	@ 0x38
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d022      	beq.n	80045c8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004582:	2308      	movs	r3, #8
 8004584:	43db      	mvns	r3, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d81b      	bhi.n	80045c4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800458c:	2208      	movs	r2, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d014      	beq.n	80045c8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	f1c3 0308 	rsb	r3, r3, #8
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	43db      	mvns	r3, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d804      	bhi.n	80045be <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	4413      	add	r3, r2
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e004      	b.n	80045c8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	e001      	b.n	80045c8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80045c8:	f7fe fc2c 	bl	8002e24 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045cc:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <pvPortMalloc+0x248>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80045d4:	f000 f978 	bl	80048c8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f2c0 80d3 	blt.w	8004786 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80cf 	beq.w	8004786 <pvPortMalloc+0x216>
 80045e8:	4b74      	ldr	r3, [pc, #464]	@ (80047bc <pvPortMalloc+0x24c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	f200 80c9 	bhi.w	8004786 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045f4:	4b72      	ldr	r3, [pc, #456]	@ (80047c0 <pvPortMalloc+0x250>)
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80045f8:	4b71      	ldr	r3, [pc, #452]	@ (80047c0 <pvPortMalloc+0x250>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	4a70      	ldr	r2, [pc, #448]	@ (80047c4 <pvPortMalloc+0x254>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d305      	bcc.n	8004612 <pvPortMalloc+0xa2>
 8004606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004608:	4a6f      	ldr	r2, [pc, #444]	@ (80047c8 <pvPortMalloc+0x258>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d801      	bhi.n	8004612 <pvPortMalloc+0xa2>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <pvPortMalloc+0xa4>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d129      	bne.n	800466c <pvPortMalloc+0xfc>
    __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	623b      	str	r3, [r7, #32]
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	4a61      	ldr	r2, [pc, #388]	@ (80047c4 <pvPortMalloc+0x254>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d305      	bcc.n	800464e <pvPortMalloc+0xde>
 8004642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004644:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <pvPortMalloc+0x258>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d801      	bhi.n	800464e <pvPortMalloc+0xde>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <pvPortMalloc+0xe0>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <pvPortMalloc+0xfc>
    __asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	61fb      	str	r3, [r7, #28]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800466c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d903      	bls.n	800467e <pvPortMalloc+0x10e>
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1d8      	bne.n	8004630 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800467e:	4b4e      	ldr	r3, [pc, #312]	@ (80047b8 <pvPortMalloc+0x248>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004684:	429a      	cmp	r2, r3
 8004686:	d07e      	beq.n	8004786 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2208      	movs	r2, #8
 800468e:	4413      	add	r3, r2
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004694:	4a4b      	ldr	r2, [pc, #300]	@ (80047c4 <pvPortMalloc+0x254>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d305      	bcc.n	80046a6 <pvPortMalloc+0x136>
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	4a4a      	ldr	r2, [pc, #296]	@ (80047c8 <pvPortMalloc+0x258>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d801      	bhi.n	80046a6 <pvPortMalloc+0x136>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <pvPortMalloc+0x138>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <pvPortMalloc+0x154>
    __asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61bb      	str	r3, [r7, #24]
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90b      	bls.n	80046ee <pvPortMalloc+0x17e>
    __asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	617b      	str	r3, [r7, #20]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad2      	subs	r2, r2, r3
 80046f6:	2308      	movs	r3, #8
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d924      	bls.n	8004748 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <pvPortMalloc+0x1b8>
    __asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	613b      	str	r3, [r7, #16]
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	e7fd      	b.n	8004724 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004746:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004748:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <pvPortMalloc+0x24c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <pvPortMalloc+0x24c>)
 8004754:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <pvPortMalloc+0x24c>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b1c      	ldr	r3, [pc, #112]	@ (80047cc <pvPortMalloc+0x25c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d203      	bcs.n	800476a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004762:	4b16      	ldr	r3, [pc, #88]	@ (80047bc <pvPortMalloc+0x24c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <pvPortMalloc+0x25c>)
 8004768:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800477c:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <pvPortMalloc+0x260>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a13      	ldr	r2, [pc, #76]	@ (80047d0 <pvPortMalloc+0x260>)
 8004784:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004786:	f7fe fb5b 	bl	8002e40 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <pvPortMalloc+0x23c>
    __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <pvPortMalloc+0x238>
    return pvReturn;
 80047ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3738      	adds	r7, #56	@ 0x38
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20012e64 	.word	0x20012e64
 80047bc:	20012e68 	.word	0x20012e68
 80047c0:	20012e5c 	.word	0x20012e5c
 80047c4:	2000025c 	.word	0x2000025c
 80047c8:	20012e5b 	.word	0x20012e5b
 80047cc:	20012e6c 	.word	0x20012e6c
 80047d0:	20012e70 	.word	0x20012e70

080047d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d064      	beq.n	80048b0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047e6:	2308      	movs	r3, #8
 80047e8:	425b      	negs	r3, r3
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4a30      	ldr	r2, [pc, #192]	@ (80048b8 <vPortFree+0xe4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d305      	bcc.n	8004808 <vPortFree+0x34>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	4a2f      	ldr	r2, [pc, #188]	@ (80048bc <vPortFree+0xe8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d801      	bhi.n	8004808 <vPortFree+0x34>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <vPortFree+0x36>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <vPortFree+0x52>
    __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	617b      	str	r3, [r7, #20]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	db0b      	blt.n	8004846 <vPortFree+0x72>
    __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	613b      	str	r3, [r7, #16]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <vPortFree+0x92>
    __asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60fb      	str	r3, [r7, #12]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	0fdb      	lsrs	r3, r3, #31
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01c      	beq.n	80048b0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d118      	bne.n	80048b0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800488a:	f7fe facb 	bl	8002e24 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <vPortFree+0xec>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4413      	add	r3, r2
 8004898:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <vPortFree+0xec>)
 800489a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800489c:	69b8      	ldr	r0, [r7, #24]
 800489e:	f000 f86d 	bl	800497c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048a2:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <vPortFree+0xf0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a06      	ldr	r2, [pc, #24]	@ (80048c4 <vPortFree+0xf0>)
 80048aa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048ac:	f7fe fac8 	bl	8002e40 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048b0:	bf00      	nop
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	2000025c 	.word	0x2000025c
 80048bc:	20012e5b 	.word	0x20012e5b
 80048c0:	20012e68 	.word	0x20012e68
 80048c4:	20012e74 	.word	0x20012e74

080048c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048ce:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80048d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80048d4:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <prvHeapInit+0xa0>)
 80048d6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3307      	adds	r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <prvHeapInit+0xa0>)
 80048f8:	4413      	add	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a1b      	ldr	r2, [pc, #108]	@ (800496c <prvHeapInit+0xa4>)
 8004900:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <prvHeapInit+0xa4>)
 8004904:	2200      	movs	r2, #0
 8004906:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004910:	2208      	movs	r2, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a13      	ldr	r2, [pc, #76]	@ (8004970 <prvHeapInit+0xa8>)
 8004924:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <prvHeapInit+0xa8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <prvHeapInit+0xa8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004944:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <prvHeapInit+0xa8>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a08      	ldr	r2, [pc, #32]	@ (8004974 <prvHeapInit+0xac>)
 8004952:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a07      	ldr	r2, [pc, #28]	@ (8004978 <prvHeapInit+0xb0>)
 800495a:	6013      	str	r3, [r2, #0]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	2000025c 	.word	0x2000025c
 800496c:	20012e5c 	.word	0x20012e5c
 8004970:	20012e64 	.word	0x20012e64
 8004974:	20012e6c 	.word	0x20012e6c
 8004978:	20012e68 	.word	0x20012e68

0800497c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004984:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <prvInsertBlockIntoFreeList+0xe4>)
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e002      	b.n	8004990 <prvInsertBlockIntoFreeList+0x14>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d8f7      	bhi.n	800498a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <prvInsertBlockIntoFreeList+0xe4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d018      	beq.n	80049d4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <prvInsertBlockIntoFreeList+0xe8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d305      	bcc.n	80049b6 <prvInsertBlockIntoFreeList+0x3a>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004a68 <prvInsertBlockIntoFreeList+0xec>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d801      	bhi.n	80049b6 <prvInsertBlockIntoFreeList+0x3a>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x3c>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d108      	bne.n	80049f8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	441a      	add	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	441a      	add	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d118      	bne.n	8004a3e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <prvInsertBlockIntoFreeList+0xf0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d00d      	beq.n	8004a34 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e008      	b.n	8004a46 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a34:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <prvInsertBlockIntoFreeList+0xf0>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e003      	b.n	8004a46 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d002      	beq.n	8004a54 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20012e5c 	.word	0x20012e5c
 8004a64:	2000025c 	.word	0x2000025c
 8004a68:	20012e5b 	.word	0x20012e5b
 8004a6c:	20012e64 	.word	0x20012e64

08004a70 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a74:	4803      	ldr	r0, [pc, #12]	@ (8004a84 <_cbSendSystemDesc+0x14>)
 8004a76:	f002 f805 	bl	8006a84 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a7a:	4803      	ldr	r0, [pc, #12]	@ (8004a88 <_cbSendSystemDesc+0x18>)
 8004a7c:	f002 f802 	bl	8006a84 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	08007d14 	.word	0x08007d14
 8004a88:	08007d50 	.word	0x08007d50

08004a8c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <SEGGER_SYSVIEW_Conf+0x20>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <SEGGER_SYSVIEW_Conf+0x20>)
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a9a:	4a06      	ldr	r2, [pc, #24]	@ (8004ab4 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a9c:	f001 fc76 	bl	800638c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004aa0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004aa4:	f001 fcb6 	bl	8006414 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004aa8:	bf00      	nop
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	08004a71 	.word	0x08004a71
 8004ab4:	08007dec 	.word	0x08007dec

08004ab8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	e033      	b.n	8004b2c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ac4:	491e      	ldr	r1, [pc, #120]	@ (8004b40 <_cbSendTaskList+0x88>)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	491a      	ldr	r1, [pc, #104]	@ (8004b40 <_cbSendTaskList+0x88>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	4c16      	ldr	r4, [pc, #88]	@ (8004b40 <_cbSendTaskList+0x88>)
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4423      	add	r3, r4
 8004af4:	3308      	adds	r3, #8
 8004af6:	681c      	ldr	r4, [r3, #0]
 8004af8:	4d11      	ldr	r5, [pc, #68]	@ (8004b40 <_cbSendTaskList+0x88>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	442b      	add	r3, r5
 8004b06:	330c      	adds	r3, #12
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	4e0d      	ldr	r6, [pc, #52]	@ (8004b40 <_cbSendTaskList+0x88>)
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4433      	add	r3, r6
 8004b18:	3310      	adds	r3, #16
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	462b      	mov	r3, r5
 8004b20:	4622      	mov	r2, r4
 8004b22:	f000 f8bd 	bl	8004ca0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <_cbSendTaskList+0x8c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3c6      	bcc.n	8004ac4 <_cbSendTaskList+0xc>
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b40:	20012e78 	.word	0x20012e78
 8004b44:	20012f18 	.word	0x20012f18

08004b48 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b50:	f7fe fa8a 	bl	8003068 <xTaskGetTickCountFromISR>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2200      	movs	r2, #0
 8004b58:	469a      	mov	sl, r3
 8004b5a:	4693      	mov	fp, r2
 8004b5c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	f04f 0a00 	mov.w	sl, #0
 8004b6c:	f04f 0b00 	mov.w	fp, #0
 8004b70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	465b      	mov	r3, fp
 8004b80:	1a14      	subs	r4, r2, r0
 8004b82:	eb63 0501 	sbc.w	r5, r3, r1
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	00ab      	lsls	r3, r5, #2
 8004b90:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b94:	00a2      	lsls	r2, r4, #2
 8004b96:	4614      	mov	r4, r2
 8004b98:	461d      	mov	r5, r3
 8004b9a:	eb14 0800 	adds.w	r8, r4, r0
 8004b9e:	eb45 0901 	adc.w	r9, r5, r1
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bb6:	4690      	mov	r8, r2
 8004bb8:	4699      	mov	r9, r3
 8004bba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bd0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004bde:	2205      	movs	r2, #5
 8004be0:	492b      	ldr	r1, [pc, #172]	@ (8004c90 <SYSVIEW_AddTask+0xc0>)
 8004be2:	68b8      	ldr	r0, [r7, #8]
 8004be4:	f002 fbbc 	bl	8007360 <memcmp>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d04b      	beq.n	8004c86 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b07      	cmp	r3, #7
 8004bf4:	d903      	bls.n	8004bfe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bf6:	4828      	ldr	r0, [pc, #160]	@ (8004c98 <SYSVIEW_AddTask+0xc8>)
 8004bf8:	f002 faf4 	bl	80071e4 <SEGGER_SYSVIEW_Warn>
    return;
 8004bfc:	e044      	b.n	8004c88 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004bfe:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4926      	ldr	r1, [pc, #152]	@ (8004c9c <SYSVIEW_AddTask+0xcc>)
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c12:	4b20      	ldr	r3, [pc, #128]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4921      	ldr	r1, [pc, #132]	@ (8004c9c <SYSVIEW_AddTask+0xcc>)
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3304      	adds	r3, #4
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c28:	4b1a      	ldr	r3, [pc, #104]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	491b      	ldr	r1, [pc, #108]	@ (8004c9c <SYSVIEW_AddTask+0xcc>)
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	3308      	adds	r3, #8
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4916      	ldr	r1, [pc, #88]	@ (8004c9c <SYSVIEW_AddTask+0xcc>)
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	330c      	adds	r3, #12
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c54:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4910      	ldr	r1, [pc, #64]	@ (8004c9c <SYSVIEW_AddTask+0xcc>)
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3310      	adds	r3, #16
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <SYSVIEW_AddTask+0xc4>)
 8004c72:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f80e 	bl	8004ca0 <SYSVIEW_SendTaskInfo>
 8004c84:	e000      	b.n	8004c88 <SYSVIEW_AddTask+0xb8>
    return;
 8004c86:	bf00      	nop

}
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	08007d60 	.word	0x08007d60
 8004c94:	20012f18 	.word	0x20012f18
 8004c98:	08007d68 	.word	0x08007d68
 8004c9c:	20012e78 	.word	0x20012e78

08004ca0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cae:	f107 0310 	add.w	r3, r7, #16
 8004cb2:	2218      	movs	r2, #24
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f002 fb62 	bl	8007380 <memset>
  TaskInfo.TaskID     = TaskID;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fddd 	bl	8006894 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cda:	bf00      	nop
 8004cdc:	3728      	adds	r7, #40	@ 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <__NVIC_EnableIRQ>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db0b      	blt.n	8004d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	4907      	ldr	r1, [pc, #28]	@ (8004d1c <__NVIC_EnableIRQ+0x38>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2001      	movs	r0, #1
 8004d06:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	e000e100 	.word	0xe000e100

08004d20 <__NVIC_SetPriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	@ (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	@ (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004d7a:	f002 fa8f 	bl	800729c <SEGGER_SYSVIEW_IsStarted>
 8004d7e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004d86:	f001 fc09 	bl	800659c <SEGGER_SYSVIEW_Start>
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <_cbOnUARTRx+0x3c>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d806      	bhi.n	8004db4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004da6:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd0 <_cbOnUARTRx+0x3c>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <_cbOnUARTRx+0x3c>)
 8004db0:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004db2:	e009      	b.n	8004dc8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004db4:	f7ff ffde 	bl	8004d74 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <_cbOnUARTRx+0x3c>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f000 fb9c 	bl	8005500 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004dc8:	bf00      	nop
}
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000014 	.word	0x20000014

08004dd4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <_cbOnUARTTx+0x5c>)
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d80f      	bhi.n	8004e04 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <_cbOnUARTTx+0x5c>)
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <_cbOnUARTTx+0x60>)
 8004dec:	5c9a      	ldrb	r2, [r3, r2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004df2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e30 <_cbOnUARTTx+0x5c>)
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <_cbOnUARTTx+0x5c>)
 8004dfc:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e02:	e00f      	b.n	8004e24 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <_cbOnUARTTx+0x5c>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fa1b 	bl	8005248 <SEGGER_RTT_ReadUpBufferNoLock>
 8004e12:	4603      	mov	r3, r0
 8004e14:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da02      	bge.n	8004e22 <_cbOnUARTTx+0x4e>
    r = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e000      	b.n	8004e24 <_cbOnUARTTx+0x50>
  }
Done:
 8004e22:	bf00      	nop
  return r;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000014 	.word	0x20000014
 8004e34:	08007df4 	.word	0x08007df4

08004e38 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004e40:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <SEGGER_UART_init+0x1c>)
 8004e42:	4905      	ldr	r1, [pc, #20]	@ (8004e58 <SEGGER_UART_init+0x20>)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f863 	bl	8004f10 <HIF_UART_Init>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08004d95 	.word	0x08004d95
 8004e58:	08004dd5 	.word	0x08004dd5

08004e5c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004e62:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <USART2_IRQHandler+0x80>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004e72:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <USART2_IRQHandler+0x84>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 030b 	and.w	r3, r3, #11
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004e84:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <USART2_IRQHandler+0x88>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004e8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <USART2_IRQHandler+0x88>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	4610      	mov	r0, r2
 8004e94:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ea0:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <USART2_IRQHandler+0x8c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee8 <USART2_IRQHandler+0x8c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	1dfa      	adds	r2, r7, #7
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4798      	blx	r3
 8004eb2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004eba:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <USART2_IRQHandler+0x90>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8004eec <USART2_IRQHandler+0x90>)
 8004ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e006      	b.n	8004ed6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <USART2_IRQHandler+0x80>)
 8004eca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <USART2_IRQHandler+0x84>)
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e000      	b.n	8004ed6 <USART2_IRQHandler+0x7a>
      return;
 8004ed4:	bf00      	nop
    }
  }
}
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40004404 	.word	0x40004404
 8004ee4:	20012f1c 	.word	0x20012f1c
 8004ee8:	20012f20 	.word	0x20012f20
 8004eec:	4000440c 	.word	0x4000440c

08004ef0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	4000440c 	.word	0x4000440c

08004f10 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd8 <HIF_UART_Init+0xc8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd8 <HIF_UART_Init+0xc8>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004f28:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HIF_UART_Init+0xcc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fdc <HIF_UART_Init+0xcc>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004f34:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe0 <HIF_UART_Init+0xd0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f40:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004f48:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004f4a:	4a25      	ldr	r2, [pc, #148]	@ (8004fe0 <HIF_UART_Init+0xd0>)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004f50:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <HIF_UART_Init+0xd4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f5c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004f64:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004f66:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HIF_UART_Init+0xd4>)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <HIF_UART_Init+0xd8>)
 8004f6e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004f72:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004f74:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <HIF_UART_Init+0xdc>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff0 <HIF_UART_Init+0xe0>)
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004f86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HIF_UART_Init+0xe4>)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9e:	d302      	bcc.n	8004fa6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004fa0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004fa4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	4a11      	ldr	r2, [pc, #68]	@ (8004ff8 <HIF_UART_Init+0xe8>)
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004fb6:	4a11      	ldr	r2, [pc, #68]	@ (8004ffc <HIF_UART_Init+0xec>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004fbc:	4a10      	ldr	r2, [pc, #64]	@ (8005000 <HIF_UART_Init+0xf0>)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004fc2:	2106      	movs	r1, #6
 8004fc4:	2026      	movs	r0, #38	@ 0x26
 8004fc6:	f7ff feab 	bl	8004d20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004fca:	2026      	movs	r0, #38	@ 0x26
 8004fcc:	f7ff fe8a 	bl	8004ce4 <__NVIC_EnableIRQ>
}
 8004fd0:	bf00      	nop
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023840 	.word	0x40023840
 8004fdc:	40023830 	.word	0x40023830
 8004fe0:	40020020 	.word	0x40020020
 8004fe4:	40020000 	.word	0x40020000
 8004fe8:	4000440c 	.word	0x4000440c
 8004fec:	40004410 	.word	0x40004410
 8004ff0:	40004414 	.word	0x40004414
 8004ff4:	0501bd00 	.word	0x0501bd00
 8004ff8:	40004408 	.word	0x40004408
 8004ffc:	20012f1c 	.word	0x20012f1c
 8005000:	20012f20 	.word	0x20012f20

08005004 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800500a:	4b26      	ldr	r3, [pc, #152]	@ (80050a4 <_DoInit+0xa0>)
 800500c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800500e:	22a8      	movs	r2, #168	@ 0xa8
 8005010:	2100      	movs	r1, #0
 8005012:	6838      	ldr	r0, [r7, #0]
 8005014:	f002 f9b4 	bl	8007380 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2203      	movs	r2, #3
 800501c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2203      	movs	r2, #3
 8005022:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4a20      	ldr	r2, [pc, #128]	@ (80050a8 <_DoInit+0xa4>)
 8005028:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ac <_DoInit+0xa8>)
 800502e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005036:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <_DoInit+0xa4>)
 800504e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <_DoInit+0xac>)
 8005054:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2200      	movs	r2, #0
 8005066:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800506e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e00c      	b.n	8005092 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1c3 030f 	rsb	r3, r3, #15
 800507e:	4a0d      	ldr	r2, [pc, #52]	@ (80050b4 <_DoInit+0xb0>)
 8005080:	5cd1      	ldrb	r1, [r2, r3]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	460a      	mov	r2, r1
 800508a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b0f      	cmp	r3, #15
 8005096:	d9ef      	bls.n	8005078 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005098:	f3bf 8f5f 	dmb	sy
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20012f24 	.word	0x20012f24
 80050a8:	08007db8 	.word	0x08007db8
 80050ac:	20012fcc 	.word	0x20012fcc
 80050b0:	200133cc 	.word	0x200133cc
 80050b4:	08007df8 	.word	0x08007df8

080050b8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	@ 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d905      	bls.n	80050e8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e007      	b.n	80050f8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	1acb      	subs	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	3b01      	subs	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005102:	4293      	cmp	r3, r2
 8005104:	bf28      	it	cs
 8005106:	4613      	movcs	r3, r2
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4293      	cmp	r3, r2
 8005110:	bf28      	it	cs
 8005112:	4613      	movcs	r3, r2
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	6978      	ldr	r0, [r7, #20]
 8005126:	f002 f959 	bl	80073dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	4413      	add	r3, r2
 8005130:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	4413      	add	r3, r2
 8005138:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	4413      	add	r3, r2
 8005148:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	429a      	cmp	r2, r3
 8005152:	d101      	bne.n	8005158 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005158:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1b2      	bne.n	80050ce <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005168:	6a3b      	ldr	r3, [r7, #32]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3728      	adds	r7, #40	@ 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d911      	bls.n	80051ba <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	6938      	ldr	r0, [r7, #16]
 80051a6:	f002 f919 	bl	80073dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	441a      	add	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80051b8:	e01f      	b.n	80051fa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	6938      	ldr	r0, [r7, #16]
 80051ce:	f002 f905 	bl	80073dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f002 f8f6 	bl	80073dc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	60da      	str	r2, [r3, #12]
}
 80051fa:	bf00      	nop
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	429a      	cmp	r2, r3
 800521c:	d808      	bhi.n	8005230 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad2      	subs	r2, r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4413      	add	r3, r2
 800522a:	3b01      	subs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e004      	b.n	800523a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
  }
  return r;
 800523a:	697b      	ldr	r3, [r7, #20]
}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	@ 0x30
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005254:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b53      	cmp	r3, #83	@ 0x53
 8005260:	d001      	beq.n	8005266 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005262:	f7ff fecf 	bl	8005004 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4a37      	ldr	r2, [pc, #220]	@ (8005350 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800528c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	429a      	cmp	r2, r3
 8005292:	d92b      	bls.n	80052ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bf28      	it	cs
 80052a6:	4613      	movcs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052ba:	f002 f88f 	bl	80073dc <memcpy>
    NumBytesRead += NumBytesRem;
 80052be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4413      	add	r3, r2
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d101      	bne.n	80052ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf28      	it	cs
 80052fc:	4613      	movcs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d019      	beq.n	800533a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	4413      	add	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	6939      	ldr	r1, [r7, #16]
 8005314:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005316:	f002 f861 	bl	80073dc <memcpy>
    NumBytesRead += NumBytesRem;
 800531a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005344:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005348:	4618      	mov	r0, r3
 800534a:	3730      	adds	r7, #48	@ 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20012f24 	.word	0x20012f24

08005354 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	@ 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005360:	4b3e      	ldr	r3, [pc, #248]	@ (800545c <SEGGER_RTT_ReadNoLock+0x108>)
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b53      	cmp	r3, #83	@ 0x53
 800536c:	d001      	beq.n	8005372 <SEGGER_RTT_ReadNoLock+0x1e>
 800536e:	f7ff fe49 	bl	8005004 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	3360      	adds	r3, #96	@ 0x60
 800537e:	4a37      	ldr	r2, [pc, #220]	@ (800545c <SEGGER_RTT_ReadNoLock+0x108>)
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	d92b      	bls.n	80053f8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bf28      	it	cs
 80053b2:	4613      	movcs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053bc:	4413      	add	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053c6:	f002 f809 	bl	80073dc <memcpy>
    NumBytesRead += NumBytesRem;
 80053ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d101      	bne.n	80053f8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4293      	cmp	r3, r2
 8005406:	bf28      	it	cs
 8005408:	4613      	movcs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d019      	beq.n	8005446 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	4413      	add	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	6939      	ldr	r1, [r7, #16]
 8005420:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005422:	f001 ffdb 	bl	80073dc <memcpy>
    NumBytesRead += NumBytesRem;
 8005426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800542e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800543e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005450:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	@ 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20012f24 	.word	0x20012f24

08005460 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	3360      	adds	r3, #96	@ 0x60
 800547c:	4a1f      	ldr	r2, [pc, #124]	@ (80054fc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800547e:	4413      	add	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d029      	beq.n	80054de <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800548a:	2b02      	cmp	r3, #2
 800548c:	d82e      	bhi.n	80054ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005492:	2b01      	cmp	r3, #1
 8005494:	d013      	beq.n	80054be <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005496:	e029      	b.n	80054ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005498:	6978      	ldr	r0, [r7, #20]
 800549a:	f7ff feb2 	bl	8005202 <_GetAvailWriteSpace>
 800549e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d202      	bcs.n	80054ae <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80054ac:	e021      	b.n	80054f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff fe5b 	bl	8005172 <_WriteNoCheck>
    break;
 80054bc:	e019      	b.n	80054f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f7ff fe9f 	bl	8005202 <_GetAvailWriteSpace>
 80054c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bf28      	it	cs
 80054ce:	4613      	movcs	r3, r2
 80054d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff fe4b 	bl	8005172 <_WriteNoCheck>
    break;
 80054dc:	e009      	b.n	80054f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff fde8 	bl	80050b8 <_WriteBlocking>
 80054e8:	61f8      	str	r0, [r7, #28]
    break;
 80054ea:	e002      	b.n	80054f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
    break;
 80054f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80054f2:	69fb      	ldr	r3, [r7, #28]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20012f24 	.word	0x20012f24

08005500 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800550c:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b53      	cmp	r3, #83	@ 0x53
 8005518:	d001      	beq.n	800551e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800551a:	f7ff fd73 	bl	8005004 <_DoInit>
  SEGGER_RTT_LOCK();
 800551e:	f3ef 8311 	mrs	r3, BASEPRI
 8005522:	f04f 0120 	mov.w	r1, #32
 8005526:	f381 8811 	msr	BASEPRI, r1
 800552a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff95 	bl	8005460 <SEGGER_RTT_WriteDownBufferNoLock>
 8005536:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800553e:	697b      	ldr	r3, [r7, #20]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20012f24 	.word	0x20012f24

0800554c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800555a:	4b3d      	ldr	r3, [pc, #244]	@ (8005650 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b53      	cmp	r3, #83	@ 0x53
 8005566:	d001      	beq.n	800556c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005568:	f7ff fd4c 	bl	8005004 <_DoInit>
  SEGGER_RTT_LOCK();
 800556c:	f3ef 8311 	mrs	r3, BASEPRI
 8005570:	f04f 0120 	mov.w	r1, #32
 8005574:	f381 8811 	msr	BASEPRI, r1
 8005578:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800557a:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800557c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005582:	6939      	ldr	r1, [r7, #16]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	3304      	adds	r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	dbeb      	blt.n	8005582 <SEGGER_RTT_AllocUpBuffer+0x36>
 80055aa:	e000      	b.n	80055ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80055ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	da3f      	bge.n	8005638 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80055b8:	6939      	ldr	r1, [r7, #16]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80055cc:	6939      	ldr	r1, [r7, #16]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	4613      	mov	r3, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	440b      	add	r3, r1
 80055dc:	3304      	adds	r3, #4
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80055e2:	6939      	ldr	r1, [r7, #16]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	3320      	adds	r3, #32
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80055f6:	6939      	ldr	r1, [r7, #16]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	4613      	mov	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	3328      	adds	r3, #40	@ 0x28
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3324      	adds	r3, #36	@ 0x24
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800561e:	6939      	ldr	r1, [r7, #16]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	332c      	adds	r3, #44	@ 0x2c
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005632:	f3bf 8f5f 	dmb	sy
 8005636:	e002      	b.n	800563e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
 800563c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005644:	69fb      	ldr	r3, [r7, #28]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20012f24 	.word	0x20012f24

08005654 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	@ 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005662:	4b21      	ldr	r3, [pc, #132]	@ (80056e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b53      	cmp	r3, #83	@ 0x53
 800566e:	d001      	beq.n	8005674 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005670:	f7ff fcc8 	bl	8005004 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005674:	4b1c      	ldr	r3, [pc, #112]	@ (80056e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005676:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d82c      	bhi.n	80056d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800567e:	f3ef 8311 	mrs	r3, BASEPRI
 8005682:	f04f 0120 	mov.w	r1, #32
 8005686:	f381 8811 	msr	BASEPRI, r1
 800568a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	3360      	adds	r3, #96	@ 0x60
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d6:	e002      	b.n	80056de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3728      	adds	r7, #40	@ 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20012f24 	.word	0x20012f24

080056ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	60fa      	str	r2, [r7, #12]
 8005702:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b80      	cmp	r3, #128	@ 0x80
 8005708:	d90a      	bls.n	8005720 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800570e:	e007      	b.n	8005720 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	1c53      	adds	r3, r2, #1
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	60f9      	str	r1, [r7, #12]
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <_EncodeStr+0x46>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ee      	bne.n	8005710 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	b2da      	uxtb	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3307      	adds	r3, #7
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800576a:	4b34      	ldr	r3, [pc, #208]	@ (800583c <_HandleIncomingPacket+0xd8>)
 800576c:	7e1b      	ldrb	r3, [r3, #24]
 800576e:	4618      	mov	r0, r3
 8005770:	1cfb      	adds	r3, r7, #3
 8005772:	2201      	movs	r2, #1
 8005774:	4619      	mov	r1, r3
 8005776:	f7ff fded 	bl	8005354 <SEGGER_RTT_ReadNoLock>
 800577a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d057      	beq.n	8005832 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	2b80      	cmp	r3, #128	@ 0x80
 8005786:	d031      	beq.n	80057ec <_HandleIncomingPacket+0x88>
 8005788:	2b80      	cmp	r3, #128	@ 0x80
 800578a:	dc40      	bgt.n	800580e <_HandleIncomingPacket+0xaa>
 800578c:	2b07      	cmp	r3, #7
 800578e:	dc15      	bgt.n	80057bc <_HandleIncomingPacket+0x58>
 8005790:	2b00      	cmp	r3, #0
 8005792:	dd3c      	ble.n	800580e <_HandleIncomingPacket+0xaa>
 8005794:	3b01      	subs	r3, #1
 8005796:	2b06      	cmp	r3, #6
 8005798:	d839      	bhi.n	800580e <_HandleIncomingPacket+0xaa>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <_HandleIncomingPacket+0x3c>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057c3 	.word	0x080057c3
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057cf 	.word	0x080057cf
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057db 	.word	0x080057db
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057e7 	.word	0x080057e7
 80057bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80057be:	d033      	beq.n	8005828 <_HandleIncomingPacket+0xc4>
 80057c0:	e025      	b.n	800580e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80057c2:	f000 feeb 	bl	800659c <SEGGER_SYSVIEW_Start>
      break;
 80057c6:	e034      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80057c8:	f000 ffa4 	bl	8006714 <SEGGER_SYSVIEW_Stop>
      break;
 80057cc:	e031      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80057ce:	f001 f97d 	bl	8006acc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80057d2:	e02e      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80057d4:	f001 f942 	bl	8006a5c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80057d8:	e02b      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80057da:	f000 ffc1 	bl	8006760 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80057de:	e028      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80057e0:	f001 fcae 	bl	8007140 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80057e4:	e025      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80057e6:	f001 fc8d 	bl	8007104 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80057ea:	e022      	b.n	8005832 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057ec:	4b13      	ldr	r3, [pc, #76]	@ (800583c <_HandleIncomingPacket+0xd8>)
 80057ee:	7e1b      	ldrb	r3, [r3, #24]
 80057f0:	4618      	mov	r0, r3
 80057f2:	1cfb      	adds	r3, r7, #3
 80057f4:	2201      	movs	r2, #1
 80057f6:	4619      	mov	r1, r3
 80057f8:	f7ff fdac 	bl	8005354 <SEGGER_RTT_ReadNoLock>
 80057fc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	4618      	mov	r0, r3
 8005808:	f001 fbf2 	bl	8006ff0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800580c:	e00e      	b.n	800582c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	b25b      	sxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	da0c      	bge.n	8005830 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <_HandleIncomingPacket+0xd8>)
 8005818:	7e1b      	ldrb	r3, [r3, #24]
 800581a:	4618      	mov	r0, r3
 800581c:	1cfb      	adds	r3, r7, #3
 800581e:	2201      	movs	r2, #1
 8005820:	4619      	mov	r1, r3
 8005822:	f7ff fd97 	bl	8005354 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005826:	e003      	b.n	8005830 <_HandleIncomingPacket+0xcc>
      break;
 8005828:	bf00      	nop
 800582a:	e002      	b.n	8005832 <_HandleIncomingPacket+0xce>
      break;
 800582c:	bf00      	nop
 800582e:	e000      	b.n	8005832 <_HandleIncomingPacket+0xce>
      break;
 8005830:	bf00      	nop
    }
  }
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200143e4 	.word	0x200143e4

08005840 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	@ 0x30
 8005844:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005846:	2301      	movs	r3, #1
 8005848:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	3301      	adds	r3, #1
 800584e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005854:	4b32      	ldr	r3, [pc, #200]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	e00b      	b.n	8005874 <_TrySendOverflowPacket+0x34>
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005866:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	2b7f      	cmp	r3, #127	@ 0x7f
 8005878:	d8f0      	bhi.n	800585c <_TrySendOverflowPacket+0x1c>
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800588a:	4b26      	ldr	r3, [pc, #152]	@ (8005924 <_TrySendOverflowPacket+0xe4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005890:	4b23      	ldr	r3, [pc, #140]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	e00b      	b.n	80058bc <_TrySendOverflowPacket+0x7c>
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80058ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	09db      	lsrs	r3, r3, #7
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b7f      	cmp	r3, #127	@ 0x7f
 80058c0:	d8f0      	bhi.n	80058a4 <_TrySendOverflowPacket+0x64>
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	4618      	mov	r0, r3
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	f7fa fc94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058e8:	4603      	mov	r3, r0
 80058ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80058ec:	f7ff fb00 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80058fc:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	3b01      	subs	r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e004      	b.n	8005914 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800590a:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	3301      	adds	r3, #1
 8005910:	4a03      	ldr	r2, [pc, #12]	@ (8005920 <_TrySendOverflowPacket+0xe0>)
 8005912:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005914:	693b      	ldr	r3, [r7, #16]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3730      	adds	r7, #48	@ 0x30
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200143e4 	.word	0x200143e4
 8005924:	e0001004 	.word	0xe0001004

08005928 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	@ 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005934:	4b96      	ldr	r3, [pc, #600]	@ (8005b90 <_SendPacket+0x268>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d010      	beq.n	800595e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800593c:	4b94      	ldr	r3, [pc, #592]	@ (8005b90 <_SendPacket+0x268>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8130 	beq.w	8005ba6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005946:	4b92      	ldr	r3, [pc, #584]	@ (8005b90 <_SendPacket+0x268>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d109      	bne.n	8005962 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800594e:	f7ff ff77 	bl	8005840 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005952:	4b8f      	ldr	r3, [pc, #572]	@ (8005b90 <_SendPacket+0x268>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b01      	cmp	r3, #1
 8005958:	f040 8127 	bne.w	8005baa <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800595c:	e001      	b.n	8005962 <_SendPacket+0x3a>
    goto Send;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <_SendPacket+0x3c>
Send:
 8005962:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b1f      	cmp	r3, #31
 8005968:	d809      	bhi.n	800597e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800596a:	4b89      	ldr	r3, [pc, #548]	@ (8005b90 <_SendPacket+0x268>)
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 8118 	bne.w	8005bae <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b17      	cmp	r3, #23
 8005982:	d807      	bhi.n	8005994 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3b01      	subs	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e0c4      	b.n	8005b1e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b7f      	cmp	r3, #127	@ 0x7f
 80059a0:	d912      	bls.n	80059c8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	09da      	lsrs	r2, r3, #7
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	3a01      	subs	r2, #1
 80059ba:	60fa      	str	r2, [r7, #12]
 80059bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e006      	b.n	80059d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80059da:	d807      	bhi.n	80059ec <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3b01      	subs	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e098      	b.n	8005b1e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059f2:	d212      	bcs.n	8005a1a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	09da      	lsrs	r2, r3, #7
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	3a01      	subs	r2, #1
 8005a0c:	60fa      	str	r2, [r7, #12]
 8005a0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e081      	b.n	8005b1e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a20:	d21d      	bcs.n	8005a5e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0b9a      	lsrs	r2, r3, #14
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	09db      	lsrs	r3, r3, #7
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	60fa      	str	r2, [r7, #12]
 8005a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	3a01      	subs	r2, #1
 8005a50:	60fa      	str	r2, [r7, #12]
 8005a52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e05f      	b.n	8005b1e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a64:	d228      	bcs.n	8005ab8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0d5a      	lsrs	r2, r3, #21
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0b9b      	lsrs	r3, r3, #14
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	3a01      	subs	r2, #1
 8005a80:	60fa      	str	r2, [r7, #12]
 8005a82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	09db      	lsrs	r3, r3, #7
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	3a01      	subs	r2, #1
 8005a96:	60fa      	str	r2, [r7, #12]
 8005a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	60fa      	str	r2, [r7, #12]
 8005aac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e032      	b.n	8005b1e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0f1a      	lsrs	r2, r3, #28
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0d5b      	lsrs	r3, r3, #21
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	60fa      	str	r2, [r7, #12]
 8005ad4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0b9b      	lsrs	r3, r3, #14
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	60fa      	str	r2, [r7, #12]
 8005aea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	60fa      	str	r2, [r7, #12]
 8005b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	3a01      	subs	r2, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <_SendPacket+0x26c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b24:	4b1a      	ldr	r3, [pc, #104]	@ (8005b90 <_SendPacket+0x268>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	e00b      	b.n	8005b50 <_SendPacket+0x228>
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	09db      	lsrs	r3, r3, #7
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b54:	d8f0      	bhi.n	8005b38 <_SendPacket+0x210>
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005b66:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <_SendPacket+0x268>)
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	68f9      	ldr	r1, [r7, #12]
 8005b76:	f7fa fb4b 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b7a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b7c:	f7ff f9b8 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b86:	4a02      	ldr	r2, [pc, #8]	@ (8005b90 <_SendPacket+0x268>)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	60d3      	str	r3, [r2, #12]
 8005b8c:	e010      	b.n	8005bb0 <_SendPacket+0x288>
 8005b8e:	bf00      	nop
 8005b90:	200143e4 	.word	0x200143e4
 8005b94:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b98:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <_SendPacket+0x2d8>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	4b17      	ldr	r3, [pc, #92]	@ (8005c00 <_SendPacket+0x2d8>)
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e004      	b.n	8005bb0 <_SendPacket+0x288>
    goto SendDone;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <_SendPacket+0x288>
      goto SendDone;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <_SendPacket+0x288>
      goto SendDone;
 8005bae:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bb0:	4b13      	ldr	r3, [pc, #76]	@ (8005c00 <_SendPacket+0x2d8>)
 8005bb2:	7e1b      	ldrb	r3, [r3, #24]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4a13      	ldr	r2, [pc, #76]	@ (8005c04 <_SendPacket+0x2dc>)
 8005bb8:	460b      	mov	r3, r1
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	440b      	add	r3, r1
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	336c      	adds	r3, #108	@ 0x6c
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <_SendPacket+0x2d8>)
 8005bc8:	7e1b      	ldrb	r3, [r3, #24]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	490d      	ldr	r1, [pc, #52]	@ (8005c04 <_SendPacket+0x2dc>)
 8005bce:	4603      	mov	r3, r0
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4403      	add	r3, r0
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3370      	adds	r3, #112	@ 0x70
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d00b      	beq.n	8005bf8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005be0:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <_SendPacket+0x2d8>)
 8005be2:	789b      	ldrb	r3, [r3, #2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d107      	bne.n	8005bf8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <_SendPacket+0x2d8>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bee:	f7ff fdb9 	bl	8005764 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bf2:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <_SendPacket+0x2d8>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bf8:	bf00      	nop
 8005bfa:	3728      	adds	r7, #40	@ 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	200143e4 	.word	0x200143e4
 8005c04:	20012f24 	.word	0x20012f24

08005c08 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	2b80      	cmp	r3, #128	@ 0x80
 8005c20:	d80a      	bhi.n	8005c38 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	1c59      	adds	r1, r3, #1
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6051      	str	r1, [r2, #4]
 8005c2c:	78fa      	ldrb	r2, [r7, #3]
 8005c2e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b80      	cmp	r3, #128	@ 0x80
 8005c3e:	d15a      	bne.n	8005cf6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	e00b      	b.n	8005c7a <_StoreChar+0x72>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	09db      	lsrs	r3, r3, #7
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7e:	d8f0      	bhi.n	8005c62 <_StoreChar+0x5a>
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e00b      	b.n	8005cb2 <_StoreChar+0xaa>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	61f9      	str	r1, [r7, #28]
 8005ca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb6:	d8f0      	bhi.n	8005c9a <_StoreChar+0x92>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	61fa      	str	r2, [r7, #28]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	221a      	movs	r2, #26
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fe29 	bl	8005928 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fd36 	bl	800574c <_PreparePacket>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	3728      	adds	r7, #40	@ 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d12:	2301      	movs	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d16:	2301      	movs	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d1a:	e007      	b.n	8005d2c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	623b      	str	r3, [r7, #32]
    Width++;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d2f3      	bcs.n	8005d1c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d901      	bls.n	8005d40 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d000      	beq.n	8005d4c <_PrintUnsigned+0x4c>
 8005d4a:	e01f      	b.n	8005d8c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01c      	beq.n	8005d8c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <_PrintUnsigned+0x68>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <_PrintUnsigned+0x68>
        c = '0';
 8005d62:	2330      	movs	r3, #48	@ 0x30
 8005d64:	76fb      	strb	r3, [r7, #27]
 8005d66:	e001      	b.n	8005d6c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005d68:	2320      	movs	r3, #32
 8005d6a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d6c:	e007      	b.n	8005d7e <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	3b01      	subs	r3, #1
 8005d72:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005d74:	7efb      	ldrb	r3, [r7, #27]
 8005d76:	4619      	mov	r1, r3
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff ff45 	bl	8005c08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <_PrintUnsigned+0x8c>
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3f0      	bcc.n	8005d6e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d903      	bls.n	8005d9a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	e009      	b.n	8005dae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d200      	bcs.n	8005dae <_PrintUnsigned+0xae>
        break;
 8005dac:	e005      	b.n	8005dba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005db8:	e7e8      	b.n	8005d8c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005dd2:	4a15      	ldr	r2, [pc, #84]	@ (8005e28 <_PrintUnsigned+0x128>)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff ff13 	bl	8005c08 <_StoreChar>
    Digit /= Base;
 8005de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e02:	e006      	b.n	8005e12 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	3b01      	subs	r3, #1
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fefb 	bl	8005c08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <_PrintUnsigned+0x120>
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f1      	bcc.n	8005e04 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	3728      	adds	r7, #40	@ 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	08007e18 	.word	0x08007e18

08005e2c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bfb8      	it	lt
 8005e40:	425b      	neglt	r3, r3
 8005e42:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e48:	e007      	b.n	8005e5a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e52:	613b      	str	r3, [r7, #16]
    Width++;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	3301      	adds	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	daf3      	bge.n	8005e4a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d901      	bls.n	8005e6e <_PrintInt+0x42>
    Width = NumDigits;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <_PrintInt+0x5e>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db04      	blt.n	8005e84 <_PrintInt+0x58>
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <_PrintInt+0x5e>
    FieldWidth--;
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <_PrintInt+0x6e>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <_PrintInt+0x9c>
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005eaa:	e006      	b.n	8005eba <_PrintInt+0x8e>
        FieldWidth--;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005eb2:	2120      	movs	r1, #32
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff fea7 	bl	8005c08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <_PrintInt+0x9c>
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3f1      	bcc.n	8005eac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da07      	bge.n	8005ede <_PrintInt+0xb2>
    v = -v;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ed4:	212d      	movs	r1, #45	@ 0x2d
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff fe96 	bl	8005c08 <_StoreChar>
 8005edc:	e008      	b.n	8005ef0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ee8:	212b      	movs	r1, #43	@ 0x2b
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff fe8c 	bl	8005c08 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d019      	beq.n	8005f2e <_PrintInt+0x102>
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d114      	bne.n	8005f2e <_PrintInt+0x102>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d111      	bne.n	8005f2e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f10:	e006      	b.n	8005f20 <_PrintInt+0xf4>
        FieldWidth--;
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005f18:	2130      	movs	r1, #48	@ 0x30
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fe74 	bl	8005c08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <_PrintInt+0x102>
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d3f1      	bcc.n	8005f12 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fedf 	bl	8005d00 <_PrintUnsigned>
}
 8005f42:	bf00      	nop
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b098      	sub	sp, #96	@ 0x60
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f58:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5c:	f04f 0120 	mov.w	r1, #32
 8005f60:	f381 8811 	msr	BASEPRI, r1
 8005f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f66:	48b7      	ldr	r0, [pc, #732]	@ (8006244 <_VPrintTarget+0x2f8>)
 8005f68:	f7ff fbf0 	bl	800574c <_PreparePacket>
 8005f6c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005f6e:	4bb5      	ldr	r3, [pc, #724]	@ (8006244 <_VPrintTarget+0x2f8>)
 8005f70:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005f72:	2300      	movs	r3, #0
 8005f74:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005f92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 81a8 	beq.w	80062ec <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fa0:	2b25      	cmp	r3, #37	@ 0x25
 8005fa2:	f040 8195 	bne.w	80062d0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005faa:	2301      	movs	r3, #1
 8005fac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fba:	3b23      	subs	r3, #35	@ 0x23
 8005fbc:	2b0d      	cmp	r3, #13
 8005fbe:	d83f      	bhi.n	8006040 <_VPrintTarget+0xf4>
 8005fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <_VPrintTarget+0x7c>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08006041 	.word	0x08006041
 8005fd0:	08006041 	.word	0x08006041
 8005fd4:	08006041 	.word	0x08006041
 8005fd8:	08006041 	.word	0x08006041
 8005fdc:	08006041 	.word	0x08006041
 8005fe0:	08006041 	.word	0x08006041
 8005fe4:	08006041 	.word	0x08006041
 8005fe8:	08006021 	.word	0x08006021
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006041 	.word	0x08006041
 8005ff8:	08006041 	.word	0x08006041
 8005ffc:	08006011 	.word	0x08006011
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e01a      	b.n	8006046 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006012:	f043 0302 	orr.w	r3, r3, #2
 8006016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e012      	b.n	8006046 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006022:	f043 0304 	orr.w	r3, r3, #4
 8006026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e00a      	b.n	8006046 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006032:	f043 0308 	orr.w	r3, r3, #8
 8006036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e002      	b.n	8006046 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006040:	2300      	movs	r3, #0
 8006042:	653b      	str	r3, [r7, #80]	@ 0x50
 8006044:	bf00      	nop
        }
      } while (v);
 8006046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1b0      	bne.n	8005fae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800604c:	2300      	movs	r3, #0
 800604e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006058:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800605c:	2b2f      	cmp	r3, #47	@ 0x2f
 800605e:	d912      	bls.n	8006086 <_VPrintTarget+0x13a>
 8006060:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006064:	2b39      	cmp	r3, #57	@ 0x39
 8006066:	d80e      	bhi.n	8006086 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800606e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	461a      	mov	r2, r3
 800607a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800607e:	4413      	add	r3, r2
 8006080:	3b30      	subs	r3, #48	@ 0x30
 8006082:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006084:	e7e4      	b.n	8006050 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006086:	2300      	movs	r3, #0
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006092:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006096:	2b2e      	cmp	r3, #46	@ 0x2e
 8006098:	d11d      	bne.n	80060d6 <_VPrintTarget+0x18a>
        sFormat++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3301      	adds	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80060a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80060ae:	d912      	bls.n	80060d6 <_VPrintTarget+0x18a>
 80060b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060b4:	2b39      	cmp	r3, #57	@ 0x39
 80060b6:	d80e      	bhi.n	80060d6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80060be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	461a      	mov	r2, r3
 80060ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ce:	4413      	add	r3, r2
 80060d0:	3b30      	subs	r3, #48	@ 0x30
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80060d4:	e7e4      	b.n	80060a0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80060de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060e2:	2b6c      	cmp	r3, #108	@ 0x6c
 80060e4:	d003      	beq.n	80060ee <_VPrintTarget+0x1a2>
 80060e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ea:	2b68      	cmp	r3, #104	@ 0x68
 80060ec:	d107      	bne.n	80060fe <_VPrintTarget+0x1b2>
          c = *sFormat;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80060fc:	e7ef      	b.n	80060de <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80060fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006102:	2b25      	cmp	r3, #37	@ 0x25
 8006104:	f000 80d8 	beq.w	80062b8 <_VPrintTarget+0x36c>
 8006108:	2b25      	cmp	r3, #37	@ 0x25
 800610a:	f2c0 80dc 	blt.w	80062c6 <_VPrintTarget+0x37a>
 800610e:	2b78      	cmp	r3, #120	@ 0x78
 8006110:	f300 80d9 	bgt.w	80062c6 <_VPrintTarget+0x37a>
 8006114:	2b58      	cmp	r3, #88	@ 0x58
 8006116:	f2c0 80d6 	blt.w	80062c6 <_VPrintTarget+0x37a>
 800611a:	3b58      	subs	r3, #88	@ 0x58
 800611c:	2b20      	cmp	r3, #32
 800611e:	f200 80d2 	bhi.w	80062c6 <_VPrintTarget+0x37a>
 8006122:	a201      	add	r2, pc, #4	@ (adr r2, 8006128 <_VPrintTarget+0x1dc>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	0800621f 	.word	0x0800621f
 800612c:	080062c7 	.word	0x080062c7
 8006130:	080062c7 	.word	0x080062c7
 8006134:	080062c7 	.word	0x080062c7
 8006138:	080062c7 	.word	0x080062c7
 800613c:	080062c7 	.word	0x080062c7
 8006140:	080062c7 	.word	0x080062c7
 8006144:	080062c7 	.word	0x080062c7
 8006148:	080062c7 	.word	0x080062c7
 800614c:	080062c7 	.word	0x080062c7
 8006150:	080062c7 	.word	0x080062c7
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061d3 	.word	0x080061d3
 800615c:	080062c7 	.word	0x080062c7
 8006160:	080062c7 	.word	0x080062c7
 8006164:	080062c7 	.word	0x080062c7
 8006168:	080062c7 	.word	0x080062c7
 800616c:	080062c7 	.word	0x080062c7
 8006170:	080062c7 	.word	0x080062c7
 8006174:	080062c7 	.word	0x080062c7
 8006178:	080062c7 	.word	0x080062c7
 800617c:	080062c7 	.word	0x080062c7
 8006180:	080062c7 	.word	0x080062c7
 8006184:	080062c7 	.word	0x080062c7
 8006188:	08006293 	.word	0x08006293
 800618c:	080062c7 	.word	0x080062c7
 8006190:	080062c7 	.word	0x080062c7
 8006194:	08006249 	.word	0x08006249
 8006198:	080062c7 	.word	0x080062c7
 800619c:	080061f9 	.word	0x080061f9
 80061a0:	080062c7 	.word	0x080062c7
 80061a4:	080062c7 	.word	0x080062c7
 80061a8:	0800621f 	.word	0x0800621f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1d19      	adds	r1, r3, #4
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6011      	str	r1, [r2, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80061ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80061c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80061c4:	f107 0310 	add.w	r3, r7, #16
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fd1c 	bl	8005c08 <_StoreChar>
        break;
 80061d0:	e07a      	b.n	80062c8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061e0:	f107 0010 	add.w	r0, r7, #16
 80061e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ee:	220a      	movs	r2, #10
 80061f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061f2:	f7ff fe1b 	bl	8005e2c <_PrintInt>
        break;
 80061f6:	e067      	b.n	80062c8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	1d19      	adds	r1, r3, #4
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6011      	str	r1, [r2, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006206:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006208:	f107 0010 	add.w	r0, r7, #16
 800620c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006216:	220a      	movs	r2, #10
 8006218:	f7ff fd72 	bl	8005d00 <_PrintUnsigned>
        break;
 800621c:	e054      	b.n	80062c8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	1d19      	adds	r1, r3, #4
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6011      	str	r1, [r2, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800622c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800622e:	f107 0010 	add.w	r0, r7, #16
 8006232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	2210      	movs	r2, #16
 800623e:	f7ff fd5f 	bl	8005d00 <_PrintUnsigned>
        break;
 8006242:	e041      	b.n	80062c8 <_VPrintTarget+0x37c>
 8006244:	20014414 	.word	0x20014414
      case 's':
        s = va_arg(*pParamList, const char*);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6011      	str	r1, [r2, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <_VPrintTarget+0x314>
          s = "(null)";
 800625c:	4b4a      	ldr	r3, [pc, #296]	@ (8006388 <_VPrintTarget+0x43c>)
 800625e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626a:	3301      	adds	r3, #1
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800626e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006276:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800627a:	f107 0310 	add.w	r3, r7, #16
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fcc1 	bl	8005c08 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	2b7f      	cmp	r3, #127	@ 0x7f
 800628a:	d9e9      	bls.n	8006260 <_VPrintTarget+0x314>
        break;
 800628c:	e01c      	b.n	80062c8 <_VPrintTarget+0x37c>
            break;
 800628e:	bf00      	nop
        break;
 8006290:	e01a      	b.n	80062c8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	1d19      	adds	r1, r3, #4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6011      	str	r1, [r2, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80062a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062a2:	f107 0010 	add.w	r0, r7, #16
 80062a6:	2300      	movs	r3, #0
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	2308      	movs	r3, #8
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2308      	movs	r3, #8
 80062b0:	2210      	movs	r2, #16
 80062b2:	f7ff fd25 	bl	8005d00 <_PrintUnsigned>
        break;
 80062b6:	e007      	b.n	80062c8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	2125      	movs	r1, #37	@ 0x25
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fca2 	bl	8005c08 <_StoreChar>
        break;
 80062c4:	e000      	b.n	80062c8 <_VPrintTarget+0x37c>
      default:
        break;
 80062c6:	bf00      	nop
      }
      sFormat++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e007      	b.n	80062e0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80062d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fc94 	bl	8005c08 <_StoreChar>
    }
  } while (*sFormat);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f ae4d 	bne.w	8005f84 <_VPrintTarget+0x38>
 80062ea:	e000      	b.n	80062ee <_VPrintTarget+0x3a2>
      break;
 80062ec:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d041      	beq.n	8006378 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006304:	e00b      	b.n	800631e <_VPrintTarget+0x3d2>
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630c:	1c59      	adds	r1, r3, #1
 800630e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006310:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	09db      	lsrs	r3, r3, #7
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	2b7f      	cmp	r3, #127	@ 0x7f
 8006322:	d8f0      	bhi.n	8006306 <_VPrintTarget+0x3ba>
 8006324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800632a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006332:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	637b      	str	r3, [r7, #52]	@ 0x34
 8006338:	2300      	movs	r3, #0
 800633a:	633b      	str	r3, [r7, #48]	@ 0x30
 800633c:	e00b      	b.n	8006356 <_VPrintTarget+0x40a>
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006344:	1c59      	adds	r1, r3, #1
 8006346:	6379      	str	r1, [r7, #52]	@ 0x34
 8006348:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2b7f      	cmp	r3, #127	@ 0x7f
 800635a:	d8f0      	bhi.n	800633e <_VPrintTarget+0x3f2>
 800635c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	637a      	str	r2, [r7, #52]	@ 0x34
 8006362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	221a      	movs	r2, #26
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fad8 	bl	8005928 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800637e:	bf00      	nop
 8006380:	3758      	adds	r7, #88	@ 0x58
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	08007dc4 	.word	0x08007dc4

0800638c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800639a:	2300      	movs	r3, #0
 800639c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063a0:	4917      	ldr	r1, [pc, #92]	@ (8006400 <SEGGER_SYSVIEW_Init+0x74>)
 80063a2:	4818      	ldr	r0, [pc, #96]	@ (8006404 <SEGGER_SYSVIEW_Init+0x78>)
 80063a4:	f7ff f8d2 	bl	800554c <SEGGER_RTT_AllocUpBuffer>
 80063a8:	4603      	mov	r3, r0
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	4b16      	ldr	r3, [pc, #88]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063b0:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063b2:	785a      	ldrb	r2, [r3, #1]
 80063b4:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063b8:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ba:	7e1b      	ldrb	r3, [r3, #24]
 80063bc:	4618      	mov	r0, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2308      	movs	r3, #8
 80063c4:	4a11      	ldr	r2, [pc, #68]	@ (800640c <SEGGER_SYSVIEW_Init+0x80>)
 80063c6:	490f      	ldr	r1, [pc, #60]	@ (8006404 <SEGGER_SYSVIEW_Init+0x78>)
 80063c8:	f7ff f944 	bl	8005654 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80063cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <SEGGER_SYSVIEW_Init+0x84>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80063da:	4a0b      	ldr	r2, [pc, #44]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80063e0:	4a09      	ldr	r2, [pc, #36]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80063e6:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80063ec:	4a06      	ldr	r2, [pc, #24]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80063f2:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200133dc 	.word	0x200133dc
 8006404:	08007dcc 	.word	0x08007dcc
 8006408:	200143e4 	.word	0x200143e4
 800640c:	200143dc 	.word	0x200143dc
 8006410:	e0001004 	.word	0xe0001004

08006414 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800641c:	4a04      	ldr	r2, [pc, #16]	@ (8006430 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6113      	str	r3, [r2, #16]
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200143e4 	.word	0x200143e4

08006434 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800643c:	f3ef 8311 	mrs	r3, BASEPRI
 8006440:	f04f 0120 	mov.w	r1, #32
 8006444:	f381 8811 	msr	BASEPRI, r1
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	4808      	ldr	r0, [pc, #32]	@ (800646c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800644c:	f7ff f97e 	bl	800574c <_PreparePacket>
 8006450:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	68b8      	ldr	r0, [r7, #8]
 8006458:	f7ff fa66 	bl	8005928 <_SendPacket>
  RECORD_END();
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f383 8811 	msr	BASEPRI, r3
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20014414 	.word	0x20014414

08006470 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	f04f 0120 	mov.w	r1, #32
 8006482:	f381 8811 	msr	BASEPRI, r1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	4816      	ldr	r0, [pc, #88]	@ (80064e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800648a:	f7ff f95f 	bl	800574c <_PreparePacket>
 800648e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	e00b      	b.n	80064b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	61f9      	str	r1, [r7, #28]
 80064a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	09db      	lsrs	r3, r3, #7
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ba:	d8f0      	bhi.n	800649e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	61fa      	str	r2, [r7, #28]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6938      	ldr	r0, [r7, #16]
 80064d2:	f7ff fa29 	bl	8005928 <_SendPacket>
  RECORD_END();
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f383 8811 	msr	BASEPRI, r3
}
 80064dc:	bf00      	nop
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20014414 	.word	0x20014414

080064e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	@ 0x30
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064f4:	f3ef 8311 	mrs	r3, BASEPRI
 80064f8:	f04f 0120 	mov.w	r1, #32
 80064fc:	f381 8811 	msr	BASEPRI, r1
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	4825      	ldr	r0, [pc, #148]	@ (8006598 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006504:	f7ff f922 	bl	800574c <_PreparePacket>
 8006508:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006516:	e00b      	b.n	8006530 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006522:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	09db      	lsrs	r3, r3, #7
 800652e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	2b7f      	cmp	r3, #127	@ 0x7f
 8006534:	d8f0      	bhi.n	8006518 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800653c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	e00b      	b.n	8006568 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	6279      	str	r1, [r7, #36]	@ 0x24
 800655a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	09db      	lsrs	r3, r3, #7
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b7f      	cmp	r3, #127	@ 0x7f
 800656c:	d8f0      	bhi.n	8006550 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	627a      	str	r2, [r7, #36]	@ 0x24
 8006574:	6a3a      	ldr	r2, [r7, #32]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	6979      	ldr	r1, [r7, #20]
 8006582:	69b8      	ldr	r0, [r7, #24]
 8006584:	f7ff f9d0 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
 8006590:	3730      	adds	r7, #48	@ 0x30
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20014414 	.word	0x20014414

0800659c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	@ 0x30
 80065a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80065a2:	4b59      	ldr	r3, [pc, #356]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80065a8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ac:	f04f 0120 	mov.w	r1, #32
 80065b0:	f381 8811 	msr	BASEPRI, r1
 80065b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80065b6:	4b54      	ldr	r3, [pc, #336]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	220a      	movs	r2, #10
 80065bc:	4953      	ldr	r1, [pc, #332]	@ (800670c <SEGGER_SYSVIEW_Start+0x170>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 fe26 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80065ca:	f7fe fc91 	bl	8004ef0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80065ce:	200a      	movs	r0, #10
 80065d0:	f7ff ff30 	bl	8006434 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065d4:	f3ef 8311 	mrs	r3, BASEPRI
 80065d8:	f04f 0120 	mov.w	r1, #32
 80065dc:	f381 8811 	msr	BASEPRI, r1
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	484b      	ldr	r0, [pc, #300]	@ (8006710 <SEGGER_SYSVIEW_Start+0x174>)
 80065e4:	f7ff f8b2 	bl	800574c <_PreparePacket>
 80065e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f2:	4b45      	ldr	r3, [pc, #276]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_Start+0x76>
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006604:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	2b7f      	cmp	r3, #127	@ 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_Start+0x5e>
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800661e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
 800662c:	4b36      	ldr	r3, [pc, #216]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	623b      	str	r3, [r7, #32]
 8006632:	e00b      	b.n	800664c <SEGGER_SYSVIEW_Start+0xb0>
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	6279      	str	r1, [r7, #36]	@ 0x24
 800663e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	09db      	lsrs	r3, r3, #7
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006650:	d8f0      	bhi.n	8006634 <SEGGER_SYSVIEW_Start+0x98>
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	627a      	str	r2, [r7, #36]	@ 0x24
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	4b28      	ldr	r3, [pc, #160]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	e00b      	b.n	8006686 <SEGGER_SYSVIEW_Start+0xea>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	b2da      	uxtb	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	61f9      	str	r1, [r7, #28]
 8006678:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b7f      	cmp	r3, #127	@ 0x7f
 800668a:	d8f0      	bhi.n	800666e <SEGGER_SYSVIEW_Start+0xd2>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	61fa      	str	r2, [r7, #28]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_Start+0x122>
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	6179      	str	r1, [r7, #20]
 80066b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_Start+0x10a>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	617a      	str	r2, [r7, #20]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066d4:	2218      	movs	r2, #24
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff f925 	bl	8005928 <_SendPacket>
      RECORD_END();
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066e4:	4b08      	ldr	r3, [pc, #32]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80066ec:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <SEGGER_SYSVIEW_Start+0x16c>)
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80066f2:	f000 f9eb 	bl	8006acc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80066f6:	f000 f9b1 	bl	8006a5c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80066fa:	f000 fd21 	bl	8007140 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80066fe:	bf00      	nop
 8006700:	3730      	adds	r7, #48	@ 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200143e4 	.word	0x200143e4
 800670c:	08007e0c 	.word	0x08007e0c
 8006710:	20014414 	.word	0x20014414

08006714 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
 800671e:	f04f 0120 	mov.w	r1, #32
 8006722:	f381 8811 	msr	BASEPRI, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	480b      	ldr	r0, [pc, #44]	@ (8006758 <SEGGER_SYSVIEW_Stop+0x44>)
 800672a:	f7ff f80f 	bl	800574c <_PreparePacket>
 800672e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <SEGGER_SYSVIEW_Stop+0x48>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006738:	220b      	movs	r2, #11
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6838      	ldr	r0, [r7, #0]
 800673e:	f7ff f8f3 	bl	8005928 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006742:	4b06      	ldr	r3, [pc, #24]	@ (800675c <SEGGER_SYSVIEW_Stop+0x48>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20014414 	.word	0x20014414
 800675c:	200143e4 	.word	0x200143e4

08006760 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	@ 0x30
 8006764:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006766:	f3ef 8311 	mrs	r3, BASEPRI
 800676a:	f04f 0120 	mov.w	r1, #32
 800676e:	f381 8811 	msr	BASEPRI, r1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	4845      	ldr	r0, [pc, #276]	@ (800688c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006776:	f7fe ffe9 	bl	800574c <_PreparePacket>
 800677a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006784:	4b42      	ldr	r3, [pc, #264]	@ (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006796:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80067aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80067be:	4b34      	ldr	r3, [pc, #208]	@ (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80067d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	61f9      	str	r1, [r7, #28]
 800680a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b7f      	cmp	r3, #127	@ 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	61fa      	str	r2, [r7, #28]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	e00b      	b.n	8006850 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	6179      	str	r1, [r7, #20]
 8006842:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b7f      	cmp	r3, #127	@ 0x7f
 8006854:	d8f0      	bhi.n	8006838 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	617a      	str	r2, [r7, #20]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006866:	2218      	movs	r2, #24
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f7ff f85c 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006876:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800687e:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	4798      	blx	r3
  }
}
 8006884:	bf00      	nop
 8006886:	3730      	adds	r7, #48	@ 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20014414 	.word	0x20014414
 8006890:	200143e4 	.word	0x200143e4

08006894 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	@ 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	f04f 0120 	mov.w	r1, #32
 80068a4:	f381 8811 	msr	BASEPRI, r1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	486a      	ldr	r0, [pc, #424]	@ (8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80068ac:	f7fe ff4e 	bl	800574c <_PreparePacket>
 80068b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b66      	ldr	r3, [pc, #408]	@ (8006a58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c6:	e00b      	b.n	80068e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80068c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	6479      	str	r1, [r7, #68]	@ 0x44
 80068d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068dc:	09db      	lsrs	r3, r3, #7
 80068de:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80068e4:	d8f0      	bhi.n	80068c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80068e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80068ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006900:	e00b      	b.n	800691a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800690c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	63bb      	str	r3, [r7, #56]	@ 0x38
 800691a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691c:	2b7f      	cmp	r3, #127	@ 0x7f
 800691e:	d8f0      	bhi.n	8006902 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006926:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7fe fed7 	bl	80056ec <_EncodeStr>
 800693e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006940:	2209      	movs	r2, #9
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6938      	ldr	r0, [r7, #16]
 8006946:	f7fe ffef 	bl	8005928 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b40      	ldr	r3, [pc, #256]	@ (8006a58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	633b      	str	r3, [r7, #48]	@ 0x30
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	b2da      	uxtb	r2, r3
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	6379      	str	r1, [r7, #52]	@ 0x34
 800696a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2b7f      	cmp	r3, #127	@ 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	637a      	str	r2, [r7, #52]	@ 0x34
 8006984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006998:	e00b      	b.n	80069b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80069a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069b6:	d8f0      	bhi.n	800699a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80069de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e00b      	b.n	8006a26 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	61f9      	str	r1, [r7, #28]
 8006a18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	09db      	lsrs	r3, r3, #7
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a2a:	d8f0      	bhi.n	8006a0e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	61fa      	str	r2, [r7, #28]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006a3c:	2215      	movs	r2, #21
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	6938      	ldr	r0, [r7, #16]
 8006a42:	f7fe ff71 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f383 8811 	msr	BASEPRI, r3
}
 8006a4c:	bf00      	nop
 8006a4e:	3748      	adds	r7, #72	@ 0x48
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20014414 	.word	0x20014414
 8006a58:	200143e4 	.word	0x200143e4

08006a5c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a60:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a72:	4b03      	ldr	r3, [pc, #12]	@ (8006a80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	4798      	blx	r3
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200143e4 	.word	0x200143e4

08006a84 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a90:	f04f 0120 	mov.w	r1, #32
 8006a94:	f381 8811 	msr	BASEPRI, r1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	480b      	ldr	r0, [pc, #44]	@ (8006ac8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a9c:	f7fe fe56 	bl	800574c <_PreparePacket>
 8006aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aa2:	2280      	movs	r2, #128	@ 0x80
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	f7fe fe20 	bl	80056ec <_EncodeStr>
 8006aac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006aae:	220e      	movs	r2, #14
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f7fe ff38 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20014414 	.word	0x20014414

08006acc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ad2:	4b15      	ldr	r3, [pc, #84]	@ (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01a      	beq.n	8006b10 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006ada:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d015      	beq.n	8006b10 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ae4:	4b10      	ldr	r3, [pc, #64]	@ (8006b28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4798      	blx	r3
 8006aec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006af0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	000a      	movs	r2, r1
 8006b00:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b02:	4613      	mov	r3, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4621      	mov	r1, r4
 8006b08:	200d      	movs	r0, #13
 8006b0a:	f7ff fced 	bl	80064e8 <SEGGER_SYSVIEW_RecordU32x2>
 8006b0e:	e006      	b.n	8006b1e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b10:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4619      	mov	r1, r3
 8006b16:	200c      	movs	r0, #12
 8006b18:	f7ff fcaa 	bl	8006470 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200143e4 	.word	0x200143e4
 8006b2c:	e0001004 	.word	0xe0001004

08006b30 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	4819      	ldr	r0, [pc, #100]	@ (8006bac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006b46:	f7fe fe01 	bl	800574c <_PreparePacket>
 8006b4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006b50:	4b17      	ldr	r3, [pc, #92]	@ (8006bb0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b58:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	e00b      	b.n	8006b7c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1c59      	adds	r1, r3, #1
 8006b6c:	6179      	str	r1, [r7, #20]
 8006b6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b80:	d8f0      	bhi.n	8006b64 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	617a      	str	r2, [r7, #20]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b92:	2202      	movs	r2, #2
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	68b8      	ldr	r0, [r7, #8]
 8006b98:	f7fe fec6 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f383 8811 	msr	BASEPRI, r3
}
 8006ba2:	bf00      	nop
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20014414 	.word	0x20014414
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bba:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbe:	f04f 0120 	mov.w	r1, #32
 8006bc2:	f381 8811 	msr	BASEPRI, r1
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	4807      	ldr	r0, [pc, #28]	@ (8006be8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006bca:	f7fe fdbf 	bl	800574c <_PreparePacket>
 8006bce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6838      	ldr	r0, [r7, #0]
 8006bd6:	f7fe fea7 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f383 8811 	msr	BASEPRI, r3
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20014414 	.word	0x20014414

08006bec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	f04f 0120 	mov.w	r1, #32
 8006bfa:	f381 8811 	msr	BASEPRI, r1
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	4807      	ldr	r0, [pc, #28]	@ (8006c20 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c02:	f7fe fda3 	bl	800574c <_PreparePacket>
 8006c06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c08:	2212      	movs	r2, #18
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6838      	ldr	r0, [r7, #0]
 8006c0e:	f7fe fe8b 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f383 8811 	msr	BASEPRI, r3
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20014414 	.word	0x20014414

08006c24 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	f04f 0120 	mov.w	r1, #32
 8006c34:	f381 8811 	msr	BASEPRI, r1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4817      	ldr	r0, [pc, #92]	@ (8006c98 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006c3c:	f7fe fd86 	bl	800574c <_PreparePacket>
 8006c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e00b      	b.n	8006c68 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	61f9      	str	r1, [r7, #28]
 8006c5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	09db      	lsrs	r3, r3, #7
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c6c:	d8f0      	bhi.n	8006c50 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	61fa      	str	r2, [r7, #28]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006c7e:	221c      	movs	r2, #28
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	6938      	ldr	r0, [r7, #16]
 8006c84:	f7fe fe50 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
}
 8006c8e:	bf00      	nop
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20014414 	.word	0x20014414

08006c9c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	@ 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8006caa:	f04f 0120 	mov.w	r1, #32
 8006cae:	f381 8811 	msr	BASEPRI, r1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	4824      	ldr	r0, [pc, #144]	@ (8006d48 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006cb6:	f7fe fd49 	bl	800574c <_PreparePacket>
 8006cba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	623b      	str	r3, [r7, #32]
 8006cc8:	e00b      	b.n	8006ce2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	1c59      	adds	r1, r3, #1
 8006cd2:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	09db      	lsrs	r3, r3, #7
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce6:	d8f0      	bhi.n	8006cca <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cee:	6a3a      	ldr	r2, [r7, #32]
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	e00b      	b.n	8006d1a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	1c59      	adds	r1, r3, #1
 8006d0a:	61f9      	str	r1, [r7, #28]
 8006d0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	09db      	lsrs	r3, r3, #7
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d1e:	d8f0      	bhi.n	8006d02 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	61fa      	str	r2, [r7, #28]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006d30:	221c      	movs	r2, #28
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	6938      	ldr	r0, [r7, #16]
 8006d36:	f7fe fdf7 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f383 8811 	msr	BASEPRI, r3
}
 8006d40:	bf00      	nop
 8006d42:	3728      	adds	r7, #40	@ 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20014414 	.word	0x20014414

08006d4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d52:	f3ef 8311 	mrs	r3, BASEPRI
 8006d56:	f04f 0120 	mov.w	r1, #32
 8006d5a:	f381 8811 	msr	BASEPRI, r1
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	4807      	ldr	r0, [pc, #28]	@ (8006d80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d62:	f7fe fcf3 	bl	800574c <_PreparePacket>
 8006d66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d68:	2211      	movs	r2, #17
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f7fe fddb 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f383 8811 	msr	BASEPRI, r3
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20014414 	.word	0x20014414

08006d84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d90:	f04f 0120 	mov.w	r1, #32
 8006d94:	f381 8811 	msr	BASEPRI, r1
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	4819      	ldr	r0, [pc, #100]	@ (8006e00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d9c:	f7fe fcd6 	bl	800574c <_PreparePacket>
 8006da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006da6:	4b17      	ldr	r3, [pc, #92]	@ (8006e04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	e00b      	b.n	8006dd2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	1c59      	adds	r1, r3, #1
 8006dc2:	61f9      	str	r1, [r7, #28]
 8006dc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	09db      	lsrs	r3, r3, #7
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd6:	d8f0      	bhi.n	8006dba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	61fa      	str	r2, [r7, #28]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006de8:	2208      	movs	r2, #8
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	6938      	ldr	r0, [r7, #16]
 8006dee:	f7fe fd9b 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f383 8811 	msr	BASEPRI, r3
}
 8006df8:	bf00      	nop
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20014414 	.word	0x20014414
 8006e04:	200143e4 	.word	0x200143e4

08006e08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e10:	f3ef 8311 	mrs	r3, BASEPRI
 8006e14:	f04f 0120 	mov.w	r1, #32
 8006e18:	f381 8811 	msr	BASEPRI, r1
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	4819      	ldr	r0, [pc, #100]	@ (8006e84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e20:	f7fe fc94 	bl	800574c <_PreparePacket>
 8006e24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e2a:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e00b      	b.n	8006e56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	61f9      	str	r1, [r7, #28]
 8006e48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	09db      	lsrs	r3, r3, #7
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e5a:	d8f0      	bhi.n	8006e3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	61fa      	str	r2, [r7, #28]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6938      	ldr	r0, [r7, #16]
 8006e72:	f7fe fd59 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f383 8811 	msr	BASEPRI, r3
}
 8006e7c:	bf00      	nop
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20014414 	.word	0x20014414
 8006e88:	200143e4 	.word	0x200143e4

08006e8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e94:	f3ef 8311 	mrs	r3, BASEPRI
 8006e98:	f04f 0120 	mov.w	r1, #32
 8006e9c:	f381 8811 	msr	BASEPRI, r1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	4819      	ldr	r0, [pc, #100]	@ (8006f08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ea4:	f7fe fc52 	bl	800574c <_PreparePacket>
 8006ea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eae:	4b17      	ldr	r3, [pc, #92]	@ (8006f0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	61bb      	str	r3, [r7, #24]
 8006ec0:	e00b      	b.n	8006eda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	61f9      	str	r1, [r7, #28]
 8006ecc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	09db      	lsrs	r3, r3, #7
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ede:	d8f0      	bhi.n	8006ec2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	68f9      	ldr	r1, [r7, #12]
 8006ef4:	6938      	ldr	r0, [r7, #16]
 8006ef6:	f7fe fd17 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f383 8811 	msr	BASEPRI, r3
}
 8006f00:	bf00      	nop
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20014414 	.word	0x20014414
 8006f0c:	200143e4 	.word	0x200143e4

08006f10 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	@ 0x28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f1e:	f04f 0120 	mov.w	r1, #32
 8006f22:	f381 8811 	msr	BASEPRI, r1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	4827      	ldr	r0, [pc, #156]	@ (8006fc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f2a:	f7fe fc0f 	bl	800574c <_PreparePacket>
 8006f2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f34:	4b25      	ldr	r3, [pc, #148]	@ (8006fcc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	e00b      	b.n	8006f60 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	09db      	lsrs	r3, r3, #7
 8006f5e:	623b      	str	r3, [r7, #32]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f64:	d8f0      	bhi.n	8006f48 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e00b      	b.n	8006f98 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	61f9      	str	r1, [r7, #28]
 8006f8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	09db      	lsrs	r3, r3, #7
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f9c:	d8f0      	bhi.n	8006f80 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	61fa      	str	r2, [r7, #28]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006fae:	2207      	movs	r2, #7
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	6938      	ldr	r0, [r7, #16]
 8006fb4:	f7fe fcb8 	bl	8005928 <_SendPacket>
  RECORD_END();
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f383 8811 	msr	BASEPRI, r3
}
 8006fbe:	bf00      	nop
 8006fc0:	3728      	adds	r7, #40	@ 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20014414 	.word	0x20014414
 8006fcc:	200143e4 	.word	0x200143e4

08006fd0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	1ad3      	subs	r3, r2, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	200143e4 	.word	0x200143e4

08006ff0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08c      	sub	sp, #48	@ 0x30
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ffa:	4b40      	ldr	r3, [pc, #256]	@ (80070fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d077      	beq.n	80070f2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007002:	4b3e      	ldr	r3, [pc, #248]	@ (80070fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007008:	2300      	movs	r3, #0
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700c:	e008      	b.n	8007020 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	3301      	adds	r3, #1
 800701e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007024:	429a      	cmp	r2, r3
 8007026:	d3f2      	bcc.n	800700e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007028:	e000      	b.n	800702c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800702a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d055      	beq.n	80070de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007032:	f3ef 8311 	mrs	r3, BASEPRI
 8007036:	f04f 0120 	mov.w	r1, #32
 800703a:	f381 8811 	msr	BASEPRI, r1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	482f      	ldr	r0, [pc, #188]	@ (8007100 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007042:	f7fe fb83 	bl	800574c <_PreparePacket>
 8007046:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	623b      	str	r3, [r7, #32]
 8007054:	e00b      	b.n	800706e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	6279      	str	r1, [r7, #36]	@ 0x24
 8007060:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2b7f      	cmp	r3, #127	@ 0x7f
 8007072:	d8f0      	bhi.n	8007056 <SEGGER_SYSVIEW_SendModule+0x66>
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	627a      	str	r2, [r7, #36]	@ 0x24
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e00b      	b.n	80070a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	1c59      	adds	r1, r3, #1
 8007098:	61f9      	str	r1, [r7, #28]
 800709a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	09db      	lsrs	r3, r3, #7
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ac:	d8f0      	bhi.n	8007090 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	61fa      	str	r2, [r7, #28]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2280      	movs	r2, #128	@ 0x80
 80070c4:	4619      	mov	r1, r3
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7fe fb10 	bl	80056ec <_EncodeStr>
 80070cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070ce:	2216      	movs	r2, #22
 80070d0:	68f9      	ldr	r1, [r7, #12]
 80070d2:	6938      	ldr	r0, [r7, #16]
 80070d4:	f7fe fc28 	bl	8005928 <_SendPacket>
      RECORD_END();
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80070de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <SEGGER_SYSVIEW_SendModule+0x102>
 80070e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4798      	blx	r3
    }
  }
}
 80070f2:	bf00      	nop
 80070f4:	3730      	adds	r7, #48	@ 0x30
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2001440c 	.word	0x2001440c
 8007100:	20014414 	.word	0x20014414

08007104 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800710a:	4b0c      	ldr	r3, [pc, #48]	@ (800713c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00f      	beq.n	8007132 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007112:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f2      	bne.n	8007118 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	2001440c 	.word	0x2001440c

08007140 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007146:	f3ef 8311 	mrs	r3, BASEPRI
 800714a:	f04f 0120 	mov.w	r1, #32
 800714e:	f381 8811 	msr	BASEPRI, r1
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	4817      	ldr	r0, [pc, #92]	@ (80071b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007156:	f7fe faf9 	bl	800574c <_PreparePacket>
 800715a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	4b14      	ldr	r3, [pc, #80]	@ (80071b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	e00b      	b.n	8007184 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	b2da      	uxtb	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	6179      	str	r1, [r7, #20]
 8007176:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	09db      	lsrs	r3, r3, #7
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2b7f      	cmp	r3, #127	@ 0x7f
 8007188:	d8f0      	bhi.n	800716c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	617a      	str	r2, [r7, #20]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800719a:	221b      	movs	r2, #27
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	68b8      	ldr	r0, [r7, #8]
 80071a0:	f7fe fbc2 	bl	8005928 <_SendPacket>
  RECORD_END();
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f383 8811 	msr	BASEPRI, r3
}
 80071aa:	bf00      	nop
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20014414 	.word	0x20014414
 80071b8:	20014410 	.word	0x20014410

080071bc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80071bc:	b40f      	push	{r0, r1, r2, r3}
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80071ca:	1d3b      	adds	r3, r7, #4
 80071cc:	461a      	mov	r2, r3
 80071ce:	2100      	movs	r1, #0
 80071d0:	6938      	ldr	r0, [r7, #16]
 80071d2:	f7fe febb 	bl	8005f4c <_VPrintTarget>
  va_end(ParamList);
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e0:	b004      	add	sp, #16
 80071e2:	4770      	bx	lr

080071e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	@ 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ec:	f3ef 8311 	mrs	r3, BASEPRI
 80071f0:	f04f 0120 	mov.w	r1, #32
 80071f4:	f381 8811 	msr	BASEPRI, r1
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	4827      	ldr	r0, [pc, #156]	@ (8007298 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071fc:	f7fe faa6 	bl	800574c <_PreparePacket>
 8007200:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007202:	2280      	movs	r2, #128	@ 0x80
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	6938      	ldr	r0, [r7, #16]
 8007208:	f7fe fa70 	bl	80056ec <_EncodeStr>
 800720c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
 8007212:	2301      	movs	r3, #1
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	e00b      	b.n	8007230 <SEGGER_SYSVIEW_Warn+0x4c>
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	6279      	str	r1, [r7, #36]	@ 0x24
 8007222:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	09db      	lsrs	r3, r3, #7
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b7f      	cmp	r3, #127	@ 0x7f
 8007234:	d8f0      	bhi.n	8007218 <SEGGER_SYSVIEW_Warn+0x34>
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	627a      	str	r2, [r7, #36]	@ 0x24
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	2300      	movs	r3, #0
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e00b      	b.n	8007268 <SEGGER_SYSVIEW_Warn+0x84>
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	61f9      	str	r1, [r7, #28]
 800725a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	09db      	lsrs	r3, r3, #7
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b7f      	cmp	r3, #127	@ 0x7f
 800726c:	d8f0      	bhi.n	8007250 <SEGGER_SYSVIEW_Warn+0x6c>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	61fa      	str	r2, [r7, #28]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800727e:	221a      	movs	r2, #26
 8007280:	68f9      	ldr	r1, [r7, #12]
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f7fe fb50 	bl	8005928 <_SendPacket>
  RECORD_END();
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
 8007290:	3728      	adds	r7, #40	@ 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20014414 	.word	0x20014414

0800729c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80072a0:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072a2:	7e1b      	ldrb	r3, [r3, #24]
 80072a4:	4619      	mov	r1, r3
 80072a6:	4a13      	ldr	r2, [pc, #76]	@ (80072f4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072a8:	460b      	mov	r3, r1
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	440b      	add	r3, r1
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	336c      	adds	r3, #108	@ 0x6c
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b0e      	ldr	r3, [pc, #56]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072b8:	7e1b      	ldrb	r3, [r3, #24]
 80072ba:	4618      	mov	r0, r3
 80072bc:	490d      	ldr	r1, [pc, #52]	@ (80072f4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072be:	4603      	mov	r3, r0
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4403      	add	r3, r0
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	3370      	adds	r3, #112	@ 0x70
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d00b      	beq.n	80072e8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80072d0:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072d2:	789b      	ldrb	r3, [r3, #2]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072da:	2201      	movs	r2, #1
 80072dc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80072de:	f7fe fa41 	bl	8005764 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80072e2:	4b03      	ldr	r3, [pc, #12]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80072e8:	4b01      	ldr	r3, [pc, #4]	@ (80072f0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	200143e4 	.word	0x200143e4
 80072f4:	20012f24 	.word	0x20012f24

080072f8 <sniprintf>:
 80072f8:	b40c      	push	{r2, r3}
 80072fa:	b530      	push	{r4, r5, lr}
 80072fc:	4b17      	ldr	r3, [pc, #92]	@ (800735c <sniprintf+0x64>)
 80072fe:	1e0c      	subs	r4, r1, #0
 8007300:	681d      	ldr	r5, [r3, #0]
 8007302:	b09d      	sub	sp, #116	@ 0x74
 8007304:	da08      	bge.n	8007318 <sniprintf+0x20>
 8007306:	238b      	movs	r3, #139	@ 0x8b
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	b01d      	add	sp, #116	@ 0x74
 8007310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007314:	b002      	add	sp, #8
 8007316:	4770      	bx	lr
 8007318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800731c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007320:	bf14      	ite	ne
 8007322:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007326:	4623      	moveq	r3, r4
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007330:	9002      	str	r0, [sp, #8]
 8007332:	9006      	str	r0, [sp, #24]
 8007334:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007338:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800733a:	ab21      	add	r3, sp, #132	@ 0x84
 800733c:	a902      	add	r1, sp, #8
 800733e:	4628      	mov	r0, r5
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	f000 f9ad 	bl	80076a0 <_svfiprintf_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	bfbc      	itt	lt
 800734a:	238b      	movlt	r3, #139	@ 0x8b
 800734c:	602b      	strlt	r3, [r5, #0]
 800734e:	2c00      	cmp	r4, #0
 8007350:	d0dd      	beq.n	800730e <sniprintf+0x16>
 8007352:	9b02      	ldr	r3, [sp, #8]
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e7d9      	b.n	800730e <sniprintf+0x16>
 800735a:	bf00      	nop
 800735c:	2000001c 	.word	0x2000001c

08007360 <memcmp>:
 8007360:	b510      	push	{r4, lr}
 8007362:	3901      	subs	r1, #1
 8007364:	4402      	add	r2, r0
 8007366:	4290      	cmp	r0, r2
 8007368:	d101      	bne.n	800736e <memcmp+0xe>
 800736a:	2000      	movs	r0, #0
 800736c:	e005      	b.n	800737a <memcmp+0x1a>
 800736e:	7803      	ldrb	r3, [r0, #0]
 8007370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007374:	42a3      	cmp	r3, r4
 8007376:	d001      	beq.n	800737c <memcmp+0x1c>
 8007378:	1b18      	subs	r0, r3, r4
 800737a:	bd10      	pop	{r4, pc}
 800737c:	3001      	adds	r0, #1
 800737e:	e7f2      	b.n	8007366 <memcmp+0x6>

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4d0d      	ldr	r5, [pc, #52]	@ (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	@ (80073cc <__libc_init_array+0x3c>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2600      	movs	r6, #0
 800739c:	42a6      	cmp	r6, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4d0b      	ldr	r5, [pc, #44]	@ (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	@ (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 fc74 	bl	8007c90 <_init>
 80073a8:	1b64      	subs	r4, r4, r5
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2600      	movs	r6, #0
 80073ae:	42a6      	cmp	r6, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b8:	4798      	blx	r3
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c2:	4798      	blx	r3
 80073c4:	3601      	adds	r6, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	08007e64 	.word	0x08007e64
 80073cc:	08007e64 	.word	0x08007e64
 80073d0:	08007e64 	.word	0x08007e64
 80073d4:	08007e68 	.word	0x08007e68

080073d8 <__retarget_lock_acquire_recursive>:
 80073d8:	4770      	bx	lr

080073da <__retarget_lock_release_recursive>:
 80073da:	4770      	bx	lr

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f2:	4291      	cmp	r1, r2
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <_free_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d041      	beq.n	8007484 <_free_r+0x8c>
 8007400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007404:	1f0c      	subs	r4, r1, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfb8      	it	lt
 800740a:	18e4      	addlt	r4, r4, r3
 800740c:	f000 f8e0 	bl	80075d0 <__malloc_lock>
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <_free_r+0x90>)
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x2c>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	4628      	mov	r0, r5
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007420:	f000 b8dc 	b.w	80075dc <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x42>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	1821      	adds	r1, r4, r0
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1809      	addeq	r1, r1, r0
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x1e>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x4c>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x42>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1850      	adds	r0, r2, r1
 8007448:	42a0      	cmp	r0, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x6c>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	4401      	add	r1, r0
 8007450:	1850      	adds	r0, r2, r1
 8007452:	4283      	cmp	r3, r0
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x22>
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	4408      	add	r0, r1
 8007460:	6010      	str	r0, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x22>
 8007464:	d902      	bls.n	800746c <_free_r+0x74>
 8007466:	230c      	movs	r3, #12
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x22>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	1821      	adds	r1, r4, r0
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1809      	addeq	r1, r1, r0
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x22>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	2001463c 	.word	0x2001463c

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0f      	ldr	r6, [pc, #60]	@ (80074cc <sbrk_aligned+0x40>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fba6 	bl	8007be8 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fba1 	bl	8007be8 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d103      	bne.n	80074b2 <sbrk_aligned+0x26>
 80074aa:	f04f 34ff 	mov.w	r4, #4294967295
 80074ae:	4620      	mov	r0, r4
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
 80074b2:	1cc4      	adds	r4, r0, #3
 80074b4:	f024 0403 	bic.w	r4, r4, #3
 80074b8:	42a0      	cmp	r0, r4
 80074ba:	d0f8      	beq.n	80074ae <sbrk_aligned+0x22>
 80074bc:	1a21      	subs	r1, r4, r0
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fb92 	bl	8007be8 <_sbrk_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d1f2      	bne.n	80074ae <sbrk_aligned+0x22>
 80074c8:	e7ef      	b.n	80074aa <sbrk_aligned+0x1e>
 80074ca:	bf00      	nop
 80074cc:	20014638 	.word	0x20014638

080074d0 <_malloc_r>:
 80074d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d4:	1ccd      	adds	r5, r1, #3
 80074d6:	f025 0503 	bic.w	r5, r5, #3
 80074da:	3508      	adds	r5, #8
 80074dc:	2d0c      	cmp	r5, #12
 80074de:	bf38      	it	cc
 80074e0:	250c      	movcc	r5, #12
 80074e2:	2d00      	cmp	r5, #0
 80074e4:	4606      	mov	r6, r0
 80074e6:	db01      	blt.n	80074ec <_malloc_r+0x1c>
 80074e8:	42a9      	cmp	r1, r5
 80074ea:	d904      	bls.n	80074f6 <_malloc_r+0x26>
 80074ec:	230c      	movs	r3, #12
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	2000      	movs	r0, #0
 80074f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075cc <_malloc_r+0xfc>
 80074fa:	f000 f869 	bl	80075d0 <__malloc_lock>
 80074fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007502:	461c      	mov	r4, r3
 8007504:	bb44      	cbnz	r4, 8007558 <_malloc_r+0x88>
 8007506:	4629      	mov	r1, r5
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ffbf 	bl	800748c <sbrk_aligned>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	4604      	mov	r4, r0
 8007512:	d158      	bne.n	80075c6 <_malloc_r+0xf6>
 8007514:	f8d8 4000 	ldr.w	r4, [r8]
 8007518:	4627      	mov	r7, r4
 800751a:	2f00      	cmp	r7, #0
 800751c:	d143      	bne.n	80075a6 <_malloc_r+0xd6>
 800751e:	2c00      	cmp	r4, #0
 8007520:	d04b      	beq.n	80075ba <_malloc_r+0xea>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	4639      	mov	r1, r7
 8007526:	4630      	mov	r0, r6
 8007528:	eb04 0903 	add.w	r9, r4, r3
 800752c:	f000 fb5c 	bl	8007be8 <_sbrk_r>
 8007530:	4581      	cmp	r9, r0
 8007532:	d142      	bne.n	80075ba <_malloc_r+0xea>
 8007534:	6821      	ldr	r1, [r4, #0]
 8007536:	1a6d      	subs	r5, r5, r1
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff ffa6 	bl	800748c <sbrk_aligned>
 8007540:	3001      	adds	r0, #1
 8007542:	d03a      	beq.n	80075ba <_malloc_r+0xea>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	442b      	add	r3, r5
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	f8d8 3000 	ldr.w	r3, [r8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	bb62      	cbnz	r2, 80075ac <_malloc_r+0xdc>
 8007552:	f8c8 7000 	str.w	r7, [r8]
 8007556:	e00f      	b.n	8007578 <_malloc_r+0xa8>
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	1b52      	subs	r2, r2, r5
 800755c:	d420      	bmi.n	80075a0 <_malloc_r+0xd0>
 800755e:	2a0b      	cmp	r2, #11
 8007560:	d917      	bls.n	8007592 <_malloc_r+0xc2>
 8007562:	1961      	adds	r1, r4, r5
 8007564:	42a3      	cmp	r3, r4
 8007566:	6025      	str	r5, [r4, #0]
 8007568:	bf18      	it	ne
 800756a:	6059      	strne	r1, [r3, #4]
 800756c:	6863      	ldr	r3, [r4, #4]
 800756e:	bf08      	it	eq
 8007570:	f8c8 1000 	streq.w	r1, [r8]
 8007574:	5162      	str	r2, [r4, r5]
 8007576:	604b      	str	r3, [r1, #4]
 8007578:	4630      	mov	r0, r6
 800757a:	f000 f82f 	bl	80075dc <__malloc_unlock>
 800757e:	f104 000b 	add.w	r0, r4, #11
 8007582:	1d23      	adds	r3, r4, #4
 8007584:	f020 0007 	bic.w	r0, r0, #7
 8007588:	1ac2      	subs	r2, r0, r3
 800758a:	bf1c      	itt	ne
 800758c:	1a1b      	subne	r3, r3, r0
 800758e:	50a3      	strne	r3, [r4, r2]
 8007590:	e7af      	b.n	80074f2 <_malloc_r+0x22>
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	bf0c      	ite	eq
 8007598:	f8c8 2000 	streq.w	r2, [r8]
 800759c:	605a      	strne	r2, [r3, #4]
 800759e:	e7eb      	b.n	8007578 <_malloc_r+0xa8>
 80075a0:	4623      	mov	r3, r4
 80075a2:	6864      	ldr	r4, [r4, #4]
 80075a4:	e7ae      	b.n	8007504 <_malloc_r+0x34>
 80075a6:	463c      	mov	r4, r7
 80075a8:	687f      	ldr	r7, [r7, #4]
 80075aa:	e7b6      	b.n	800751a <_malloc_r+0x4a>
 80075ac:	461a      	mov	r2, r3
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d1fb      	bne.n	80075ac <_malloc_r+0xdc>
 80075b4:	2300      	movs	r3, #0
 80075b6:	6053      	str	r3, [r2, #4]
 80075b8:	e7de      	b.n	8007578 <_malloc_r+0xa8>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f80c 	bl	80075dc <__malloc_unlock>
 80075c4:	e794      	b.n	80074f0 <_malloc_r+0x20>
 80075c6:	6005      	str	r5, [r0, #0]
 80075c8:	e7d6      	b.n	8007578 <_malloc_r+0xa8>
 80075ca:	bf00      	nop
 80075cc:	2001463c 	.word	0x2001463c

080075d0 <__malloc_lock>:
 80075d0:	4801      	ldr	r0, [pc, #4]	@ (80075d8 <__malloc_lock+0x8>)
 80075d2:	f7ff bf01 	b.w	80073d8 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	20014634 	.word	0x20014634

080075dc <__malloc_unlock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__malloc_unlock+0x8>)
 80075de:	f7ff befc 	b.w	80073da <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	20014634 	.word	0x20014634

080075e8 <__ssputs_r>:
 80075e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	688e      	ldr	r6, [r1, #8]
 80075ee:	461f      	mov	r7, r3
 80075f0:	42be      	cmp	r6, r7
 80075f2:	680b      	ldr	r3, [r1, #0]
 80075f4:	4682      	mov	sl, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	4690      	mov	r8, r2
 80075fa:	d82d      	bhi.n	8007658 <__ssputs_r+0x70>
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007604:	d026      	beq.n	8007654 <__ssputs_r+0x6c>
 8007606:	6965      	ldr	r5, [r4, #20]
 8007608:	6909      	ldr	r1, [r1, #16]
 800760a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760e:	eba3 0901 	sub.w	r9, r3, r1
 8007612:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007616:	1c7b      	adds	r3, r7, #1
 8007618:	444b      	add	r3, r9
 800761a:	106d      	asrs	r5, r5, #1
 800761c:	429d      	cmp	r5, r3
 800761e:	bf38      	it	cc
 8007620:	461d      	movcc	r5, r3
 8007622:	0553      	lsls	r3, r2, #21
 8007624:	d527      	bpl.n	8007676 <__ssputs_r+0x8e>
 8007626:	4629      	mov	r1, r5
 8007628:	f7ff ff52 	bl	80074d0 <_malloc_r>
 800762c:	4606      	mov	r6, r0
 800762e:	b360      	cbz	r0, 800768a <__ssputs_r+0xa2>
 8007630:	6921      	ldr	r1, [r4, #16]
 8007632:	464a      	mov	r2, r9
 8007634:	f7ff fed2 	bl	80073dc <memcpy>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800763e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	6126      	str	r6, [r4, #16]
 8007646:	6165      	str	r5, [r4, #20]
 8007648:	444e      	add	r6, r9
 800764a:	eba5 0509 	sub.w	r5, r5, r9
 800764e:	6026      	str	r6, [r4, #0]
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	463e      	mov	r6, r7
 8007654:	42be      	cmp	r6, r7
 8007656:	d900      	bls.n	800765a <__ssputs_r+0x72>
 8007658:	463e      	mov	r6, r7
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	4632      	mov	r2, r6
 800765e:	4641      	mov	r1, r8
 8007660:	f000 faa8 	bl	8007bb4 <memmove>
 8007664:	68a3      	ldr	r3, [r4, #8]
 8007666:	1b9b      	subs	r3, r3, r6
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	4433      	add	r3, r6
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	2000      	movs	r0, #0
 8007672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007676:	462a      	mov	r2, r5
 8007678:	f000 fac6 	bl	8007c08 <_realloc_r>
 800767c:	4606      	mov	r6, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d1e0      	bne.n	8007644 <__ssputs_r+0x5c>
 8007682:	6921      	ldr	r1, [r4, #16]
 8007684:	4650      	mov	r0, sl
 8007686:	f7ff feb7 	bl	80073f8 <_free_r>
 800768a:	230c      	movs	r3, #12
 800768c:	f8ca 3000 	str.w	r3, [sl]
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	e7e9      	b.n	8007672 <__ssputs_r+0x8a>
	...

080076a0 <_svfiprintf_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	4698      	mov	r8, r3
 80076a6:	898b      	ldrh	r3, [r1, #12]
 80076a8:	061b      	lsls	r3, r3, #24
 80076aa:	b09d      	sub	sp, #116	@ 0x74
 80076ac:	4607      	mov	r7, r0
 80076ae:	460d      	mov	r5, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	d510      	bpl.n	80076d6 <_svfiprintf_r+0x36>
 80076b4:	690b      	ldr	r3, [r1, #16]
 80076b6:	b973      	cbnz	r3, 80076d6 <_svfiprintf_r+0x36>
 80076b8:	2140      	movs	r1, #64	@ 0x40
 80076ba:	f7ff ff09 	bl	80074d0 <_malloc_r>
 80076be:	6028      	str	r0, [r5, #0]
 80076c0:	6128      	str	r0, [r5, #16]
 80076c2:	b930      	cbnz	r0, 80076d2 <_svfiprintf_r+0x32>
 80076c4:	230c      	movs	r3, #12
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b01d      	add	sp, #116	@ 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	2340      	movs	r3, #64	@ 0x40
 80076d4:	616b      	str	r3, [r5, #20]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076da:	2320      	movs	r3, #32
 80076dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076e4:	2330      	movs	r3, #48	@ 0x30
 80076e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007884 <_svfiprintf_r+0x1e4>
 80076ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ee:	f04f 0901 	mov.w	r9, #1
 80076f2:	4623      	mov	r3, r4
 80076f4:	469a      	mov	sl, r3
 80076f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076fa:	b10a      	cbz	r2, 8007700 <_svfiprintf_r+0x60>
 80076fc:	2a25      	cmp	r2, #37	@ 0x25
 80076fe:	d1f9      	bne.n	80076f4 <_svfiprintf_r+0x54>
 8007700:	ebba 0b04 	subs.w	fp, sl, r4
 8007704:	d00b      	beq.n	800771e <_svfiprintf_r+0x7e>
 8007706:	465b      	mov	r3, fp
 8007708:	4622      	mov	r2, r4
 800770a:	4629      	mov	r1, r5
 800770c:	4638      	mov	r0, r7
 800770e:	f7ff ff6b 	bl	80075e8 <__ssputs_r>
 8007712:	3001      	adds	r0, #1
 8007714:	f000 80a7 	beq.w	8007866 <_svfiprintf_r+0x1c6>
 8007718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800771a:	445a      	add	r2, fp
 800771c:	9209      	str	r2, [sp, #36]	@ 0x24
 800771e:	f89a 3000 	ldrb.w	r3, [sl]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 809f 	beq.w	8007866 <_svfiprintf_r+0x1c6>
 8007728:	2300      	movs	r3, #0
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007732:	f10a 0a01 	add.w	sl, sl, #1
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	9307      	str	r3, [sp, #28]
 800773a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800773e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007740:	4654      	mov	r4, sl
 8007742:	2205      	movs	r2, #5
 8007744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007748:	484e      	ldr	r0, [pc, #312]	@ (8007884 <_svfiprintf_r+0x1e4>)
 800774a:	f7f8 fdb1 	bl	80002b0 <memchr>
 800774e:	9a04      	ldr	r2, [sp, #16]
 8007750:	b9d8      	cbnz	r0, 800778a <_svfiprintf_r+0xea>
 8007752:	06d0      	lsls	r0, r2, #27
 8007754:	bf44      	itt	mi
 8007756:	2320      	movmi	r3, #32
 8007758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800775c:	0711      	lsls	r1, r2, #28
 800775e:	bf44      	itt	mi
 8007760:	232b      	movmi	r3, #43	@ 0x2b
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007766:	f89a 3000 	ldrb.w	r3, [sl]
 800776a:	2b2a      	cmp	r3, #42	@ 0x2a
 800776c:	d015      	beq.n	800779a <_svfiprintf_r+0xfa>
 800776e:	9a07      	ldr	r2, [sp, #28]
 8007770:	4654      	mov	r4, sl
 8007772:	2000      	movs	r0, #0
 8007774:	f04f 0c0a 	mov.w	ip, #10
 8007778:	4621      	mov	r1, r4
 800777a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800777e:	3b30      	subs	r3, #48	@ 0x30
 8007780:	2b09      	cmp	r3, #9
 8007782:	d94b      	bls.n	800781c <_svfiprintf_r+0x17c>
 8007784:	b1b0      	cbz	r0, 80077b4 <_svfiprintf_r+0x114>
 8007786:	9207      	str	r2, [sp, #28]
 8007788:	e014      	b.n	80077b4 <_svfiprintf_r+0x114>
 800778a:	eba0 0308 	sub.w	r3, r0, r8
 800778e:	fa09 f303 	lsl.w	r3, r9, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	46a2      	mov	sl, r4
 8007798:	e7d2      	b.n	8007740 <_svfiprintf_r+0xa0>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	1d19      	adds	r1, r3, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9103      	str	r1, [sp, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfbb      	ittet	lt
 80077a6:	425b      	neglt	r3, r3
 80077a8:	f042 0202 	orrlt.w	r2, r2, #2
 80077ac:	9307      	strge	r3, [sp, #28]
 80077ae:	9307      	strlt	r3, [sp, #28]
 80077b0:	bfb8      	it	lt
 80077b2:	9204      	strlt	r2, [sp, #16]
 80077b4:	7823      	ldrb	r3, [r4, #0]
 80077b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80077b8:	d10a      	bne.n	80077d0 <_svfiprintf_r+0x130>
 80077ba:	7863      	ldrb	r3, [r4, #1]
 80077bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077be:	d132      	bne.n	8007826 <_svfiprintf_r+0x186>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	1d1a      	adds	r2, r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	9203      	str	r2, [sp, #12]
 80077c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077cc:	3402      	adds	r4, #2
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007894 <_svfiprintf_r+0x1f4>
 80077d4:	7821      	ldrb	r1, [r4, #0]
 80077d6:	2203      	movs	r2, #3
 80077d8:	4650      	mov	r0, sl
 80077da:	f7f8 fd69 	bl	80002b0 <memchr>
 80077de:	b138      	cbz	r0, 80077f0 <_svfiprintf_r+0x150>
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	eba0 000a 	sub.w	r0, r0, sl
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	4082      	lsls	r2, r0
 80077ea:	4313      	orrs	r3, r2
 80077ec:	3401      	adds	r4, #1
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f4:	4824      	ldr	r0, [pc, #144]	@ (8007888 <_svfiprintf_r+0x1e8>)
 80077f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077fa:	2206      	movs	r2, #6
 80077fc:	f7f8 fd58 	bl	80002b0 <memchr>
 8007800:	2800      	cmp	r0, #0
 8007802:	d036      	beq.n	8007872 <_svfiprintf_r+0x1d2>
 8007804:	4b21      	ldr	r3, [pc, #132]	@ (800788c <_svfiprintf_r+0x1ec>)
 8007806:	bb1b      	cbnz	r3, 8007850 <_svfiprintf_r+0x1b0>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	4433      	add	r3, r6
 8007818:	9309      	str	r3, [sp, #36]	@ 0x24
 800781a:	e76a      	b.n	80076f2 <_svfiprintf_r+0x52>
 800781c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007820:	460c      	mov	r4, r1
 8007822:	2001      	movs	r0, #1
 8007824:	e7a8      	b.n	8007778 <_svfiprintf_r+0xd8>
 8007826:	2300      	movs	r3, #0
 8007828:	3401      	adds	r4, #1
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007838:	3a30      	subs	r2, #48	@ 0x30
 800783a:	2a09      	cmp	r2, #9
 800783c:	d903      	bls.n	8007846 <_svfiprintf_r+0x1a6>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c6      	beq.n	80077d0 <_svfiprintf_r+0x130>
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	e7c4      	b.n	80077d0 <_svfiprintf_r+0x130>
 8007846:	fb0c 2101 	mla	r1, ip, r1, r2
 800784a:	4604      	mov	r4, r0
 800784c:	2301      	movs	r3, #1
 800784e:	e7f0      	b.n	8007832 <_svfiprintf_r+0x192>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <_svfiprintf_r+0x1f0>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4638      	mov	r0, r7
 800785c:	f3af 8000 	nop.w
 8007860:	1c42      	adds	r2, r0, #1
 8007862:	4606      	mov	r6, r0
 8007864:	d1d6      	bne.n	8007814 <_svfiprintf_r+0x174>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	065b      	lsls	r3, r3, #25
 800786a:	f53f af2d 	bmi.w	80076c8 <_svfiprintf_r+0x28>
 800786e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007870:	e72c      	b.n	80076cc <_svfiprintf_r+0x2c>
 8007872:	ab03      	add	r3, sp, #12
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	462a      	mov	r2, r5
 8007878:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <_svfiprintf_r+0x1f0>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	4638      	mov	r0, r7
 800787e:	f000 f879 	bl	8007974 <_printf_i>
 8007882:	e7ed      	b.n	8007860 <_svfiprintf_r+0x1c0>
 8007884:	08007e28 	.word	0x08007e28
 8007888:	08007e32 	.word	0x08007e32
 800788c:	00000000 	.word	0x00000000
 8007890:	080075e9 	.word	0x080075e9
 8007894:	08007e2e 	.word	0x08007e2e

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	4698      	mov	r8, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfb8      	it	lt
 80078ac:	4613      	movlt	r3, r2
 80078ae:	6033      	str	r3, [r6, #0]
 80078b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b4:	4607      	mov	r7, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b10a      	cbz	r2, 80078be <_printf_common+0x26>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	0699      	lsls	r1, r3, #26
 80078c2:	bf42      	ittt	mi
 80078c4:	6833      	ldrmi	r3, [r6, #0]
 80078c6:	3302      	addmi	r3, #2
 80078c8:	6033      	strmi	r3, [r6, #0]
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f015 0506 	ands.w	r5, r5, #6
 80078d0:	d106      	bne.n	80078e0 <_printf_common+0x48>
 80078d2:	f104 0a19 	add.w	sl, r4, #25
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc26      	bgt.n	800792e <_printf_common+0x96>
 80078e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	3b00      	subs	r3, #0
 80078e8:	bf18      	it	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	0692      	lsls	r2, r2, #26
 80078ee:	d42b      	bmi.n	8007948 <_printf_common+0xb0>
 80078f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f4:	4641      	mov	r1, r8
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c8      	blx	r9
 80078fa:	3001      	adds	r0, #1
 80078fc:	d01e      	beq.n	800793c <_printf_common+0xa4>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	2b04      	cmp	r3, #4
 8007908:	bf02      	ittt	eq
 800790a:	68e5      	ldreq	r5, [r4, #12]
 800790c:	6833      	ldreq	r3, [r6, #0]
 800790e:	1aed      	subeq	r5, r5, r3
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	bf0c      	ite	eq
 8007914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007918:	2500      	movne	r5, #0
 800791a:	4293      	cmp	r3, r2
 800791c:	bfc4      	itt	gt
 800791e:	1a9b      	subgt	r3, r3, r2
 8007920:	18ed      	addgt	r5, r5, r3
 8007922:	2600      	movs	r6, #0
 8007924:	341a      	adds	r4, #26
 8007926:	42b5      	cmp	r5, r6
 8007928:	d11a      	bne.n	8007960 <_printf_common+0xc8>
 800792a:	2000      	movs	r0, #0
 800792c:	e008      	b.n	8007940 <_printf_common+0xa8>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4641      	mov	r1, r8
 8007934:	4638      	mov	r0, r7
 8007936:	47c8      	blx	r9
 8007938:	3001      	adds	r0, #1
 800793a:	d103      	bne.n	8007944 <_printf_common+0xac>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	3501      	adds	r5, #1
 8007946:	e7c6      	b.n	80078d6 <_printf_common+0x3e>
 8007948:	18e1      	adds	r1, r4, r3
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	2030      	movs	r0, #48	@ 0x30
 800794e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007952:	4422      	add	r2, r4
 8007954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800795c:	3302      	adds	r3, #2
 800795e:	e7c7      	b.n	80078f0 <_printf_common+0x58>
 8007960:	2301      	movs	r3, #1
 8007962:	4622      	mov	r2, r4
 8007964:	4641      	mov	r1, r8
 8007966:	4638      	mov	r0, r7
 8007968:	47c8      	blx	r9
 800796a:	3001      	adds	r0, #1
 800796c:	d0e6      	beq.n	800793c <_printf_common+0xa4>
 800796e:	3601      	adds	r6, #1
 8007970:	e7d9      	b.n	8007926 <_printf_common+0x8e>
	...

08007974 <_printf_i>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	7e0f      	ldrb	r7, [r1, #24]
 800797a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800797c:	2f78      	cmp	r7, #120	@ 0x78
 800797e:	4691      	mov	r9, r2
 8007980:	4680      	mov	r8, r0
 8007982:	460c      	mov	r4, r1
 8007984:	469a      	mov	sl, r3
 8007986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800798a:	d807      	bhi.n	800799c <_printf_i+0x28>
 800798c:	2f62      	cmp	r7, #98	@ 0x62
 800798e:	d80a      	bhi.n	80079a6 <_printf_i+0x32>
 8007990:	2f00      	cmp	r7, #0
 8007992:	f000 80d2 	beq.w	8007b3a <_printf_i+0x1c6>
 8007996:	2f58      	cmp	r7, #88	@ 0x58
 8007998:	f000 80b9 	beq.w	8007b0e <_printf_i+0x19a>
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a4:	e03a      	b.n	8007a1c <_printf_i+0xa8>
 80079a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079aa:	2b15      	cmp	r3, #21
 80079ac:	d8f6      	bhi.n	800799c <_printf_i+0x28>
 80079ae:	a101      	add	r1, pc, #4	@ (adr r1, 80079b4 <_printf_i+0x40>)
 80079b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	0800799d 	.word	0x0800799d
 80079c0:	0800799d 	.word	0x0800799d
 80079c4:	0800799d 	.word	0x0800799d
 80079c8:	0800799d 	.word	0x0800799d
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	0800799d 	.word	0x0800799d
 80079d4:	0800799d 	.word	0x0800799d
 80079d8:	0800799d 	.word	0x0800799d
 80079dc:	0800799d 	.word	0x0800799d
 80079e0:	08007b21 	.word	0x08007b21
 80079e4:	08007a4b 	.word	0x08007a4b
 80079e8:	08007adb 	.word	0x08007adb
 80079ec:	0800799d 	.word	0x0800799d
 80079f0:	0800799d 	.word	0x0800799d
 80079f4:	08007b43 	.word	0x08007b43
 80079f8:	0800799d 	.word	0x0800799d
 80079fc:	08007a4b 	.word	0x08007a4b
 8007a00:	0800799d 	.word	0x0800799d
 8007a04:	0800799d 	.word	0x0800799d
 8007a08:	08007ae3 	.word	0x08007ae3
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6032      	str	r2, [r6, #0]
 8007a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e09d      	b.n	8007b5c <_printf_i+0x1e8>
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	6031      	str	r1, [r6, #0]
 8007a28:	0606      	lsls	r6, r0, #24
 8007a2a:	d501      	bpl.n	8007a30 <_printf_i+0xbc>
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <_printf_i+0xc4>
 8007a30:	0645      	lsls	r5, r0, #25
 8007a32:	d5fb      	bpl.n	8007a2c <_printf_i+0xb8>
 8007a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	da03      	bge.n	8007a44 <_printf_i+0xd0>
 8007a3c:	232d      	movs	r3, #45	@ 0x2d
 8007a3e:	426d      	negs	r5, r5
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a44:	4859      	ldr	r0, [pc, #356]	@ (8007bac <_printf_i+0x238>)
 8007a46:	230a      	movs	r3, #10
 8007a48:	e011      	b.n	8007a6e <_printf_i+0xfa>
 8007a4a:	6821      	ldr	r1, [r4, #0]
 8007a4c:	6833      	ldr	r3, [r6, #0]
 8007a4e:	0608      	lsls	r0, r1, #24
 8007a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a54:	d402      	bmi.n	8007a5c <_printf_i+0xe8>
 8007a56:	0649      	lsls	r1, r1, #25
 8007a58:	bf48      	it	mi
 8007a5a:	b2ad      	uxthmi	r5, r5
 8007a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5e:	4853      	ldr	r0, [pc, #332]	@ (8007bac <_printf_i+0x238>)
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	bf14      	ite	ne
 8007a64:	230a      	movne	r3, #10
 8007a66:	2308      	moveq	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6e:	6866      	ldr	r6, [r4, #4]
 8007a70:	60a6      	str	r6, [r4, #8]
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	bfa2      	ittt	ge
 8007a76:	6821      	ldrge	r1, [r4, #0]
 8007a78:	f021 0104 	bicge.w	r1, r1, #4
 8007a7c:	6021      	strge	r1, [r4, #0]
 8007a7e:	b90d      	cbnz	r5, 8007a84 <_printf_i+0x110>
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	d04b      	beq.n	8007b1c <_printf_i+0x1a8>
 8007a84:	4616      	mov	r6, r2
 8007a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a8e:	5dc7      	ldrb	r7, [r0, r7]
 8007a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a94:	462f      	mov	r7, r5
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	460d      	mov	r5, r1
 8007a9a:	d9f4      	bls.n	8007a86 <_printf_i+0x112>
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d10b      	bne.n	8007ab8 <_printf_i+0x144>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	d508      	bpl.n	8007ab8 <_printf_i+0x144>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	bfde      	ittt	le
 8007aae:	2330      	movle	r3, #48	@ 0x30
 8007ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ab4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab8:	1b92      	subs	r2, r2, r6
 8007aba:	6122      	str	r2, [r4, #16]
 8007abc:	f8cd a000 	str.w	sl, [sp]
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	aa03      	add	r2, sp, #12
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fee6 	bl	8007898 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d14a      	bne.n	8007b66 <_printf_i+0x1f2>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b004      	add	sp, #16
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	4833      	ldr	r0, [pc, #204]	@ (8007bb0 <_printf_i+0x23c>)
 8007ae4:	2778      	movs	r7, #120	@ 0x78
 8007ae6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6831      	ldr	r1, [r6, #0]
 8007aee:	061f      	lsls	r7, r3, #24
 8007af0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007af4:	d402      	bmi.n	8007afc <_printf_i+0x188>
 8007af6:	065f      	lsls	r7, r3, #25
 8007af8:	bf48      	it	mi
 8007afa:	b2ad      	uxthmi	r5, r5
 8007afc:	6031      	str	r1, [r6, #0]
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	bf44      	itt	mi
 8007b02:	f043 0320 	orrmi.w	r3, r3, #32
 8007b06:	6023      	strmi	r3, [r4, #0]
 8007b08:	b11d      	cbz	r5, 8007b12 <_printf_i+0x19e>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	e7ac      	b.n	8007a68 <_printf_i+0xf4>
 8007b0e:	4827      	ldr	r0, [pc, #156]	@ (8007bac <_printf_i+0x238>)
 8007b10:	e7e9      	b.n	8007ae6 <_printf_i+0x172>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f023 0320 	bic.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	e7f6      	b.n	8007b0a <_printf_i+0x196>
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	e7bd      	b.n	8007a9c <_printf_i+0x128>
 8007b20:	6833      	ldr	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	062e      	lsls	r6, r5, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1c0>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1c6>
 8007b34:	0668      	lsls	r0, r5, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1bc>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4616      	mov	r6, r2
 8007b40:	e7bc      	b.n	8007abc <_printf_i+0x148>
 8007b42:	6833      	ldr	r3, [r6, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	6032      	str	r2, [r6, #0]
 8007b48:	681e      	ldr	r6, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7f8 fbae 	bl	80002b0 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1e6>
 8007b56:	1b80      	subs	r0, r0, r6
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b64:	e7aa      	b.n	8007abc <_printf_i+0x148>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ad      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x22e>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a6      	b.n	8007ad4 <_printf_i+0x160>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09d      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x212>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x206>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x222>
 8007baa:	bf00      	nop
 8007bac:	08007e39 	.word	0x08007e39
 8007bb0:	08007e4a 	.word	0x08007e4a

08007bb4 <memmove>:
 8007bb4:	4288      	cmp	r0, r1
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	eb01 0402 	add.w	r4, r1, r2
 8007bbc:	d902      	bls.n	8007bc4 <memmove+0x10>
 8007bbe:	4284      	cmp	r4, r0
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	d807      	bhi.n	8007bd4 <memmove+0x20>
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	42a1      	cmp	r1, r4
 8007bc8:	d008      	beq.n	8007bdc <memmove+0x28>
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x12>
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d100      	bne.n	8007bde <memmove+0x2a>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be6:	e7f7      	b.n	8007bd8 <memmove+0x24>

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	@ (8007c04 <_sbrk_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f000 f83e 	bl	8007c74 <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20014630 	.word	0x20014630

08007c08 <_realloc_r>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4615      	mov	r5, r2
 8007c10:	460c      	mov	r4, r1
 8007c12:	b921      	cbnz	r1, 8007c1e <_realloc_r+0x16>
 8007c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c18:	4611      	mov	r1, r2
 8007c1a:	f7ff bc59 	b.w	80074d0 <_malloc_r>
 8007c1e:	b92a      	cbnz	r2, 8007c2c <_realloc_r+0x24>
 8007c20:	f7ff fbea 	bl	80073f8 <_free_r>
 8007c24:	2400      	movs	r4, #0
 8007c26:	4620      	mov	r0, r4
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	f000 f81a 	bl	8007c64 <_malloc_usable_size_r>
 8007c30:	4285      	cmp	r5, r0
 8007c32:	4606      	mov	r6, r0
 8007c34:	d802      	bhi.n	8007c3c <_realloc_r+0x34>
 8007c36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c3a:	d8f4      	bhi.n	8007c26 <_realloc_r+0x1e>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7ff fc46 	bl	80074d0 <_malloc_r>
 8007c44:	4607      	mov	r7, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0ec      	beq.n	8007c24 <_realloc_r+0x1c>
 8007c4a:	42b5      	cmp	r5, r6
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4621      	mov	r1, r4
 8007c50:	bf28      	it	cs
 8007c52:	4632      	movcs	r2, r6
 8007c54:	f7ff fbc2 	bl	80073dc <memcpy>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7ff fbcc 	bl	80073f8 <_free_r>
 8007c60:	463c      	mov	r4, r7
 8007c62:	e7e0      	b.n	8007c26 <_realloc_r+0x1e>

08007c64 <_malloc_usable_size_r>:
 8007c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c68:	1f18      	subs	r0, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bfbc      	itt	lt
 8007c6e:	580b      	ldrlt	r3, [r1, r0]
 8007c70:	18c0      	addlt	r0, r0, r3
 8007c72:	4770      	bx	lr

08007c74 <_sbrk>:
 8007c74:	4a04      	ldr	r2, [pc, #16]	@ (8007c88 <_sbrk+0x14>)
 8007c76:	6811      	ldr	r1, [r2, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	b909      	cbnz	r1, 8007c80 <_sbrk+0xc>
 8007c7c:	4903      	ldr	r1, [pc, #12]	@ (8007c8c <_sbrk+0x18>)
 8007c7e:	6011      	str	r1, [r2, #0]
 8007c80:	6810      	ldr	r0, [r2, #0]
 8007c82:	4403      	add	r3, r0
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	4770      	bx	lr
 8007c88:	20014640 	.word	0x20014640
 8007c8c:	20014648 	.word	0x20014648

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
