
003LED_periodic_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000723c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800740c  0800740c  0000840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007594  08007594  00009018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800759c  0800759c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800759c  0800759c  0000859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075a0  080075a0  000085a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080075a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  20000018  080075bc  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144a4  080075bc  000094a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160b0  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033da  00000000  00000000  0001f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000224d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff5  00000000  00000000  00023998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002618c  00000000  00000000  0002498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e99  00000000  00000000  0004ab19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f128e  00000000  00000000  000629b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153c40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005648  00000000  00000000  00153c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c6  00000000  00000000  001592cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073f4 	.word	0x080073f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	080073f4 	.word	0x080073f4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed0 	.word	0x20012ed0

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fabf 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f873 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8dd 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <main+0xd4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <main+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005ee:	482e      	ldr	r0, [pc, #184]	@ (80006a8 <main+0xd8>)
 80005f0:	f004 fc56 	bl	8004ea0 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 80005f4:	f004 fa7e 	bl	8004af4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005f8:	f006 f804 	bl	8006604 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(greenLED_handler, "greenH-1", 200, NULL, 2, &task1_handle);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	@ 0xc8
 800060a:	4928      	ldr	r1, [pc, #160]	@ (80006ac <main+0xdc>)
 800060c:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <main+0xe0>)
 800060e:	f002 fa06 	bl	8002a1e <xTaskCreate>
 8000612:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00b      	beq.n	8000632 <main+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x5e>

  status = xTaskCreate(redLED_handler, "redH-2", 200, NULL, 2, &task2_handle);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	@ 0xc8
 8000640:	491c      	ldr	r1, [pc, #112]	@ (80006b4 <main+0xe4>)
 8000642:	481d      	ldr	r0, [pc, #116]	@ (80006b8 <main+0xe8>)
 8000644:	f002 f9eb 	bl	8002a1e <xTaskCreate>
 8000648:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00b      	beq.n	8000668 <main+0x98>
    __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	617b      	str	r3, [r7, #20]
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x94>

  status = xTaskCreate(blueLED_handler, "blueH-3",200, NULL, 2, &task3_handle);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	4911      	ldr	r1, [pc, #68]	@ (80006bc <main+0xec>)
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <main+0xf0>)
 8000678:	f002 f9d1 	bl	8002a1e <xTaskCreate>
 800067c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <main+0xcc>
    __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	613b      	str	r3, [r7, #16]
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0xc8>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 800069c:	f002 fb9e 	bl	8002ddc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <main+0xd0>
 80006a4:	e0001000 	.word	0xe0001000
 80006a8:	0007a120 	.word	0x0007a120
 80006ac:	0800740c 	.word	0x0800740c
 80006b0:	08000899 	.word	0x08000899
 80006b4:	08007418 	.word	0x08007418
 80006b8:	080008c5 	.word	0x080008c5
 80006bc:	08007420 	.word	0x08007420
 80006c0:	080008f1 	.word	0x080008f1

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 fe54 	bl	8007380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xd4>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000738:	23a8      	movs	r3, #168	@ 0xa8
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f001 f857 	bl	8001800 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000758:	f000 f8f2 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fcd8 	bl	8001130 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 f8db 	bl	8000940 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a26      	ldr	r2, [pc, #152]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a1f      	ldr	r2, [pc, #124]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fc4e 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <MX_GPIO_Init+0xf8>)
 8000844:	f000 faac 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000848:	230c      	movs	r3, #12
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000864:	f000 fa9c 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xf4>)
 8000880:	f000 fa8e 	bl	8000da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <greenLED_handler>:
/* USER CODE BEGIN 4 */
#define GreenPIN GPIO_PIN_3
#define RedPIN	GPIO_PIN_4
#define BluePIN	LD2_Pin
static void greenLED_handler(void* parameters)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	while(1)
  	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008a0:	4806      	ldr	r0, [pc, #24]	@ (80008bc <greenLED_handler+0x24>)
 80008a2:	f006 fcbf 	bl	8007224 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GreenPIN);
 80008a6:	2108      	movs	r1, #8
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <greenLED_handler+0x28>)
 80008aa:	f000 fc26 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b2:	f002 fa11 	bl	8002cd8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80008b6:	bf00      	nop
 80008b8:	e7f2      	b.n	80008a0 <greenLED_handler+0x8>
 80008ba:	bf00      	nop
 80008bc:	08007428 	.word	0x08007428
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <redLED_handler>:

  	}
}

static void redLED_handler(void* parameters)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	while(1)
  	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008cc:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <redLED_handler+0x24>)
 80008ce:	f006 fca9 	bl	8007224 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, RedPIN);
 80008d2:	2110      	movs	r1, #16
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <redLED_handler+0x28>)
 80008d6:	f000 fc10 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(800);
 80008da:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80008de:	f002 f9fb 	bl	8002cd8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80008e2:	bf00      	nop
 80008e4:	e7f2      	b.n	80008cc <redLED_handler+0x8>
 80008e6:	bf00      	nop
 80008e8:	0800743c 	.word	0x0800743c
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <blueLED_handler>:
  	}

}

static void blueLED_handler(void* parameters)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80008f8:	4806      	ldr	r0, [pc, #24]	@ (8000914 <blueLED_handler+0x24>)
 80008fa:	f006 fc93 	bl	8007224 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, BluePIN);
 80008fe:	2120      	movs	r1, #32
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <blueLED_handler+0x28>)
 8000902:	f000 fbfa 	bl	80010fa <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 8000906:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800090a:	f002 f9e5 	bl	8002cd8 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 800090e:	bf00      	nop
 8000910:	e7f2      	b.n	80008f8 <blueLED_handler+0x8>
 8000912:	bf00      	nop
 8000914:	08007450 	.word	0x08007450
 8000918:	40020c00 	.word	0x40020c00

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f935 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40001000 	.word	0x40001000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800098a:	f003 fc7b 	bl	8004284 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	@ 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a32      	ldr	r2, [pc, #200]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b30      	ldr	r3, [pc, #192]	@ (8000a80 <HAL_InitTick+0xe4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fcb2 	bl	800133c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f000 fc97 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f000 fc93 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <HAL_InitTick+0xe8>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <HAL_InitTick+0xf0>)
 8000a06:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a2a:	f001 f987 	bl	8001d3c <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d11b      	bne.n	8000a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a3c:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <HAL_InitTick+0xec>)
 8000a3e:	f001 f9d7 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a50:	2036      	movs	r0, #54	@ 0x36
 8000a52:	f000 f997 	bl	8000d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d808      	bhi.n	8000a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2036      	movs	r0, #54	@ 0x36
 8000a62:	f000 f973 	bl	8000d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0xf4>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e002      	b.n	8000a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3738      	adds	r7, #56	@ 0x38
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	20000034 	.word	0x20000034
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM6_DAC_IRQHandler+0x10>)
 8000ad2:	f001 f9fd 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000034 	.word	0x20000034

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fc2d 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd4b 	bl	80005d0 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b48:	080075a4 	.word	0x080075a4
  ldr r2, =_sbss
 8000b4c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b50:	200144a4 	.word	0x200144a4

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8d8 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ff08 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fede 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000007c 	.word	0x2000007c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000007c 	.word	0x2000007c

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	@ (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	@ 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	@ (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	@ (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	@ (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	@ (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	@ (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	@ (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	@ (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	@ (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43d9      	mvns	r1, r3
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	400b      	ands	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcd0 	bl	8000bc4 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fccc 	bl	8000bc4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f873 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb60 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	0800753c 	.word	0x0800753c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	@ (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	0800754c 	.word	0x0800754c

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0ae      	sub	sp, #184	@ 0xb8
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4bcb      	ldr	r3, [pc, #812]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f200 8206 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x440>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017e1 	.word	0x080017e1
 80013e8:	080017e1 	.word	0x080017e1
 80013ec:	08001419 	.word	0x08001419
 80013f0:	080017e1 	.word	0x080017e1
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	080017e1 	.word	0x080017e1
 80013fc:	08001421 	.word	0x08001421
 8001400:	080017e1 	.word	0x080017e1
 8001404:	080017e1 	.word	0x080017e1
 8001408:	080017e1 	.word	0x080017e1
 800140c:	08001611 	.word	0x08001611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4bb9      	ldr	r3, [pc, #740]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e7      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4bb8      	ldr	r3, [pc, #736]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800141e:	e1e3      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4bb4      	ldr	r3, [pc, #720]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4bb1      	ldr	r3, [pc, #708]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d071      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4bae      	ldr	r3, [pc, #696]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800145a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	6439      	str	r1, [r7, #64]	@ 0x40
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001490:	4649      	mov	r1, r9
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4641      	mov	r1, r8
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4641      	mov	r1, r8
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014c2:	4641      	mov	r1, r8
 80014c4:	00ca      	lsls	r2, r1, #3
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	4622      	mov	r2, r4
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	462b      	mov	r3, r5
 80014d4:	460a      	mov	r2, r1
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e8:	4629      	mov	r1, r5
 80014ea:	024b      	lsls	r3, r1, #9
 80014ec:	4621      	mov	r1, r4
 80014ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f2:	4621      	mov	r1, r4
 80014f4:	024a      	lsls	r2, r1, #9
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800150c:	f7fe feca 	bl	80002a4 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800151a:	e067      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800153a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	0159      	lsls	r1, r3, #5
 800154c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001550:	0150      	lsls	r0, r2, #5
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4621      	mov	r1, r4
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800155c:	4629      	mov	r1, r5
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001570:	4649      	mov	r1, r9
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157a:	4641      	mov	r1, r8
 800157c:	018a      	lsls	r2, r1, #6
 800157e:	4641      	mov	r1, r8
 8001580:	ebb2 0a01 	subs.w	sl, r2, r1
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0b01 	sbc.w	fp, r3, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800159a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	eb1a 0303 	adds.w	r3, sl, r3
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	462b      	mov	r3, r5
 80015ac:	eb4b 0303 	adc.w	r3, fp, r3
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015be:	4629      	mov	r1, r5
 80015c0:	028b      	lsls	r3, r1, #10
 80015c2:	4621      	mov	r1, r4
 80015c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c8:	4621      	mov	r1, r4
 80015ca:	028a      	lsls	r2, r1, #10
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80015da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015de:	f7fe fe61 	bl	80002a4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015ec:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800160e:	e0eb      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06b      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	663b      	str	r3, [r7, #96]	@ 0x60
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0159      	lsls	r1, r3, #5
 8001652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001656:	0150      	lsls	r0, r2, #5
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4621      	mov	r1, r4
 800165e:	1a51      	subs	r1, r2, r1
 8001660:	61b9      	str	r1, [r7, #24]
 8001662:	4629      	mov	r1, r5
 8001664:	eb63 0301 	sbc.w	r3, r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001676:	4659      	mov	r1, fp
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4651      	mov	r1, sl
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ebb2 0801 	subs.w	r8, r2, r1
 800168a:	4659      	mov	r1, fp
 800168c:	eb63 0901 	sbc.w	r9, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800169c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb18 0303 	adds.w	r3, r8, r3
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb49 0303 	adc.w	r3, r9, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c4:	4629      	mov	r1, r5
 80016c6:	024b      	lsls	r3, r1, #9
 80016c8:	4621      	mov	r1, r4
 80016ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ce:	4621      	mov	r1, r4
 80016d0:	024a      	lsls	r2, r1, #9
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016da:	2200      	movs	r2, #0
 80016dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016e4:	f7fe fdde 	bl	80002a4 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016f2:	e065      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x420>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	4611      	mov	r1, r2
 800170c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001710:	653b      	str	r3, [r7, #80]	@ 0x50
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	@ 0x54
 8001716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4641      	mov	r1, r8
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	1a54      	subs	r4, r2, r1
 800175e:	4659      	mov	r1, fp
 8001760:	eb63 0501 	sbc.w	r5, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017b2:	f7fe fd77 	bl	80002a4 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0f1b      	lsrs	r3, r3, #28
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e003      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	37b8      	adds	r7, #184	@ 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400

08001800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e28d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8083 	beq.w	8001926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001820:	4b94      	ldr	r3, [pc, #592]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800182c:	4b91      	ldr	r3, [pc, #580]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
        || \
 8001834:	2b08      	cmp	r3, #8
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b8e      	ldr	r3, [pc, #568]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x124>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e25a      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x90>
 8001882:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xb4>
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f976 	bl	8000bc4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f972 	bl	8000bc4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xdc>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f962 	bl	8000bc4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f95e 	bl	8000bc4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x104>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001932:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
        || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1d3      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f90b 	bl	8000bc4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f907 	bl	8000bc4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b4      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8ea 	bl	8000bc4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8e6 	bl	8000bc4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e193      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f8ca 	bl	8000bc4 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8c6 	bl	8000bc4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e173      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x234>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8b3 	bl	8000bc4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8af 	bl	8000bc4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b79      	ldr	r3, [pc, #484]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f86f 	bl	8000bc4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f86b 	bl	8000bc4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e118      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x31e>
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x340>
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a60      	ldr	r2, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f830 	bl	8000bc4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff f82c 	bl	8000bc4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0d7      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x368>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f81a 	bl	8000bc4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f816 	bl	8000bc4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0c1      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ad 	beq.w	8001d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d145      	bne.n	8001c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ffea 	bl	8000bc4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe ffe6 	bl	8000bc4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e093      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	491b      	ldr	r1, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ffbb 	bl	8000bc4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe ffb7 	bl	8000bc4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e064      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x452>
 8001c70:	e05c      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ffa4 	bl	8000bc4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ffa0 	bl	8000bc4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_OscConfig+0x538>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d122      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9c0 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d2 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8d5 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8ac 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89e 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8af 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0208 	mvn.w	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f886 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f878 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f889 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f860 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f852 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f863 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0201 	mvn.w	r2, #1
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc70 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f900 	bl	8002260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f834 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8d2 	bl	800224c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a43      	ldr	r2, [pc, #268]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	@ (8002224 <TIM_Base_SetConfig+0x124>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3f      	ldr	r2, [pc, #252]	@ (8002228 <TIM_Base_SetConfig+0x128>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3e      	ldr	r2, [pc, #248]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a32      	ldr	r2, [pc, #200]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <TIM_Base_SetConfig+0x124>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <TIM_Base_SetConfig+0x128>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2c      	ldr	r2, [pc, #176]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2a      	ldr	r2, [pc, #168]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a29      	ldr	r2, [pc, #164]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a28      	ldr	r2, [pc, #160]	@ (8002240 <TIM_Base_SetConfig+0x140>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a27      	ldr	r2, [pc, #156]	@ (8002244 <TIM_Base_SetConfig+0x144>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <TIM_Base_SetConfig+0x148>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <TIM_Base_SetConfig+0x120>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_Base_SetConfig+0xf2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d103      	bne.n	80021fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	40001800 	.word	0x40001800
 8002244:	40001c00 	.word	0x40001c00
 8002248:	40002000 	.word	0x40002000

0800224c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0208 	add.w	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0208 	add.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022a8:	f240 1019 	movw	r0, #281	@ 0x119
 80022ac:	f004 fcee 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022c6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022ca:	f004 fcdf 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d103      	bne.n	80022f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00c      	b.n	8002310 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3308      	adds	r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e002      	b.n	8002304 <vListInsert+0x2e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d2f6      	bcs.n	80022fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800233c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002340:	f004 fca4 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6892      	ldr	r2, [r2, #8]
 8002362:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6852      	ldr	r2, [r2, #4]
 800236c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d103      	bne.n	8002380 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f240 101d 	movw	r0, #285	@ 0x11d
 800239a:	f004 fcb3 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023b4:	2301      	movs	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <xQueueGenericReset+0x30>
    __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	60fb      	str	r3, [r7, #12]
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d052      	beq.n	8002486 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d04e      	beq.n	8002486 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	2100      	movs	r1, #0
 80023f2:	fba3 2302 	umull	r2, r3, r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d000      	beq.n	80023fc <xQueueGenericReset+0x52>
 80023fa:	2101      	movs	r1, #1
 80023fc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d141      	bne.n	8002486 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002402:	f001 ffbf 	bl	8004384 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240e:	6939      	ldr	r1, [r7, #16]
 8002410:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	441a      	add	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2200      	movs	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	3b01      	subs	r3, #1
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	441a      	add	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	22ff      	movs	r2, #255	@ 0xff
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	22ff      	movs	r2, #255	@ 0xff
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00f      	beq.n	8002480 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	3310      	adds	r3, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f829 	bl	80034bc <xTaskRemoveFromEventList>
 800246a:	e009      	b.n	8002480 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3310      	adds	r3, #16
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff feff 	bl	8002274 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3324      	adds	r3, #36	@ 0x24
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fefa 	bl	8002274 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002480:	f001 ffb2 	bl	80043e8 <vPortExitCritical>
 8002484:	e001      	b.n	800248a <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <xQueueGenericReset+0xfe>
    __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	60bb      	str	r3, [r7, #8]
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4619      	mov	r1, r3
 80024ac:	2096      	movs	r0, #150	@ 0x96
 80024ae:	f004 fc29 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80024b2:	697b      	ldr	r3, [r7, #20]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	@ 0x28
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02e      	beq.n	8002532 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024d4:	2100      	movs	r1, #0
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	fba3 2302 	umull	r2, r3, r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d000      	beq.n	80024e4 <xQueueGenericCreate+0x28>
 80024e2:	2101      	movs	r1, #1
 80024e4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d123      	bne.n	8002532 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024f2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80024f6:	d81c      	bhi.n	8002532 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3350      	adds	r3, #80	@ 0x50
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f86a 	bl	80045e0 <pvPortMalloc>
 800250c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01d      	beq.n	8002550 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3350      	adds	r3, #80	@ 0x50
 800251c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f81e 	bl	800256c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002530:	e00e      	b.n	8002550 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <xQueueGenericCreate+0x94>
    __asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	613b      	str	r3, [r7, #16]
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fd70 	bl	8007038 <SEGGER_SYSVIEW_ShrinkId>
 8002558:	4603      	mov	r3, r0
 800255a:	4619      	mov	r1, r3
 800255c:	2098      	movs	r0, #152	@ 0x98
 800255e:	f004 fbd1 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002562:	69fb      	ldr	r3, [r7, #28]
    }
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e002      	b.n	800258e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800259a:	2101      	movs	r1, #1
 800259c:	69b8      	ldr	r0, [r7, #24]
 800259e:	f7ff ff04 	bl	80023aa <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	@ 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <xQueueReceive+0x32>
    __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	623b      	str	r3, [r7, #32]
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	e7fd      	b.n	80025e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <xQueueReceive+0x40>
 80025ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <xQueueReceive+0x44>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <xQueueReceive+0x46>
 80025f8:	2300      	movs	r3, #0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <xQueueReceive+0x62>
    __asm volatile
 80025fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	61fb      	str	r3, [r7, #28]
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	e7fd      	b.n	8002612 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002616:	f001 f96d 	bl	80038f4 <xTaskGetSchedulerState>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <xQueueReceive+0x72>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <xQueueReceive+0x76>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <xQueueReceive+0x78>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <xQueueReceive+0x94>
    __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	61bb      	str	r3, [r7, #24]
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002648:	f001 fe9c 	bl	8004384 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800265c:	f000 f88e 	bl	800277c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	1e5a      	subs	r2, r3, #1
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f000 ff21 	bl	80034bc <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800267a:	f001 feb5 	bl	80043e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800267e:	2101      	movs	r1, #1
 8002680:	20a4      	movs	r0, #164	@ 0xa4
 8002682:	f004 fb3f 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002686:	2301      	movs	r3, #1
 8002688:	e071      	b.n	800276e <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002690:	f001 feaa 	bl	80043e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002694:	2100      	movs	r1, #0
 8002696:	20a4      	movs	r0, #164	@ 0xa4
 8002698:	f004 fb34 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800269c:	2300      	movs	r3, #0
 800269e:	e066      	b.n	800276e <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 ffe6 	bl	800367c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026b4:	f001 fe98 	bl	80043e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026b8:	f000 fbea 	bl	8002e90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026bc:	f001 fe62 	bl	8004384 <vPortEnterCritical>
 80026c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d103      	bne.n	80026d6 <xQueueReceive+0x122>
 80026ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e2:	d103      	bne.n	80026ec <xQueueReceive+0x138>
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026ec:	f001 fe7c 	bl	80043e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 ffd7 	bl	80036ac <xTaskCheckForTimeOut>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d123      	bne.n	800274c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002706:	f000 f8b1 	bl	800286c <prvIsQueueEmpty>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d017      	beq.n	8002740 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002712:	3324      	adds	r3, #36	@ 0x24
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fe5d 	bl	80033d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800271e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002720:	f000 f852 	bl	80027c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002724:	f000 fbc2 	bl	8002eac <xTaskResumeAll>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d18c      	bne.n	8002648 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <xQueueReceive+0x1c4>)
 8002730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	e783      	b.n	8002648 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002742:	f000 f841 	bl	80027c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002746:	f000 fbb1 	bl	8002eac <xTaskResumeAll>
 800274a:	e77d      	b.n	8002648 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800274c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800274e:	f000 f83b 	bl	80027c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002752:	f000 fbab 	bl	8002eac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002758:	f000 f888 	bl	800286c <prvIsQueueEmpty>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f43f af72 	beq.w	8002648 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002764:	2100      	movs	r1, #0
 8002766:	20a4      	movs	r0, #164	@ 0xa4
 8002768:	f004 facc 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800276c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3730      	adds	r7, #48	@ 0x30
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d303      	bcc.n	80027b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	461a      	mov	r2, r3
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	f004 fe0c 	bl	80073d8 <memcpy>
    }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027d0:	f001 fdd8 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027dc:	e011      	b.n	8002802 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d012      	beq.n	800280c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3324      	adds	r3, #36	@ 0x24
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fe66 	bl	80034bc <xTaskRemoveFromEventList>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027f6:	f000 ffc5 	bl	8003784 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	dce9      	bgt.n	80027de <prvUnlockQueue+0x16>
 800280a:	e000      	b.n	800280e <prvUnlockQueue+0x46>
                    break;
 800280c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	22ff      	movs	r2, #255	@ 0xff
 8002812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002816:	f001 fde7 	bl	80043e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800281a:	f001 fdb3 	bl	8004384 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002824:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002826:	e011      	b.n	800284c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3310      	adds	r3, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fe41 	bl	80034bc <xTaskRemoveFromEventList>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002840:	f000 ffa0 	bl	8003784 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002844:	7bbb      	ldrb	r3, [r7, #14]
 8002846:	3b01      	subs	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800284c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002850:	2b00      	cmp	r3, #0
 8002852:	dce9      	bgt.n	8002828 <prvUnlockQueue+0x60>
 8002854:	e000      	b.n	8002858 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002856:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	22ff      	movs	r2, #255	@ 0xff
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002860:	f001 fdc2 	bl	80043e8 <vPortExitCritical>
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002874:	f001 fd86 	bl	8004384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e001      	b.n	800288a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800288a:	f001 fdad 	bl	80043e8 <vPortExitCritical>

    return xReturn;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e01e      	b.n	800290e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028d0:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <vQueueAddToRegistry+0x9c>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d105      	bne.n	80028ec <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <vQueueAddToRegistry+0x9c>)
 80028e6:	4413      	add	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
                    break;
 80028ea:	e013      	b.n	8002914 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <vQueueAddToRegistry+0x70>
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <vQueueAddToRegistry+0x9c>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4a0c      	ldr	r2, [pc, #48]	@ (8002934 <vQueueAddToRegistry+0x9c>)
 8002904:	4413      	add	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b07      	cmp	r3, #7
 8002912:	d9dd      	bls.n	80028d0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002926:	20b6      	movs	r0, #182	@ 0xb6
 8002928:	f004 f9b0 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800292c:	bf00      	nop
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000080 	.word	0x20000080

08002938 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002948:	f001 fd1c 	bl	8004384 <vPortEnterCritical>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002952:	b25b      	sxtb	r3, r3
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <vQueueWaitForMessageRestricted+0x2a>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002968:	b25b      	sxtb	r3, r3
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d103      	bne.n	8002978 <vQueueWaitForMessageRestricted+0x40>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002978:	f001 fd36 	bl	80043e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3324      	adds	r3, #36	@ 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fd4b 	bl	8003428 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff18 	bl	80027c8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002998:	20b9      	movs	r0, #185	@ 0xb9
 800299a:	f004 f977 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
    }
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08a      	sub	sp, #40	@ 0x28
 80029aa:	af04      	add	r7, sp, #16
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fe11 	bl	80045e0 <pvPortMalloc>
 80029be:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d013      	beq.n	80029ee <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80029c6:	2058      	movs	r0, #88	@ 0x58
 80029c8:	f001 fe0a 	bl	80045e0 <pvPortMalloc>
 80029cc:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029d4:	2258      	movs	r2, #88	@ 0x58
 80029d6:	2100      	movs	r1, #0
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f004 fcd1 	bl	8007380 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e4:	e005      	b.n	80029f2 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029e6:	6938      	ldr	r0, [r7, #16]
 80029e8:	f001 ff2c 	bl	8004844 <vPortFree>
 80029ec:	e001      	b.n	80029f2 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f8:	2300      	movs	r3, #0
 80029fa:	9303      	str	r3, [sp, #12]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f82d 	bl	8002a6e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002a14:	697b      	ldr	r3, [r7, #20]
    }
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af02      	add	r7, sp, #8
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff ffb3 	bl	80029a6 <prvCreateTask>
 8002a40:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002a48:	6938      	ldr	r0, [r7, #16]
 8002a4a:	f000 f8a1 	bl	8002b90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e002      	b.n	8002a5a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	20c2      	movs	r0, #194	@ 0xc2
 8002a60:	f004 f950 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002a64:	697b      	ldr	r3, [r7, #20]
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b088      	sub	sp, #32
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	461a      	mov	r2, r3
 8002a86:	21a5      	movs	r1, #165	@ 0xa5
 8002a88:	f004 fc7a 	bl	8007380 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a96:	3b01      	subs	r3, #1
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	617b      	str	r3, [r7, #20]
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01e      	beq.n	8002b0c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e012      	b.n	8002afa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	7819      	ldrb	r1, [r3, #0]
 8002adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3334      	adds	r3, #52	@ 0x34
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	d9e9      	bls.n	8002ad4 <prvInitialiseNewTask+0x66>
 8002b00:	e000      	b.n	8002b04 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b02:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d90b      	bls.n	8002b2a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	613b      	str	r3, [r7, #16]
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d901      	bls.n	8002b34 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b30:	2304      	movs	r3, #4
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b3e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fbb7 	bl	80022b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fbb2 	bl	80022b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b58:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	f1c3 0205 	rsb	r2, r3, #5
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f001 fa08 	bl	8003f84 <pxPortInitialiseStack>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002b98:	f001 fbf4 	bl	8004384 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002b9c:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <prvAddNewTaskToReadyList+0x130>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	4a47      	ldr	r2, [pc, #284]	@ (8002cc0 <prvAddNewTaskToReadyList+0x130>)
 8002ba4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <prvAddNewTaskToReadyList+0x134>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002bae:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <prvAddNewTaskToReadyList+0x134>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <prvAddNewTaskToReadyList+0x130>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d110      	bne.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002bbc:	f000 fe00 	bl	80037c0 <prvInitialiseTaskLists>
 8002bc0:	e00d      	b.n	8002bde <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002bc2:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <prvAddNewTaskToReadyList+0x138>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bca:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <prvAddNewTaskToReadyList+0x134>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d802      	bhi.n	8002bde <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <prvAddNewTaskToReadyList+0x134>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <prvAddNewTaskToReadyList+0x13c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a39      	ldr	r2, [pc, #228]	@ (8002ccc <prvAddNewTaskToReadyList+0x13c>)
 8002be6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002be8:	4b38      	ldr	r3, [pc, #224]	@ (8002ccc <prvAddNewTaskToReadyList+0x13c>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <prvAddNewTaskToReadyList+0x94>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 f8f7 	bl	8006dec <SEGGER_SYSVIEW_OnTaskCreate>
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	461d      	mov	r5, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461c      	mov	r4, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	1ae3      	subs	r3, r4, r3
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	f002 f80a 	bl	8004c38 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f964 	bl	8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	2201      	movs	r2, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <prvAddNewTaskToReadyList+0x140>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	4a25      	ldr	r2, [pc, #148]	@ (8002cd0 <prvAddNewTaskToReadyList+0x140>)
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c42:	4924      	ldr	r1, [pc, #144]	@ (8002cd4 <prvAddNewTaskToReadyList+0x144>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3304      	adds	r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	3204      	adds	r2, #4
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1d1a      	adds	r2, r3, #4
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <prvAddNewTaskToReadyList+0x144>)
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	615a      	str	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8c:	4911      	ldr	r1, [pc, #68]	@ (8002cd4 <prvAddNewTaskToReadyList+0x144>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	480c      	ldr	r0, [pc, #48]	@ (8002cd4 <prvAddNewTaskToReadyList+0x144>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4403      	add	r3, r0
 8002cac:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002cae:	f001 fb9b 	bl	80043e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002cb2:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <prvAddNewTaskToReadyList+0x138>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000198 	.word	0x20000198
 8002cc4:	200000c0 	.word	0x200000c0
 8002cc8:	200001a4 	.word	0x200001a4
 8002ccc:	200001b4 	.word	0x200001b4
 8002cd0:	200001a0 	.word	0x200001a0
 8002cd4:	200000c4 	.word	0x200000c4

08002cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002cea:	f000 f8d1 	bl	8002e90 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <vTaskDelay+0x68>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d00b      	beq.n	8002d0e <vTaskDelay+0x36>
    __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	60bb      	str	r3, [r7, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fe11 	bl	8003938 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d16:	f000 f8c9 	bl	8002eac <xTaskResumeAll>
 8002d1a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <vTaskDelay+0x6c>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002d32:	20c5      	movs	r0, #197	@ 0xc5
 8002d34:	f003 ffaa 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200001c0 	.word	0x200001c0
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	@ 0x28
 8002d4c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e011      	b.n	8002d80 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <prvCreateIdleTasks+0x88>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4413      	add	r3, r2
 8002d62:	7819      	ldrb	r1, [r3, #0]
 8002d64:	1d3a      	adds	r2, r7, #4
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4413      	add	r3, r2
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002d6e:	1d3a      	adds	r2, r7, #4
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b09      	cmp	r3, #9
 8002d84:	ddea      	ble.n	8002d5c <prvCreateIdleTasks+0x14>
 8002d86:	e000      	b.n	8002d8a <prvCreateIdleTasks+0x42>
        {
            break;
 8002d88:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e015      	b.n	8002dbc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <prvCreateIdleTasks+0x8c>)
 8002d92:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd8 <prvCreateIdleTasks+0x90>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	1d39      	adds	r1, r7, #4
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2282      	movs	r2, #130	@ 0x82
 8002da8:	6938      	ldr	r0, [r7, #16]
 8002daa:	f7ff fe38 	bl	8002a1e <xTaskCreate>
 8002dae:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dde6      	ble.n	8002d90 <prvCreateIdleTasks+0x48>
 8002dc2:	e000      	b.n	8002dc6 <prvCreateIdleTasks+0x7e>
        {
            break;
 8002dc4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08007464 	.word	0x08007464
 8002dd4:	0800379d 	.word	0x0800379d
 8002dd8:	200001bc 	.word	0x200001bc

08002ddc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002de2:	f7ff ffb1 	bl	8002d48 <prvCreateIdleTasks>
 8002de6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002dee:	f000 fe31 	bl	8003a54 <xTimerCreateTimerTask>
 8002df2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d124      	bne.n	8002e44 <vTaskStartScheduler+0x68>
    __asm volatile
 8002dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	60bb      	str	r3, [r7, #8]
}
 8002e0c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <vTaskStartScheduler+0x9c>)
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e16:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <vTaskStartScheduler+0xa0>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <vTaskStartScheduler+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <vTaskStartScheduler+0xa8>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <vTaskStartScheduler+0xac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d102      	bne.n	8002e34 <vTaskStartScheduler+0x58>
 8002e2e:	f003 ffc1 	bl	8006db4 <SEGGER_SYSVIEW_OnIdle>
 8002e32:	e004      	b.n	8002e3e <vTaskStartScheduler+0x62>
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <vTaskStartScheduler+0xac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 f819 	bl	8006e70 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002e3e:	f001 f931 	bl	80040a4 <xPortStartScheduler>
 8002e42:	e00f      	b.n	8002e64 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d10b      	bne.n	8002e64 <vTaskStartScheduler+0x88>
    __asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	607b      	str	r3, [r7, #4]
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <vTaskStartScheduler+0xb0>)
 8002e66:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002e68:	20cd      	movs	r0, #205	@ 0xcd
 8002e6a:	f003 ff0f 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200001b8 	.word	0x200001b8
 8002e7c:	200001a4 	.word	0x200001a4
 8002e80:	2000019c 	.word	0x2000019c
 8002e84:	200001bc 	.word	0x200001bc
 8002e88:	200000c0 	.word	0x200000c0
 8002e8c:	08007554 	.word	0x08007554

08002e90 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <vTaskSuspendAll+0x18>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <vTaskSuspendAll+0x18>)
 8002e9c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002e9e:	20cf      	movs	r0, #207	@ 0xcf
 8002ea0:	f003 fef4 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200001c0 	.word	0x200001c0

08002eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002eba:	f001 fa63 	bl	8004384 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002ec2:	4b73      	ldr	r3, [pc, #460]	@ (8003090 <xTaskResumeAll+0x1e4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <xTaskResumeAll+0x36>
    __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002ee2:	4b6b      	ldr	r3, [pc, #428]	@ (8003090 <xTaskResumeAll+0x1e4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	4a69      	ldr	r2, [pc, #420]	@ (8003090 <xTaskResumeAll+0x1e4>)
 8002eea:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002eec:	4b68      	ldr	r3, [pc, #416]	@ (8003090 <xTaskResumeAll+0x1e4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f040 80c0 	bne.w	8003076 <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ef6:	4b67      	ldr	r3, [pc, #412]	@ (8003094 <xTaskResumeAll+0x1e8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80bb 	beq.w	8003076 <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f00:	e092      	b.n	8003028 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f02:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <xTaskResumeAll+0x1ec>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	6a12      	ldr	r2, [r2, #32]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	69d2      	ldr	r2, [r2, #28]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d103      	bne.n	8002f38 <xTaskResumeAll+0x8c>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1e5a      	subs	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d103      	bne.n	8002f76 <xTaskResumeAll+0xca>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1e5a      	subs	r2, r3, #1
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 ffb3 	bl	8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
 8002f96:	4b41      	ldr	r3, [pc, #260]	@ (800309c <xTaskResumeAll+0x1f0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800309c <xTaskResumeAll+0x1f0>)
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	493e      	ldr	r1, [pc, #248]	@ (80030a0 <xTaskResumeAll+0x1f4>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	3204      	adds	r2, #4
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	1d1a      	adds	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <xTaskResumeAll+0x1f4>)
 8002fe4:	441a      	add	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fee:	492c      	ldr	r1, [pc, #176]	@ (80030a0 <xTaskResumeAll+0x1f4>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003000:	1c59      	adds	r1, r3, #1
 8003002:	4827      	ldr	r0, [pc, #156]	@ (80030a0 <xTaskResumeAll+0x1f4>)
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4403      	add	r3, r0
 800300e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <xTaskResumeAll+0x1f8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	429a      	cmp	r2, r3
 800301c:	d904      	bls.n	8003028 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800301e:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <xTaskResumeAll+0x1fc>)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2101      	movs	r1, #1
 8003024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003028:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <xTaskResumeAll+0x1ec>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f47f af68 	bne.w	8002f02 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003038:	f000 fc40 	bl	80038bc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <xTaskResumeAll+0x200>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d012      	beq.n	800306e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003048:	f000 f85a 	bl	8003100 <xTaskIncrementTick>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003052:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <xTaskResumeAll+0x1fc>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2101      	movs	r1, #1
 8003058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	3b01      	subs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ef      	bne.n	8003048 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <xTaskResumeAll+0x200>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800306e:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <xTaskResumeAll+0x1fc>)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003076:	f001 f9b7 	bl	80043e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4619      	mov	r1, r3
 800307e:	20d0      	movs	r0, #208	@ 0xd0
 8003080:	f003 fe40 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200001c0 	.word	0x200001c0
 8003094:	20000198 	.word	0x20000198
 8003098:	20000158 	.word	0x20000158
 800309c:	200001a0 	.word	0x200001a0
 80030a0:	200000c4 	.word	0x200000c4
 80030a4:	200000c0 	.word	0x200000c0
 80030a8:	200001ac 	.word	0x200001ac
 80030ac:	200001a8 	.word	0x200001a8

080030b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <xTaskGetTickCount+0x20>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	20d1      	movs	r0, #209	@ 0xd1
 80030c0:	f003 fe20 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80030c4:	687b      	ldr	r3, [r7, #4]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000019c 	.word	0x2000019c

080030d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030da:	f001 fa3f 	bl	800455c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <xTaskGetTickCountFromISR+0x28>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80030e8:	6839      	ldr	r1, [r7, #0]
 80030ea:	20d2      	movs	r0, #210	@ 0xd2
 80030ec:	f003 fe0a 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80030f0:	683b      	ldr	r3, [r7, #0]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000019c 	.word	0x2000019c

08003100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800310a:	4b74      	ldr	r3, [pc, #464]	@ (80032dc <xTaskIncrementTick+0x1dc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80d4 	bne.w	80032bc <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003114:	4b72      	ldr	r3, [pc, #456]	@ (80032e0 <xTaskIncrementTick+0x1e0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800311c:	4a70      	ldr	r2, [pc, #448]	@ (80032e0 <xTaskIncrementTick+0x1e0>)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d121      	bne.n	800316c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003128:	4b6e      	ldr	r3, [pc, #440]	@ (80032e4 <xTaskIncrementTick+0x1e4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <xTaskIncrementTick+0x4a>
    __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	607b      	str	r3, [r7, #4]
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	e7fd      	b.n	8003146 <xTaskIncrementTick+0x46>
 800314a:	4b66      	ldr	r3, [pc, #408]	@ (80032e4 <xTaskIncrementTick+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <xTaskIncrementTick+0x1e8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a63      	ldr	r2, [pc, #396]	@ (80032e4 <xTaskIncrementTick+0x1e4>)
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4a63      	ldr	r2, [pc, #396]	@ (80032e8 <xTaskIncrementTick+0x1e8>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b63      	ldr	r3, [pc, #396]	@ (80032ec <xTaskIncrementTick+0x1ec>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <xTaskIncrementTick+0x1ec>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	f000 fba8 	bl	80038bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800316c:	4b60      	ldr	r3, [pc, #384]	@ (80032f0 <xTaskIncrementTick+0x1f0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	429a      	cmp	r2, r3
 8003174:	f0c0 80a7 	bcc.w	80032c6 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003178:	4b5a      	ldr	r3, [pc, #360]	@ (80032e4 <xTaskIncrementTick+0x1e4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003182:	4b5b      	ldr	r3, [pc, #364]	@ (80032f0 <xTaskIncrementTick+0x1f0>)
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	601a      	str	r2, [r3, #0]
                    break;
 800318a:	e09c      	b.n	80032c6 <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800318c:	4b55      	ldr	r3, [pc, #340]	@ (80032e4 <xTaskIncrementTick+0x1e4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d203      	bcs.n	80031ac <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80031a4:	4a52      	ldr	r2, [pc, #328]	@ (80032f0 <xTaskIncrementTick+0x1f0>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6013      	str	r3, [r2, #0]
                        break;
 80031aa:	e08c      	b.n	80032c6 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	6892      	ldr	r2, [r2, #8]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	3304      	adds	r3, #4
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d103      	bne.n	80031da <xTaskIncrementTick+0xda>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2200      	movs	r2, #0
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01e      	beq.n	8003230 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	6a12      	ldr	r2, [r2, #32]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	69d2      	ldr	r2, [r2, #28]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	3318      	adds	r3, #24
 8003214:	429a      	cmp	r2, r3
 8003216:	d103      	bne.n	8003220 <xTaskIncrementTick+0x120>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6a1a      	ldr	r2, [r3, #32]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1e5a      	subs	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	4618      	mov	r0, r3
 8003234:	f003 fe5e 	bl	8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	4b2c      	ldr	r3, [pc, #176]	@ (80032f4 <xTaskIncrementTick+0x1f4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	4a2b      	ldr	r2, [pc, #172]	@ (80032f4 <xTaskIncrementTick+0x1f4>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	492a      	ldr	r1, [pc, #168]	@ (80032f8 <xTaskIncrementTick+0x1f8>)
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3304      	adds	r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	3204      	adds	r2, #4
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <xTaskIncrementTick+0x1f8>)
 800328e:	441a      	add	r2, r3
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	615a      	str	r2, [r3, #20]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003298:	4917      	ldr	r1, [pc, #92]	@ (80032f8 <xTaskIncrementTick+0x1f8>)
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	4812      	ldr	r0, [pc, #72]	@ (80032f8 <xTaskIncrementTick+0x1f8>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ba:	e75d      	b.n	8003178 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <xTaskIncrementTick+0x1fc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a0e      	ldr	r2, [pc, #56]	@ (80032fc <xTaskIncrementTick+0x1fc>)
 80032c4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	4619      	mov	r1, r3
 80032ca:	20db      	movs	r0, #219	@ 0xdb
 80032cc:	f003 fd1a 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3728      	adds	r7, #40	@ 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200001c0 	.word	0x200001c0
 80032e0:	2000019c 	.word	0x2000019c
 80032e4:	20000150 	.word	0x20000150
 80032e8:	20000154 	.word	0x20000154
 80032ec:	200001b0 	.word	0x200001b0
 80032f0:	200001b8 	.word	0x200001b8
 80032f4:	200001a0 	.word	0x200001a0
 80032f8:	200000c4 	.word	0x200000c4
 80032fc:	200001a8 	.word	0x200001a8

08003300 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003306:	4b2e      	ldr	r3, [pc, #184]	@ (80033c0 <vTaskSwitchContext+0xc0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800330e:	4b2d      	ldr	r3, [pc, #180]	@ (80033c4 <vTaskSwitchContext+0xc4>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003314:	e04f      	b.n	80033b6 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003316:	4b2b      	ldr	r3, [pc, #172]	@ (80033c4 <vTaskSwitchContext+0xc4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800331c:	4b2a      	ldr	r3, [pc, #168]	@ (80033c8 <vTaskSwitchContext+0xc8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f1c3 031f 	rsb	r3, r3, #31
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	4926      	ldr	r1, [pc, #152]	@ (80033cc <vTaskSwitchContext+0xcc>)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <vTaskSwitchContext+0x5e>
    __asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	607b      	str	r3, [r7, #4]
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	e7fd      	b.n	800335a <vTaskSwitchContext+0x5a>
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <vTaskSwitchContext+0xcc>)
 800336a:	4413      	add	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3308      	adds	r3, #8
 8003380:	429a      	cmp	r2, r3
 8003382:	d103      	bne.n	800338c <vTaskSwitchContext+0x8c>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <vTaskSwitchContext+0xd0>)
 8003394:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003396:	4b0f      	ldr	r3, [pc, #60]	@ (80033d4 <vTaskSwitchContext+0xd4>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <vTaskSwitchContext+0xd0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d102      	bne.n	80033a8 <vTaskSwitchContext+0xa8>
 80033a2:	f003 fd07 	bl	8006db4 <SEGGER_SYSVIEW_OnIdle>
 80033a6:	e004      	b.n	80033b2 <vTaskSwitchContext+0xb2>
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <vTaskSwitchContext+0xd0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fd5f 	bl	8006e70 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80033b2:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <vTaskSwitchContext+0xd0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
    }
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200001c0 	.word	0x200001c0
 80033c4:	200001ac 	.word	0x200001ac
 80033c8:	200001a0 	.word	0x200001a0
 80033cc:	200000c4 	.word	0x200000c4
 80033d0:	200000c0 	.word	0x200000c0
 80033d4:	200001bc 	.word	0x200001bc

080033d8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60fb      	str	r3, [r7, #12]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003400:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <vTaskPlaceOnEventList+0x4c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3318      	adds	r3, #24
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe ff64 	bl	80022d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800340e:	2101      	movs	r1, #1
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f000 fa91 	bl	8003938 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003416:	20e1      	movs	r0, #225	@ 0xe1
 8003418:	f003 fc38 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200000c0 	.word	0x200000c0

08003428 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	613b      	str	r3, [r7, #16]
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	e7fd      	b.n	800344e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x90>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	61da      	str	r2, [r3, #28]
 8003460:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	621a      	str	r2, [r3, #32]
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x90>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	3218      	adds	r2, #24
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f103 0218 	add.w	r2, r3, #24
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	629a      	str	r2, [r3, #40]	@ 0x28
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	68b8      	ldr	r0, [r7, #8]
 80034a4:	f000 fa48 	bl	8003938 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80034a8:	20e3      	movs	r0, #227	@ 0xe3
 80034aa:	f003 fbef 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200000c0 	.word	0x200000c0

080034bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	60fb      	str	r3, [r7, #12]
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	e7fd      	b.n	80034e6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	6a12      	ldr	r2, [r2, #32]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	69d2      	ldr	r2, [r2, #28]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	3318      	adds	r3, #24
 800350c:	429a      	cmp	r2, r3
 800350e:	d103      	bne.n	8003518 <xTaskRemoveFromEventList+0x5c>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	@ 0x28
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003528:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <xTaskRemoveFromEventList+0x1a8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d164      	bne.n	80035fa <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	3304      	adds	r3, #4
 8003552:	429a      	cmp	r2, r3
 8003554:	d103      	bne.n	800355e <xTaskRemoveFromEventList+0xa2>
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fcbf 	bl	8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	2201      	movs	r2, #1
 800357c:	409a      	lsls	r2, r3
 800357e:	4b3a      	ldr	r3, [pc, #232]	@ (8003668 <xTaskRemoveFromEventList+0x1ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	4a38      	ldr	r2, [pc, #224]	@ (8003668 <xTaskRemoveFromEventList+0x1ac>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358c:	4937      	ldr	r1, [pc, #220]	@ (800366c <xTaskRemoveFromEventList+0x1b0>)
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	3204      	adds	r2, #4
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4a28      	ldr	r2, [pc, #160]	@ (800366c <xTaskRemoveFromEventList+0x1b0>)
 80035cc:	441a      	add	r2, r3
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	615a      	str	r2, [r3, #20]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d6:	4925      	ldr	r1, [pc, #148]	@ (800366c <xTaskRemoveFromEventList+0x1b0>)
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035e8:	1c59      	adds	r1, r3, #1
 80035ea:	4820      	ldr	r0, [pc, #128]	@ (800366c <xTaskRemoveFromEventList+0x1b0>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	6019      	str	r1, [r3, #0]
 80035f8:	e01b      	b.n	8003632 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <xTaskRemoveFromEventList+0x1b4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	621a      	str	r2, [r3, #32]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	3218      	adds	r2, #24
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f103 0218 	add.w	r2, r3, #24
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	4a12      	ldr	r2, [pc, #72]	@ (8003670 <xTaskRemoveFromEventList+0x1b4>)
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <xTaskRemoveFromEventList+0x1b4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	4a10      	ldr	r2, [pc, #64]	@ (8003670 <xTaskRemoveFromEventList+0x1b4>)
 8003630:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <xTaskRemoveFromEventList+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	429a      	cmp	r2, r3
 800363e:	d905      	bls.n	800364c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <xTaskRemoveFromEventList+0x1bc>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e001      	b.n	8003650 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	4619      	mov	r1, r3
 8003654:	20e4      	movs	r0, #228	@ 0xe4
 8003656:	f003 fb55 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	@ 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200001c0 	.word	0x200001c0
 8003668:	200001a0 	.word	0x200001a0
 800366c:	200000c4 	.word	0x200000c4
 8003670:	20000158 	.word	0x20000158
 8003674:	200000c0 	.word	0x200000c0
 8003678:	200001ac 	.word	0x200001ac

0800367c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003684:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <vTaskInternalSetTimeOutState+0x28>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <vTaskInternalSetTimeOutState+0x2c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003694:	20e7      	movs	r0, #231	@ 0xe7
 8003696:	f003 faf9 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200001b0 	.word	0x200001b0
 80036a8:	2000019c 	.word	0x2000019c

080036ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	613b      	str	r3, [r7, #16]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	60fb      	str	r3, [r7, #12]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80036f2:	f000 fe47 	bl	8004384 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036f6:	4b21      	ldr	r3, [pc, #132]	@ (800377c <xTaskCheckForTimeOut+0xd0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d102      	bne.n	8003716 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e026      	b.n	8003764 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <xTaskCheckForTimeOut+0xd4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d00a      	beq.n	8003738 <xTaskCheckForTimeOut+0x8c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	d305      	bcc.n	8003738 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e015      	b.n	8003764 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20b      	bcs.n	800375a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff94 	bl	800367c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e004      	b.n	8003764 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003764:	f000 fe40 	bl	80043e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4619      	mov	r1, r3
 800376c:	20e8      	movs	r0, #232	@ 0xe8
 800376e:	f003 fac9 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003772:	69fb      	ldr	r3, [r7, #28]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	2000019c 	.word	0x2000019c
 8003780:	200001b0 	.word	0x200001b0

08003784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <vTaskMissedYield+0x14>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800378e:	20e9      	movs	r0, #233	@ 0xe9
 8003790:	f003 fa7c 	bl	8006c8c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003794:	bf00      	nop
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200001ac 	.word	0x200001ac

0800379c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037a4:	f000 f84c 	bl	8003840 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <prvIdleTask+0x20>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037b8:	bf00      	nop
 80037ba:	e7f3      	b.n	80037a4 <prvIdleTask+0x8>
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e00c      	b.n	80037e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <prvInitialiseTaskLists+0x60>)
 80037d8:	4413      	add	r3, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fd4a 	bl	8002274 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d9ef      	bls.n	80037cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037ec:	480d      	ldr	r0, [pc, #52]	@ (8003824 <prvInitialiseTaskLists+0x64>)
 80037ee:	f7fe fd41 	bl	8002274 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037f2:	480d      	ldr	r0, [pc, #52]	@ (8003828 <prvInitialiseTaskLists+0x68>)
 80037f4:	f7fe fd3e 	bl	8002274 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037f8:	480c      	ldr	r0, [pc, #48]	@ (800382c <prvInitialiseTaskLists+0x6c>)
 80037fa:	f7fe fd3b 	bl	8002274 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80037fe:	480c      	ldr	r0, [pc, #48]	@ (8003830 <prvInitialiseTaskLists+0x70>)
 8003800:	f7fe fd38 	bl	8002274 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003804:	480b      	ldr	r0, [pc, #44]	@ (8003834 <prvInitialiseTaskLists+0x74>)
 8003806:	f7fe fd35 	bl	8002274 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <prvInitialiseTaskLists+0x78>)
 800380c:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <prvInitialiseTaskLists+0x64>)
 800380e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <prvInitialiseTaskLists+0x7c>)
 8003812:	4a05      	ldr	r2, [pc, #20]	@ (8003828 <prvInitialiseTaskLists+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200000c4 	.word	0x200000c4
 8003824:	20000128 	.word	0x20000128
 8003828:	2000013c 	.word	0x2000013c
 800382c:	20000158 	.word	0x20000158
 8003830:	2000016c 	.word	0x2000016c
 8003834:	20000184 	.word	0x20000184
 8003838:	20000150 	.word	0x20000150
 800383c:	20000154 	.word	0x20000154

08003840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003846:	e019      	b.n	800387c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003848:	f000 fd9c 	bl	8004384 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800384c:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <prvCheckTasksWaitingTermination+0x50>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fd77 	bl	800234c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <prvCheckTasksWaitingTermination+0x54>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <prvCheckTasksWaitingTermination+0x54>)
 8003866:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <prvCheckTasksWaitingTermination+0x58>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <prvCheckTasksWaitingTermination+0x58>)
 8003870:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003872:	f000 fdb9 	bl	80043e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f810 	bl	800389c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <prvCheckTasksWaitingTermination+0x58>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e1      	bne.n	8003848 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000016c 	.word	0x2000016c
 8003894:	20000198 	.word	0x20000198
 8003898:	20000180 	.word	0x20000180

0800389c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 ffcb 	bl	8004844 <vPortFree>
            vPortFree( pxTCB );
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 ffc8 	bl	8004844 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <prvResetNextTaskUnblockTime+0x30>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038ca:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <prvResetNextTaskUnblockTime+0x34>)
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038d2:	e005      	b.n	80038e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <prvResetNextTaskUnblockTime+0x30>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a04      	ldr	r2, [pc, #16]	@ (80038f0 <prvResetNextTaskUnblockTime+0x34>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000150 	.word	0x20000150
 80038f0:	200001b8 	.word	0x200001b8

080038f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80038fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <xTaskGetSchedulerState+0x3c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003902:	2301      	movs	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e008      	b.n	800391a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <xTaskGetSchedulerState+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003910:	2302      	movs	r3, #2
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	e001      	b.n	800391a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4619      	mov	r1, r3
 800391e:	20f5      	movs	r0, #245	@ 0xf5
 8003920:	f003 f9f0 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003924:	687b      	ldr	r3, [r7, #4]
    }
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200001a4 	.word	0x200001a4
 8003934:	200001c0 	.word	0x200001c0

08003938 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003942:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <prvAddCurrentTaskToDelayedList+0x100>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003948:	4b3c      	ldr	r3, [pc, #240]	@ (8003a3c <prvAddCurrentTaskToDelayedList+0x104>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800394e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a40 <prvAddCurrentTaskToDelayedList+0x108>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003954:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3304      	adds	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fcf6 	bl	800234c <uxListRemove>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	2201      	movs	r2, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x110>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4013      	ands	r3, r2
 800397a:	4a33      	ldr	r2, [pc, #204]	@ (8003a48 <prvAddCurrentTaskToDelayedList+0x110>)
 800397c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d124      	bne.n	80039d0 <prvAddCurrentTaskToDelayedList+0x98>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x114>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	4b2c      	ldr	r3, [pc, #176]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	3204      	adds	r2, #4
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x114>)
 80039c0:	615a      	str	r2, [r3, #20]
 80039c2:	4b22      	ldr	r3, [pc, #136]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x114>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a20      	ldr	r2, [pc, #128]	@ (8003a4c <prvAddCurrentTaskToDelayedList+0x114>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039ce:	e02e      	b.n	8003a2e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d20d      	bcs.n	8003a04 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039e8:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2104      	movs	r1, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fac2 	bl	8006f78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f7fe fc6a 	bl	80022d6 <vListInsert>
}
 8003a02:	e014      	b.n	8003a2e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2104      	movs	r1, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fab4 	bl	8006f78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	69b8      	ldr	r0, [r7, #24]
 8003a1a:	f7fe fc5c 	bl	80022d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0x118>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d202      	bcs.n	8003a2e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003a28:	4a09      	ldr	r2, [pc, #36]	@ (8003a50 <prvAddCurrentTaskToDelayedList+0x118>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6013      	str	r3, [r2, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000019c 	.word	0x2000019c
 8003a3c:	20000150 	.word	0x20000150
 8003a40:	20000154 	.word	0x20000154
 8003a44:	200000c0 	.word	0x200000c0
 8003a48:	200001a0 	.word	0x200001a0
 8003a4c:	20000184 	.word	0x20000184
 8003a50:	200001b8 	.word	0x200001b8

08003a54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a5e:	f000 fa5b 	bl	8003f18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <xTimerCreateTimerTask+0x64>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a6a:	4b14      	ldr	r3, [pc, #80]	@ (8003abc <xTimerCreateTimerTask+0x68>)
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2302      	movs	r3, #2
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a78:	4911      	ldr	r1, [pc, #68]	@ (8003ac0 <xTimerCreateTimerTask+0x6c>)
 8003a7a:	4812      	ldr	r0, [pc, #72]	@ (8003ac4 <xTimerCreateTimerTask+0x70>)
 8003a7c:	f7fe ffcf 	bl	8002a1e <xTaskCreate>
 8003a80:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	603b      	str	r3, [r7, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003aa8:	f003 f92c 	bl	8006d04 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003aac:	687b      	ldr	r3, [r7, #4]
    }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001f4 	.word	0x200001f4
 8003abc:	200001f8 	.word	0x200001f8
 8003ac0:	0800746c 	.word	0x0800746c
 8003ac4:	08003b6d 	.word	0x08003b6d

08003ac8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ad4:	e008      	b.n	8003ae8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	18d1      	adds	r1, r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f8df 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <prvReloadTimer+0xe>
        }
    }
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b16:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <prvProcessExpiredTimer+0x5c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fc11 	bl	800234c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff ffc3 	bl	8003ac8 <prvReloadTimer>
 8003b42:	e008      	b.n	8003b56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	4798      	blx	r3
    }
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200001ec 	.word	0x200001ec

08003b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f859 	bl	8003c30 <prvGetNextExpireTime>
 8003b7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4619      	mov	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f805 	bl	8003b94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b8a:	f000 f8d7 	bl	8003d3c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b8e:	bf00      	nop
 8003b90:	e7f0      	b.n	8003b74 <prvTimerTask+0x8>
	...

08003b94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b9e:	f7ff f977 	bl	8002e90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f866 	bl	8003c78 <prvSampleTimeNow>
 8003bac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d130      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d806      	bhi.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bc2:	f7ff f973 	bl	8002eac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff9f 	bl	8003b0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bce:	e024      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd6:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <prvProcessTimerOrBlockTask+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <prvProcessTimerOrBlockTask+0x50>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x52>
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <prvProcessTimerOrBlockTask+0x94>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fe fe9f 	bl	8002938 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bfa:	f7ff f957 	bl	8002eac <xTaskResumeAll>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003c04:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <prvProcessTimerOrBlockTask+0x98>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
    }
 8003c14:	e001      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c16:	f7ff f949 	bl	8002eac <xTaskResumeAll>
    }
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200001f0 	.word	0x200001f0
 8003c28:	200001f4 	.word	0x200001f4
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <prvGetNextExpireTime+0x44>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <prvGetNextExpireTime+0x16>
 8003c42:	2201      	movs	r2, #1
 8003c44:	e000      	b.n	8003c48 <prvGetNextExpireTime+0x18>
 8003c46:	2200      	movs	r2, #0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <prvGetNextExpireTime+0x44>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e001      	b.n	8003c64 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c64:	68fb      	ldr	r3, [r7, #12]
    }
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	200001ec 	.word	0x200001ec

08003c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003c80:	f7ff fa16 	bl	80030b0 <xTaskGetTickCount>
 8003c84:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <prvSampleTimeNow+0x3c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c90:	f000 f91c 	bl	8003ecc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <prvSampleTimeNow+0x3c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200001fc 	.word	0x200001fc

08003cb8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d812      	bhi.n	8003d04 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e01b      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <prvInsertTimerInActiveList+0x7c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe faea 	bl	80022d6 <vListInsert>
 8003d02:	e012      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d206      	bcs.n	8003d1a <prvInsertTimerInActiveList+0x62>
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <prvInsertTimerInActiveList+0x80>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe fad6 	bl	80022d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d2a:	697b      	ldr	r3, [r7, #20]
    }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200001f0 	.word	0x200001f0
 8003d38:	200001ec 	.word	0x200001ec

08003d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003d4e:	e0a9      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f2c0 80a6 	blt.w	8003ea4 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe faef 	bl	800234c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff81 	bl	8003c78 <prvSampleTimeNow>
 8003d76:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	f200 808e 	bhi.w	8003e9e <prvProcessReceivedCommands+0x162>
 8003d82:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <prvProcessReceivedCommands+0x4c>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003dad 	.word	0x08003dad
 8003d90:	08003e15 	.word	0x08003e15
 8003d94:	08003e29 	.word	0x08003e29
 8003d98:	08003e75 	.word	0x08003e75
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dad 	.word	0x08003dad
 8003da4:	08003e15 	.word	0x08003e15
 8003da8:	08003e29 	.word	0x08003e29
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	18d1      	adds	r1, r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	69f8      	ldr	r0, [r7, #28]
 8003dcc:	f7ff ff74 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d065      	beq.n	8003ea2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	4413      	add	r3, r2
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4619      	mov	r1, r3
 8003df0:	69f8      	ldr	r0, [r7, #28]
 8003df2:	f7ff fe69 	bl	8003ac8 <prvReloadTimer>
 8003df6:	e008      	b.n	8003e0a <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	69f8      	ldr	r0, [r7, #28]
 8003e10:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e12:	e046      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e26:	e03d      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	617b      	str	r3, [r7, #20]
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	18d1      	adds	r1, r2, r3
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	69f8      	ldr	r0, [r7, #28]
 8003e6e:	f7ff ff23 	bl	8003cb8 <prvInsertTimerInActiveList>
                        break;
 8003e72:	e017      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003e82:	69f8      	ldr	r0, [r7, #28]
 8003e84:	f000 fcde 	bl	8004844 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e88:	e00c      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e9c:	e002      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <prvProcessReceivedCommands+0x168>
                        break;
 8003ea2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003ea4:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <prvProcessReceivedCommands+0x18c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f107 0108 	add.w	r1, r7, #8
 8003eac:	2200      	movs	r2, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fb80 	bl	80025b4 <xQueueReceive>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f47f af4a 	bne.w	8003d50 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200001f4 	.word	0x200001f4

08003ecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ed2:	e009      	b.n	8003ee8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <prvSwitchTimerLists+0x44>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ede:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f7ff fe12 	bl	8003b0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <prvSwitchTimerLists+0x44>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <prvSwitchTimerLists+0x44>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <prvSwitchTimerLists+0x48>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a04      	ldr	r2, [pc, #16]	@ (8003f10 <prvSwitchTimerLists+0x44>)
 8003efe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f00:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <prvSwitchTimerLists+0x48>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
    }
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200001ec 	.word	0x200001ec
 8003f14:	200001f0 	.word	0x200001f0

08003f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f1c:	f000 fa32 	bl	8004384 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11d      	bne.n	8003f64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f28:	4811      	ldr	r0, [pc, #68]	@ (8003f70 <prvCheckForValidListAndQueue+0x58>)
 8003f2a:	f7fe f9a3 	bl	8002274 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f2e:	4811      	ldr	r0, [pc, #68]	@ (8003f74 <prvCheckForValidListAndQueue+0x5c>)
 8003f30:	f7fe f9a0 	bl	8002274 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f34:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <prvCheckForValidListAndQueue+0x60>)
 8003f36:	4a0e      	ldr	r2, [pc, #56]	@ (8003f70 <prvCheckForValidListAndQueue+0x58>)
 8003f38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	@ (8003f7c <prvCheckForValidListAndQueue+0x64>)
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f74 <prvCheckForValidListAndQueue+0x5c>)
 8003f3e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003f40:	2200      	movs	r2, #0
 8003f42:	210c      	movs	r1, #12
 8003f44:	200a      	movs	r0, #10
 8003f46:	f7fe fab9 	bl	80024bc <xQueueGenericCreate>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f4e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <prvCheckForValidListAndQueue+0x54>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4908      	ldr	r1, [pc, #32]	@ (8003f80 <prvCheckForValidListAndQueue+0x68>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fc9a 	bl	8002898 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f64:	f000 fa40 	bl	80043e8 <vPortExitCritical>
    }
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200001f4 	.word	0x200001f4
 8003f70:	200001c4 	.word	0x200001c4
 8003f74:	200001d8 	.word	0x200001d8
 8003f78:	200001ec 	.word	0x200001ec
 8003f7c:	200001f0 	.word	0x200001f0
 8003f80:	08007474 	.word	0x08007474

08003f84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <pxPortInitialiseStack+0x64>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b14      	subs	r3, #20
 8003fbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f06f 0202 	mvn.w	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b20      	subs	r3, #32
 8003fd8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	08003fed 	.word	0x08003fed

08003fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <prvTaskExitError+0x58>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d00b      	beq.n	8004018 <prvTaskExitError+0x2c>
    __asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <prvTaskExitError+0x28>
    __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
}
 800402a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800402c:	bf00      	nop
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0fc      	beq.n	800402e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	200000c0 	.word	0x200000c0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
 800409a:	0000      	.short	0x0000
 800409c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop

080040a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040aa:	4b69      	ldr	r3, [pc, #420]	@ (8004250 <xPortStartScheduler+0x1ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <xPortStartScheduler+0x1b0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10b      	bne.n	80040cc <xPortStartScheduler+0x28>
    __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	623b      	str	r3, [r7, #32]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040cc:	4b60      	ldr	r3, [pc, #384]	@ (8004250 <xPortStartScheduler+0x1ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a61      	ldr	r2, [pc, #388]	@ (8004258 <xPortStartScheduler+0x1b4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10b      	bne.n	80040ee <xPortStartScheduler+0x4a>
    __asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	e7fd      	b.n	80040ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80040ee:	4b5b      	ldr	r3, [pc, #364]	@ (800425c <xPortStartScheduler+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80040f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f6:	332c      	adds	r3, #44	@ 0x2c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a59      	ldr	r2, [pc, #356]	@ (8004260 <xPortStartScheduler+0x1bc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <xPortStartScheduler+0x74>
    __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61fb      	str	r3, [r7, #28]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	3338      	adds	r3, #56	@ 0x38
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a51      	ldr	r2, [pc, #324]	@ (8004264 <xPortStartScheduler+0x1c0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <xPortStartScheduler+0x98>
    __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	61bb      	str	r3, [r7, #24]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <xPortStartScheduler+0x1c4>)
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414e:	22ff      	movs	r2, #255	@ 0xff
 8004150:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b41      	ldr	r3, [pc, #260]	@ (800426c <xPortStartScheduler+0x1c8>)
 8004166:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004168:	4b40      	ldr	r3, [pc, #256]	@ (800426c <xPortStartScheduler+0x1c8>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <xPortStartScheduler+0xe4>
    __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	617b      	str	r3, [r7, #20]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d013      	beq.n	80041be <xPortStartScheduler+0x11a>
    __asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	613b      	str	r3, [r7, #16]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b80      	cmp	r3, #128	@ 0x80
 80041c8:	d0f1      	beq.n	80041ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d103      	bne.n	80041d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80041d0:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e004      	b.n	80041e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	4a24      	ldr	r2, [pc, #144]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041e2:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4a21      	ldr	r2, [pc, #132]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <xPortStartScheduler+0x1cc>)
 80041f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004200:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1b      	ldr	r2, [pc, #108]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800420a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <xPortStartScheduler+0x1d0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <xPortStartScheduler+0x1d0>)
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004216:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004218:	4b17      	ldr	r3, [pc, #92]	@ (8004278 <xPortStartScheduler+0x1d4>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800421e:	f000 f96d 	bl	80044fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <xPortStartScheduler+0x1d8>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004228:	f000 f98c 	bl	8004544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800422c:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <xPortStartScheduler+0x1dc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <xPortStartScheduler+0x1dc>)
 8004232:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004238:	f7ff ff1e 	bl	8004078 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800423c:	f7ff f860 	bl	8003300 <vTaskSwitchContext>
    prvTaskExitError();
 8004240:	f7ff fed4 	bl	8003fec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3730      	adds	r7, #48	@ 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	410fc271 	.word	0x410fc271
 8004258:	410fc270 	.word	0x410fc270
 800425c:	e000ed08 	.word	0xe000ed08
 8004260:	08004051 	.word	0x08004051
 8004264:	08004441 	.word	0x08004441
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000200 	.word	0x20000200
 8004270:	20000204 	.word	0x20000204
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	e000ed1c 	.word	0xe000ed1c
 800427c:	2000000c 	.word	0x2000000c
 8004280:	e000ef34 	.word	0xe000ef34

08004284 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428a:	4b38      	ldr	r3, [pc, #224]	@ (800436c <vInitPrioGroupValue+0xe8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a38      	ldr	r2, [pc, #224]	@ (8004370 <vInitPrioGroupValue+0xec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10b      	bne.n	80042ac <vInitPrioGroupValue+0x28>
    __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ac:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <vInitPrioGroupValue+0xe8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <vInitPrioGroupValue+0xf0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10b      	bne.n	80042ce <vInitPrioGroupValue+0x4a>
    __asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	613b      	str	r3, [r7, #16]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <vInitPrioGroupValue+0xf4>)
 80042d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	22ff      	movs	r2, #255	@ 0xff
 80042de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b22      	ldr	r3, [pc, #136]	@ (800437c <vInitPrioGroupValue+0xf8>)
 80042f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b22      	ldr	r3, [pc, #136]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b80      	cmp	r3, #128	@ 0x80
 800431c:	d0ef      	beq.n	80042fe <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431e:	4b18      	ldr	r3, [pc, #96]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00b      	beq.n	8004342 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004342:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 800434a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004354:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <vInitPrioGroupValue+0xfc>)
 8004356:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00
 8004370:	410fc271 	.word	0x410fc271
 8004374:	410fc270 	.word	0x410fc270
 8004378:	e000e400 	.word	0xe000e400
 800437c:	20000200 	.word	0x20000200
 8004380:	20000204 	.word	0x20000204

08004384 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <vPortEnterCritical+0x5c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d110      	bne.n	80043d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <vPortEnterCritical+0x60>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vPortEnterCritical+0x4a>
    }
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000000c 	.word	0x2000000c
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ee:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <vPortExitCritical+0x50>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <vPortExitCritical+0x26>
    __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	607b      	str	r3, [r7, #4]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <vPortExitCritical+0x50>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <vPortExitCritical+0x50>)
 8004416:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d105      	bne.n	800442c <vPortExitCritical+0x44>
 8004420:	2300      	movs	r3, #0
 8004422:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800442a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	2000000c 	.word	0x2000000c
 800443c:	00000000 	.word	0x00000000

08004440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004440:	f3ef 8009 	mrs	r0, PSP
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <pxCurrentTCBConst>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f01e 0f10 	tst.w	lr, #16
 8004450:	bf08      	it	eq
 8004452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004464:	f380 8811 	msr	BASEPRI, r0
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f7fe ff46 	bl	8003300 <vTaskSwitchContext>
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f380 8811 	msr	BASEPRI, r0
 800447c:	bc09      	pop	{r0, r3}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004486:	f01e 0f10 	tst.w	lr, #16
 800448a:	bf08      	it	eq
 800448c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004490:	f380 8809 	msr	PSP, r0
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst>:
 80044a0:	200000c0 	.word	0x200000c0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
    __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
}
 80044c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80044c2:	f002 fb69 	bl	8006b98 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044c6:	f7fe fe1b 	bl	8003100 <xTaskIncrementTick>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80044d0:	f002 fbc0 	bl	8006c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <SysTick_Handler+0x50>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e001      	b.n	80044e2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80044de:	f002 fb9d 	bl	8006c1c <SEGGER_SYSVIEW_RecordExitISR>
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f383 8811 	msr	BASEPRI, r3
}
 80044ec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
 8004552:	0000      	.short	0x0000
 8004554:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop

0800455c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004562:	f3ef 8305 	mrs	r3, IPSR
 8004566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d915      	bls.n	800459a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800456e:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <vPortValidateInterruptPriority+0x74>)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004578:	4b16      	ldr	r3, [pc, #88]	@ (80045d4 <vPortValidateInterruptPriority+0x78>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	7afa      	ldrb	r2, [r7, #11]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20b      	bcs.n	800459a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	607b      	str	r3, [r7, #4]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800459a:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <vPortValidateInterruptPriority+0x7c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <vPortValidateInterruptPriority+0x80>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90b      	bls.n	80045c2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	603b      	str	r3, [r7, #0]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <vPortValidateInterruptPriority+0x62>
    }
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e3f0 	.word	0xe000e3f0
 80045d4:	20000200 	.word	0x20000200
 80045d8:	e000ed0c 	.word	0xe000ed0c
 80045dc:	20000204 	.word	0x20000204

080045e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	@ 0x38
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d022      	beq.n	8004638 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80045f2:	2308      	movs	r3, #8
 80045f4:	43db      	mvns	r3, r3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d81b      	bhi.n	8004634 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80045fc:	2208      	movs	r2, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	f1c3 0308 	rsb	r3, r3, #8
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	43db      	mvns	r3, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d804      	bhi.n	800462e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	4413      	add	r3, r2
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e004      	b.n	8004638 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	e001      	b.n	8004638 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004638:	f7fe fc2a 	bl	8002e90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800463c:	4b7a      	ldr	r3, [pc, #488]	@ (8004828 <pvPortMalloc+0x248>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004644:	f000 f974 	bl	8004930 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f2c0 80d3 	blt.w	80047f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80cf 	beq.w	80047f6 <pvPortMalloc+0x216>
 8004658:	4b74      	ldr	r3, [pc, #464]	@ (800482c <pvPortMalloc+0x24c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	f200 80c9 	bhi.w	80047f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004664:	4b72      	ldr	r3, [pc, #456]	@ (8004830 <pvPortMalloc+0x250>)
 8004666:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004668:	4b71      	ldr	r3, [pc, #452]	@ (8004830 <pvPortMalloc+0x250>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	4a70      	ldr	r2, [pc, #448]	@ (8004834 <pvPortMalloc+0x254>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d305      	bcc.n	8004682 <pvPortMalloc+0xa2>
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	4a6f      	ldr	r2, [pc, #444]	@ (8004838 <pvPortMalloc+0x258>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d801      	bhi.n	8004682 <pvPortMalloc+0xa2>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <pvPortMalloc+0xa4>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d129      	bne.n	80046dc <pvPortMalloc+0xfc>
    __asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	623b      	str	r3, [r7, #32]
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	e7fd      	b.n	800469c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80046a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	4a61      	ldr	r2, [pc, #388]	@ (8004834 <pvPortMalloc+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d305      	bcc.n	80046be <pvPortMalloc+0xde>
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	4a60      	ldr	r2, [pc, #384]	@ (8004838 <pvPortMalloc+0x258>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d801      	bhi.n	80046be <pvPortMalloc+0xde>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <pvPortMalloc+0xe0>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <pvPortMalloc+0xfc>
    __asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	61fb      	str	r3, [r7, #28]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d903      	bls.n	80046ee <pvPortMalloc+0x10e>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1d8      	bne.n	80046a0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <pvPortMalloc+0x248>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d07e      	beq.n	80047f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4413      	add	r3, r2
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	4a4b      	ldr	r2, [pc, #300]	@ (8004834 <pvPortMalloc+0x254>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d305      	bcc.n	8004716 <pvPortMalloc+0x136>
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	4a4a      	ldr	r2, [pc, #296]	@ (8004838 <pvPortMalloc+0x258>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d801      	bhi.n	8004716 <pvPortMalloc+0x136>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <pvPortMalloc+0x138>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <pvPortMalloc+0x154>
    __asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	61bb      	str	r3, [r7, #24]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90b      	bls.n	800475e <pvPortMalloc+0x17e>
    __asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	617b      	str	r3, [r7, #20]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	2308      	movs	r3, #8
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	429a      	cmp	r2, r3
 800476c:	d924      	bls.n	80047b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <pvPortMalloc+0x1b8>
    __asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <pvPortMalloc+0x24c>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <pvPortMalloc+0x24c>)
 80047c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047c6:	4b19      	ldr	r3, [pc, #100]	@ (800482c <pvPortMalloc+0x24c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b1c      	ldr	r3, [pc, #112]	@ (800483c <pvPortMalloc+0x25c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d203      	bcs.n	80047da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <pvPortMalloc+0x24c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a19      	ldr	r2, [pc, #100]	@ (800483c <pvPortMalloc+0x25c>)
 80047d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80047da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ec:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <pvPortMalloc+0x260>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <pvPortMalloc+0x260>)
 80047f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047f6:	f7fe fb59 	bl	8002eac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <pvPortMalloc+0x23c>
    __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <pvPortMalloc+0x238>
    return pvReturn;
 800481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800481e:	4618      	mov	r0, r3
 8004820:	3738      	adds	r7, #56	@ 0x38
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20012e10 	.word	0x20012e10
 800482c:	20012e14 	.word	0x20012e14
 8004830:	20012e08 	.word	0x20012e08
 8004834:	20000208 	.word	0x20000208
 8004838:	20012e07 	.word	0x20012e07
 800483c:	20012e18 	.word	0x20012e18
 8004840:	20012e1c 	.word	0x20012e1c

08004844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d060      	beq.n	8004918 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004856:	2308      	movs	r3, #8
 8004858:	425b      	negs	r3, r3
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4a2e      	ldr	r2, [pc, #184]	@ (8004920 <vPortFree+0xdc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d305      	bcc.n	8004878 <vPortFree+0x34>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4a2d      	ldr	r2, [pc, #180]	@ (8004924 <vPortFree+0xe0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d801      	bhi.n	8004878 <vPortFree+0x34>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <vPortFree+0x36>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <vPortFree+0x52>
    __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <vPortFree+0x72>
    __asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	613b      	str	r3, [r7, #16]
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	e7fd      	b.n	80048b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <vPortFree+0x92>
    __asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60fb      	str	r3, [r7, #12]
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	e7fd      	b.n	80048d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da1c      	bge.n	8004918 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80048f2:	f7fe facd 	bl	8002e90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <vPortFree+0xe4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <vPortFree+0xe4>)
 8004902:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004904:	69b8      	ldr	r0, [r7, #24]
 8004906:	f000 f86d 	bl	80049e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <vPortFree+0xe8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	4a06      	ldr	r2, [pc, #24]	@ (800492c <vPortFree+0xe8>)
 8004912:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004914:	f7fe faca 	bl	8002eac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004918:	bf00      	nop
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000208 	.word	0x20000208
 8004924:	20012e07 	.word	0x20012e07
 8004928:	20012e14 	.word	0x20012e14
 800492c:	20012e20 	.word	0x20012e20

08004930 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004936:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800493a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800493c:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <prvHeapInit+0xa0>)
 800493e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3307      	adds	r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	4a1c      	ldr	r2, [pc, #112]	@ (80049d0 <prvHeapInit+0xa0>)
 8004960:	4413      	add	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a1b      	ldr	r2, [pc, #108]	@ (80049d4 <prvHeapInit+0xa4>)
 8004968:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800496a:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <prvHeapInit+0xa4>)
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	@ (80049d8 <prvHeapInit+0xa8>)
 800498c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <prvHeapInit+0xa8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004996:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <prvHeapInit+0xa8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <prvHeapInit+0xa8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <prvHeapInit+0xac>)
 80049ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a07      	ldr	r2, [pc, #28]	@ (80049e0 <prvHeapInit+0xb0>)
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000208 	.word	0x20000208
 80049d4:	20012e08 	.word	0x20012e08
 80049d8:	20012e10 	.word	0x20012e10
 80049dc:	20012e18 	.word	0x20012e18
 80049e0:	20012e14 	.word	0x20012e14

080049e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80049ec:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <prvInsertBlockIntoFreeList+0xe4>)
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e002      	b.n	80049f8 <prvInsertBlockIntoFreeList+0x14>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d8f7      	bhi.n	80049f2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4a30      	ldr	r2, [pc, #192]	@ (8004ac8 <prvInsertBlockIntoFreeList+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004acc <prvInsertBlockIntoFreeList+0xe8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d305      	bcc.n	8004a1e <prvInsertBlockIntoFreeList+0x3a>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad0 <prvInsertBlockIntoFreeList+0xec>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d801      	bhi.n	8004a1e <prvInsertBlockIntoFreeList+0x3a>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <prvInsertBlockIntoFreeList+0x3c>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d108      	bne.n	8004a60 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	441a      	add	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d118      	bne.n	8004aa6 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b16      	ldr	r3, [pc, #88]	@ (8004ad4 <prvInsertBlockIntoFreeList+0xf0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d00d      	beq.n	8004a9c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e008      	b.n	8004aae <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <prvInsertBlockIntoFreeList+0xf0>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e003      	b.n	8004aae <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d002      	beq.n	8004abc <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20012e08 	.word	0x20012e08
 8004acc:	20000208 	.word	0x20000208
 8004ad0:	20012e07 	.word	0x20012e07
 8004ad4:	20012e10 	.word	0x20012e10

08004ad8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004adc:	4803      	ldr	r0, [pc, #12]	@ (8004aec <_cbSendSystemDesc+0x14>)
 8004ade:	f002 f805 	bl	8006aec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ae2:	4803      	ldr	r0, [pc, #12]	@ (8004af0 <_cbSendSystemDesc+0x18>)
 8004ae4:	f002 f802 	bl	8006aec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	0800747c 	.word	0x0800747c
 8004af0:	080074b8 	.word	0x080074b8

08004af4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b02:	4a06      	ldr	r2, [pc, #24]	@ (8004b1c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b04:	f001 fc76 	bl	80063f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b08:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b0c:	f001 fcb6 	bl	800647c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000000 	.word	0x20000000
 8004b18:	08004ad9 	.word	0x08004ad9
 8004b1c:	08007558 	.word	0x08007558

08004b20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	e033      	b.n	8004b94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b2c:	491e      	ldr	r1, [pc, #120]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	491a      	ldr	r1, [pc, #104]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	4c16      	ldr	r4, [pc, #88]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4423      	add	r3, r4
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	681c      	ldr	r4, [r3, #0]
 8004b60:	4d11      	ldr	r5, [pc, #68]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	442b      	add	r3, r5
 8004b6e:	330c      	adds	r3, #12
 8004b70:	681d      	ldr	r5, [r3, #0]
 8004b72:	4e0d      	ldr	r6, [pc, #52]	@ (8004ba8 <_cbSendTaskList+0x88>)
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4433      	add	r3, r6
 8004b80:	3310      	adds	r3, #16
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462b      	mov	r3, r5
 8004b88:	4622      	mov	r2, r4
 8004b8a:	f000 f8bd 	bl	8004d08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3301      	adds	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <_cbSendTaskList+0x8c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3c6      	bcc.n	8004b2c <_cbSendTaskList+0xc>
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba8:	20012e24 	.word	0x20012e24
 8004bac:	20012ec4 	.word	0x20012ec4

08004bb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004bb8:	f7fe fa8c 	bl	80030d4 <xTaskGetTickCountFromISR>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	4693      	mov	fp, r2
 8004bc4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	f04f 0a00 	mov.w	sl, #0
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004bdc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004be0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004be4:	4652      	mov	r2, sl
 8004be6:	465b      	mov	r3, fp
 8004be8:	1a14      	subs	r4, r2, r0
 8004bea:	eb63 0501 	sbc.w	r5, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	00ab      	lsls	r3, r5, #2
 8004bf8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004bfc:	00a2      	lsls	r2, r4, #2
 8004bfe:	4614      	mov	r4, r2
 8004c00:	461d      	mov	r5, r3
 8004c02:	eb14 0800 	adds.w	r8, r4, r0
 8004c06:	eb45 0901 	adc.w	r9, r5, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c26:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c46:	2205      	movs	r2, #5
 8004c48:	492b      	ldr	r1, [pc, #172]	@ (8004cf8 <SYSVIEW_AddTask+0xc0>)
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f002 fb88 	bl	8007360 <memcmp>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04b      	beq.n	8004cee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c56:	4b29      	ldr	r3, [pc, #164]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b07      	cmp	r3, #7
 8004c5c:	d903      	bls.n	8004c66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c5e:	4828      	ldr	r0, [pc, #160]	@ (8004d00 <SYSVIEW_AddTask+0xc8>)
 8004c60:	f002 faf4 	bl	800724c <SEGGER_SYSVIEW_Warn>
    return;
 8004c64:	e044      	b.n	8004cf0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c66:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4926      	ldr	r1, [pc, #152]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c7a:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4921      	ldr	r1, [pc, #132]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	491b      	ldr	r1, [pc, #108]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4916      	ldr	r1, [pc, #88]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4910      	ldr	r1, [pc, #64]	@ (8004d04 <SYSVIEW_AddTask+0xcc>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3310      	adds	r3, #16
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <SYSVIEW_AddTask+0xc4>)
 8004cda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f80e 	bl	8004d08 <SYSVIEW_SendTaskInfo>
 8004cec:	e000      	b.n	8004cf0 <SYSVIEW_AddTask+0xb8>
    return;
 8004cee:	bf00      	nop

}
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	080074c8 	.word	0x080074c8
 8004cfc:	20012ec4 	.word	0x20012ec4
 8004d00:	080074d0 	.word	0x080074d0
 8004d04:	20012e24 	.word	0x20012e24

08004d08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	@ 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 fb2e 	bl	8007380 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fddd 	bl	80068fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d42:	bf00      	nop
 8004d44:	3728      	adds	r7, #40	@ 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <__NVIC_EnableIRQ>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db0b      	blt.n	8004d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	4907      	ldr	r1, [pc, #28]	@ (8004d84 <__NVIC_EnableIRQ+0x38>)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	e000e100 	.word	0xe000e100

08004d88 <__NVIC_SetPriority>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db0a      	blt.n	8004db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <__NVIC_SetPriority+0x4c>)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	440b      	add	r3, r1
 8004dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004db0:	e00a      	b.n	8004dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4908      	ldr	r1, [pc, #32]	@ (8004dd8 <__NVIC_SetPriority+0x50>)
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	3b04      	subs	r3, #4
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	761a      	strb	r2, [r3, #24]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	e000e100 	.word	0xe000e100
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004de2:	f002 fa8f 	bl	8007304 <SEGGER_SYSVIEW_IsStarted>
 8004de6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004dee:	f001 fc09 	bl	8006604 <SEGGER_SYSVIEW_Start>
  }
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e06:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d806      	bhi.n	8004e1c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e18:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e1a:	e009      	b.n	8004e30 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e1c:	f7ff ffde 	bl	8004ddc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <_cbOnUARTRx+0x3c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f000 fb9c 	bl	8005568 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e30:	bf00      	nop
}
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000010 	.word	0x20000010

08004e3c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004e44:	4b14      	ldr	r3, [pc, #80]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d80f      	bhi.n	8004e6c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <_cbOnUARTTx+0x60>)
 8004e54:	5c9a      	ldrb	r2, [r3, r2]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e64:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e6a:	e00f      	b.n	8004e8c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <_cbOnUARTTx+0x5c>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa1b 	bl	80052b0 <SEGGER_RTT_ReadUpBufferNoLock>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da02      	bge.n	8004e8a <_cbOnUARTTx+0x4e>
    r = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e000      	b.n	8004e8c <_cbOnUARTTx+0x50>
  }
Done:
 8004e8a:	bf00      	nop
  return r;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010
 8004e9c:	08007560 	.word	0x08007560

08004ea0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ea8:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <SEGGER_UART_init+0x1c>)
 8004eaa:	4905      	ldr	r1, [pc, #20]	@ (8004ec0 <SEGGER_UART_init+0x20>)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f863 	bl	8004f78 <HIF_UART_Init>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	08004dfd 	.word	0x08004dfd
 8004ec0:	08004e3d 	.word	0x08004e3d

08004ec4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004eca:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <USART2_IRQHandler+0x80>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <USART2_IRQHandler+0x84>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 030b 	and.w	r3, r3, #11
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004eec:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <USART2_IRQHandler+0x88>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ef4:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <USART2_IRQHandler+0x88>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	79fa      	ldrb	r2, [r7, #7]
 8004efa:	4610      	mov	r0, r2
 8004efc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01a      	beq.n	8004f3e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <USART2_IRQHandler+0x8c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <USART2_IRQHandler+0x8c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1dfa      	adds	r2, r7, #7
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
 8004f1a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <USART2_IRQHandler+0x90>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0b      	ldr	r2, [pc, #44]	@ (8004f54 <USART2_IRQHandler+0x90>)
 8004f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e006      	b.n	8004f3e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <USART2_IRQHandler+0x80>)
 8004f32:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f34:	79fa      	ldrb	r2, [r7, #7]
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <USART2_IRQHandler+0x84>)
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e000      	b.n	8004f3e <USART2_IRQHandler+0x7a>
      return;
 8004f3c:	bf00      	nop
    }
  }
}
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40004404 	.word	0x40004404
 8004f4c:	20012ec8 	.word	0x20012ec8
 8004f50:	20012ecc 	.word	0x20012ecc
 8004f54:	4000440c 	.word	0x4000440c

08004f58 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	4000440c 	.word	0x4000440c

08004f78 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004f84:	4b2e      	ldr	r3, [pc, #184]	@ (8005040 <HIF_UART_Init+0xc8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	@ (8005040 <HIF_UART_Init+0xc8>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004f90:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <HIF_UART_Init+0xcc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <HIF_UART_Init+0xcc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005048 <HIF_UART_Init+0xd0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fa8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004fb0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004fb2:	4a25      	ldr	r2, [pc, #148]	@ (8005048 <HIF_UART_Init+0xd0>)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004fb8:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HIF_UART_Init+0xd4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004fcc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HIF_UART_Init+0xd4>)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <HIF_UART_Init+0xd8>)
 8004fd6:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004fda:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <HIF_UART_Init+0xdc>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <HIF_UART_Init+0xe0>)
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004fee:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <HIF_UART_Init+0xe4>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005006:	d302      	bcc.n	800500e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005008:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800500c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4a11      	ldr	r2, [pc, #68]	@ (8005060 <HIF_UART_Init+0xe8>)
 800501a:	b29b      	uxth	r3, r3
 800501c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800501e:	4a11      	ldr	r2, [pc, #68]	@ (8005064 <HIF_UART_Init+0xec>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005024:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <HIF_UART_Init+0xf0>)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800502a:	2106      	movs	r1, #6
 800502c:	2026      	movs	r0, #38	@ 0x26
 800502e:	f7ff feab 	bl	8004d88 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005032:	2026      	movs	r0, #38	@ 0x26
 8005034:	f7ff fe8a 	bl	8004d4c <__NVIC_EnableIRQ>
}
 8005038:	bf00      	nop
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023840 	.word	0x40023840
 8005044:	40023830 	.word	0x40023830
 8005048:	40020020 	.word	0x40020020
 800504c:	40020000 	.word	0x40020000
 8005050:	4000440c 	.word	0x4000440c
 8005054:	40004410 	.word	0x40004410
 8005058:	40004414 	.word	0x40004414
 800505c:	0501bd00 	.word	0x0501bd00
 8005060:	40004408 	.word	0x40004408
 8005064:	20012ec8 	.word	0x20012ec8
 8005068:	20012ecc 	.word	0x20012ecc

0800506c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <_DoInit+0xa0>)
 8005074:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005076:	22a8      	movs	r2, #168	@ 0xa8
 8005078:	2100      	movs	r1, #0
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	f002 f980 	bl	8007380 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2203      	movs	r2, #3
 8005084:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2203      	movs	r2, #3
 800508a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4a20      	ldr	r2, [pc, #128]	@ (8005110 <_DoInit+0xa4>)
 8005090:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <_DoInit+0xa8>)
 8005096:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800509e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <_DoInit+0xa4>)
 80050b6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <_DoInit+0xac>)
 80050bc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2210      	movs	r2, #16
 80050c2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80050d6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e00c      	b.n	80050fa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1c3 030f 	rsb	r3, r3, #15
 80050e6:	4a0d      	ldr	r2, [pc, #52]	@ (800511c <_DoInit+0xb0>)
 80050e8:	5cd1      	ldrb	r1, [r2, r3]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4413      	add	r3, r2
 80050f0:	460a      	mov	r2, r1
 80050f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3301      	adds	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d9ef      	bls.n	80050e0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005100:	f3bf 8f5f 	dmb	sy
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20012ed0 	.word	0x20012ed0
 8005110:	08007520 	.word	0x08007520
 8005114:	20012f78 	.word	0x20012f78
 8005118:	20013378 	.word	0x20013378
 800511c:	08007564 	.word	0x08007564

08005120 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	@ 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	429a      	cmp	r2, r3
 8005142:	d905      	bls.n	8005150 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
 800514e:	e007      	b.n	8005160 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	1acb      	subs	r3, r1, r3
 800515a:	4413      	add	r3, r2
 800515c:	3b01      	subs	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516a:	4293      	cmp	r3, r2
 800516c:	bf28      	it	cs
 800516e:	4613      	movcs	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4293      	cmp	r3, r2
 8005178:	bf28      	it	cs
 800517a:	4613      	movcs	r3, r2
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f002 f923 	bl	80073d8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	4413      	add	r3, r2
 8005198:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	4413      	add	r3, r2
 80051a0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	4413      	add	r3, r2
 80051b0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d101      	bne.n	80051c0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1b2      	bne.n	8005136 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80051d0:	6a3b      	ldr	r3, [r7, #32]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	@ 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80051da:	b580      	push	{r7, lr}
 80051dc:	b088      	sub	sp, #32
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d911      	bls.n	8005222 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f002 f8e3 	bl	80073d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005212:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	441a      	add	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005220:	e01f      	b.n	8005262 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	6938      	ldr	r0, [r7, #16]
 8005236:	f002 f8cf 	bl	80073d8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4619      	mov	r1, r3
 8005252:	6938      	ldr	r0, [r7, #16]
 8005254:	f002 f8c0 	bl	80073d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005258:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	60da      	str	r2, [r3, #12]
}
 8005262:	bf00      	nop
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	429a      	cmp	r2, r3
 8005284:	d808      	bhi.n	8005298 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad2      	subs	r2, r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e004      	b.n	80052a2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80052bc:	4b3e      	ldr	r3, [pc, #248]	@ (80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b53      	cmp	r3, #83	@ 0x53
 80052c8:	d001      	beq.n	80052ce <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80052ca:	f7ff fecf 	bl	800506c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4a37      	ldr	r2, [pc, #220]	@ (80053b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80052f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d92b      	bls.n	8005354 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4293      	cmp	r3, r2
 800530c:	bf28      	it	cs
 800530e:	4613      	movcs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	4413      	add	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005322:	f002 f859 	bl	80073d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800532e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800533e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800534c:	429a      	cmp	r2, r3
 800534e:	d101      	bne.n	8005354 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4293      	cmp	r3, r2
 8005362:	bf28      	it	cs
 8005364:	4613      	movcs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005374:	4413      	add	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6939      	ldr	r1, [r7, #16]
 800537c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800537e:	f002 f82b 	bl	80073d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800538a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800539a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	@ 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20012ed0 	.word	0x20012ed0

080053bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	@ 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80053c8:	4b3e      	ldr	r3, [pc, #248]	@ (80054c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b53      	cmp	r3, #83	@ 0x53
 80053d4:	d001      	beq.n	80053da <SEGGER_RTT_ReadNoLock+0x1e>
 80053d6:	f7ff fe49 	bl	800506c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3360      	adds	r3, #96	@ 0x60
 80053e6:	4a37      	ldr	r2, [pc, #220]	@ (80054c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80053e8:	4413      	add	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d92b      	bls.n	8005460 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4293      	cmp	r3, r2
 8005418:	bf28      	it	cs
 800541a:	4613      	movcs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	4413      	add	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	6939      	ldr	r1, [r7, #16]
 800542c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800542e:	f001 ffd3 	bl	80073d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800543a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4413      	add	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800544a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005458:	429a      	cmp	r2, r3
 800545a:	d101      	bne.n	8005460 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800545c:	2300      	movs	r3, #0
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4293      	cmp	r3, r2
 800546e:	bf28      	it	cs
 8005470:	4613      	movcs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d019      	beq.n	80054ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	4413      	add	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6939      	ldr	r1, [r7, #16]
 8005488:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800548a:	f001 ffa5 	bl	80073d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800548e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	4413      	add	r3, r2
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	@ 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20012ed0 	.word	0x20012ed0

080054c8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	3360      	adds	r3, #96	@ 0x60
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80054e6:	4413      	add	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d029      	beq.n	8005546 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d82e      	bhi.n	8005554 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d013      	beq.n	8005526 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80054fe:	e029      	b.n	8005554 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7ff feb2 	bl	800526a <_GetAvailWriteSpace>
 8005506:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d202      	bcs.n	8005516 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005514:	e021      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7ff fe5b 	bl	80051da <_WriteNoCheck>
    break;
 8005524:	e019      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f7ff fe9f 	bl	800526a <_GetAvailWriteSpace>
 800552c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4293      	cmp	r3, r2
 8005534:	bf28      	it	cs
 8005536:	4613      	movcs	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	69b9      	ldr	r1, [r7, #24]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7ff fe4b 	bl	80051da <_WriteNoCheck>
    break;
 8005544:	e009      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff fde8 	bl	8005120 <_WriteBlocking>
 8005550:	61f8      	str	r0, [r7, #28]
    break;
 8005552:	e002      	b.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
    break;
 8005558:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800555a:	69fb      	ldr	r3, [r7, #28]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20012ed0 	.word	0x20012ed0

08005568 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b53      	cmp	r3, #83	@ 0x53
 8005580:	d001      	beq.n	8005586 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005582:	f7ff fd73 	bl	800506c <_DoInit>
  SEGGER_RTT_LOCK();
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff95 	bl	80054c8 <SEGGER_RTT_WriteDownBufferNoLock>
 800559e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055a6:	697b      	ldr	r3, [r7, #20]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20012ed0 	.word	0x20012ed0

080055b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055c2:	4b3d      	ldr	r3, [pc, #244]	@ (80056b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b53      	cmp	r3, #83	@ 0x53
 80055ce:	d001      	beq.n	80055d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80055d0:	f7ff fd4c 	bl	800506c <_DoInit>
  SEGGER_RTT_LOCK();
 80055d4:	f3ef 8311 	mrs	r3, BASEPRI
 80055d8:	f04f 0120 	mov.w	r1, #32
 80055dc:	f381 8811 	msr	BASEPRI, r1
 80055e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055e2:	4b35      	ldr	r3, [pc, #212]	@ (80056b8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80055ea:	6939      	ldr	r1, [r7, #16]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	440b      	add	r3, r1
 80055fa:	3304      	adds	r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	dbeb      	blt.n	80055ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8005612:	e000      	b.n	8005616 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005614:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	da3f      	bge.n	80056a0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	4613      	mov	r3, r2
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	3304      	adds	r3, #4
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800564a:	6939      	ldr	r1, [r7, #16]
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	3320      	adds	r3, #32
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800565e:	6939      	ldr	r1, [r7, #16]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3324      	adds	r3, #36	@ 0x24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	332c      	adds	r3, #44	@ 0x2c
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800569a:	f3bf 8f5f 	dmb	sy
 800569e:	e002      	b.n	80056a6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80056ac:	69fb      	ldr	r3, [r7, #28]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20012ed0 	.word	0x20012ed0

080056bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80056ca:	4b21      	ldr	r3, [pc, #132]	@ (8005750 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b53      	cmp	r3, #83	@ 0x53
 80056d6:	d001      	beq.n	80056dc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80056d8:	f7ff fcc8 	bl	800506c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056de:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d82c      	bhi.n	8005740 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80056e6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ea:	f04f 0120 	mov.w	r1, #32
 80056ee:	f381 8811 	msr	BASEPRI, r1
 80056f2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3360      	adds	r3, #96	@ 0x60
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800572e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005730:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800573a:	2300      	movs	r3, #0
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	e002      	b.n	8005746 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	@ 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20012ed0 	.word	0x20012ed0

08005754 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	60fa      	str	r2, [r7, #12]
 800576a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b80      	cmp	r3, #128	@ 0x80
 8005770:	d90a      	bls.n	8005788 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005772:	2380      	movs	r3, #128	@ 0x80
 8005774:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005776:	e007      	b.n	8005788 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	1c53      	adds	r3, r2, #1
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	60f9      	str	r1, [r7, #12]
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	1e5a      	subs	r2, r3, #1
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <_EncodeStr+0x46>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ee      	bne.n	8005778 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3307      	adds	r3, #7
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057d2:	4b34      	ldr	r3, [pc, #208]	@ (80058a4 <_HandleIncomingPacket+0xd8>)
 80057d4:	7e1b      	ldrb	r3, [r3, #24]
 80057d6:	4618      	mov	r0, r3
 80057d8:	1cfb      	adds	r3, r7, #3
 80057da:	2201      	movs	r2, #1
 80057dc:	4619      	mov	r1, r3
 80057de:	f7ff fded 	bl	80053bc <SEGGER_RTT_ReadNoLock>
 80057e2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d057      	beq.n	800589a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	2b80      	cmp	r3, #128	@ 0x80
 80057ee:	d031      	beq.n	8005854 <_HandleIncomingPacket+0x88>
 80057f0:	2b80      	cmp	r3, #128	@ 0x80
 80057f2:	dc40      	bgt.n	8005876 <_HandleIncomingPacket+0xaa>
 80057f4:	2b07      	cmp	r3, #7
 80057f6:	dc15      	bgt.n	8005824 <_HandleIncomingPacket+0x58>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dd3c      	ble.n	8005876 <_HandleIncomingPacket+0xaa>
 80057fc:	3b01      	subs	r3, #1
 80057fe:	2b06      	cmp	r3, #6
 8005800:	d839      	bhi.n	8005876 <_HandleIncomingPacket+0xaa>
 8005802:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <_HandleIncomingPacket+0x3c>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800582b 	.word	0x0800582b
 800580c:	08005831 	.word	0x08005831
 8005810:	08005837 	.word	0x08005837
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005843 	.word	0x08005843
 800581c:	08005849 	.word	0x08005849
 8005820:	0800584f 	.word	0x0800584f
 8005824:	2b7f      	cmp	r3, #127	@ 0x7f
 8005826:	d033      	beq.n	8005890 <_HandleIncomingPacket+0xc4>
 8005828:	e025      	b.n	8005876 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800582a:	f000 feeb 	bl	8006604 <SEGGER_SYSVIEW_Start>
      break;
 800582e:	e034      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005830:	f000 ffa4 	bl	800677c <SEGGER_SYSVIEW_Stop>
      break;
 8005834:	e031      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005836:	f001 f97d 	bl	8006b34 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800583a:	e02e      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800583c:	f001 f942 	bl	8006ac4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005840:	e02b      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005842:	f000 ffc1 	bl	80067c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005846:	e028      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005848:	f001 fcae 	bl	80071a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800584c:	e025      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800584e:	f001 fc8d 	bl	800716c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005852:	e022      	b.n	800589a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005854:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <_HandleIncomingPacket+0xd8>)
 8005856:	7e1b      	ldrb	r3, [r3, #24]
 8005858:	4618      	mov	r0, r3
 800585a:	1cfb      	adds	r3, r7, #3
 800585c:	2201      	movs	r2, #1
 800585e:	4619      	mov	r1, r3
 8005860:	f7ff fdac 	bl	80053bc <SEGGER_RTT_ReadNoLock>
 8005864:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fbf2 	bl	8007058 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005874:	e00e      	b.n	8005894 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	b25b      	sxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	da0c      	bge.n	8005898 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <_HandleIncomingPacket+0xd8>)
 8005880:	7e1b      	ldrb	r3, [r3, #24]
 8005882:	4618      	mov	r0, r3
 8005884:	1cfb      	adds	r3, r7, #3
 8005886:	2201      	movs	r2, #1
 8005888:	4619      	mov	r1, r3
 800588a:	f7ff fd97 	bl	80053bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800588e:	e003      	b.n	8005898 <_HandleIncomingPacket+0xcc>
      break;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <_HandleIncomingPacket+0xce>
      break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <_HandleIncomingPacket+0xce>
      break;
 8005898:	bf00      	nop
    }
  }
}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20014390 	.word	0x20014390

080058a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	@ 0x30
 80058ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80058ae:	2301      	movs	r3, #1
 80058b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058bc:	4b32      	ldr	r3, [pc, #200]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058c2:	e00b      	b.n	80058dc <_TrySendOverflowPacket+0x34>
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e0:	d8f0      	bhi.n	80058c4 <_TrySendOverflowPacket+0x1c>
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058f2:	4b26      	ldr	r3, [pc, #152]	@ (800598c <_TrySendOverflowPacket+0xe4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80058f8:	4b23      	ldr	r3, [pc, #140]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	623b      	str	r3, [r7, #32]
 800590a:	e00b      	b.n	8005924 <_TrySendOverflowPacket+0x7c>
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	6279      	str	r1, [r7, #36]	@ 0x24
 8005916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	09db      	lsrs	r3, r3, #7
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b7f      	cmp	r3, #127	@ 0x7f
 8005928:	d8f0      	bhi.n	800590c <_TrySendOverflowPacket+0x64>
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800593a:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	4618      	mov	r0, r3
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	461a      	mov	r2, r3
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	4619      	mov	r1, r3
 800594c:	f7fa fc60 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005950:	4603      	mov	r3, r0
 8005952:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005954:	f7ff fb00 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800595e:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005964:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	3b01      	subs	r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e004      	b.n	800597c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005972:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	3301      	adds	r3, #1
 8005978:	4a03      	ldr	r2, [pc, #12]	@ (8005988 <_TrySendOverflowPacket+0xe0>)
 800597a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800597c:	693b      	ldr	r3, [r7, #16]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3730      	adds	r7, #48	@ 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20014390 	.word	0x20014390
 800598c:	e0001004 	.word	0xe0001004

08005990 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800599c:	4b96      	ldr	r3, [pc, #600]	@ (8005bf8 <_SendPacket+0x268>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d010      	beq.n	80059c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059a4:	4b94      	ldr	r3, [pc, #592]	@ (8005bf8 <_SendPacket+0x268>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8130 	beq.w	8005c0e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80059ae:	4b92      	ldr	r3, [pc, #584]	@ (8005bf8 <_SendPacket+0x268>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d109      	bne.n	80059ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80059b6:	f7ff ff77 	bl	80058a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80059ba:	4b8f      	ldr	r3, [pc, #572]	@ (8005bf8 <_SendPacket+0x268>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	f040 8127 	bne.w	8005c12 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80059c4:	e001      	b.n	80059ca <_SendPacket+0x3a>
    goto Send;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <_SendPacket+0x3c>
Send:
 80059ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b1f      	cmp	r3, #31
 80059d0:	d809      	bhi.n	80059e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80059d2:	4b89      	ldr	r3, [pc, #548]	@ (8005bf8 <_SendPacket+0x268>)
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f040 8118 	bne.w	8005c16 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b17      	cmp	r3, #23
 80059ea:	d807      	bhi.n	80059fc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e0c4      	b.n	8005b86 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a08:	d912      	bls.n	8005a30 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	09da      	lsrs	r2, r3, #7
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	3a01      	subs	r2, #1
 8005a22:	60fa      	str	r2, [r7, #12]
 8005a24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e006      	b.n	8005a3e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b7e      	cmp	r3, #126	@ 0x7e
 8005a42:	d807      	bhi.n	8005a54 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e098      	b.n	8005b86 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a5a:	d212      	bcs.n	8005a82 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	09da      	lsrs	r2, r3, #7
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	3a01      	subs	r2, #1
 8005a74:	60fa      	str	r2, [r7, #12]
 8005a76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e081      	b.n	8005b86 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a88:	d21d      	bcs.n	8005ac6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0b9a      	lsrs	r2, r3, #14
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	09db      	lsrs	r3, r3, #7
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	3a01      	subs	r2, #1
 8005aa4:	60fa      	str	r2, [r7, #12]
 8005aa6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	60fa      	str	r2, [r7, #12]
 8005aba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e05f      	b.n	8005b86 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005acc:	d228      	bcs.n	8005b20 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	0d5a      	lsrs	r2, r3, #21
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0b9b      	lsrs	r3, r3, #14
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	3a01      	subs	r2, #1
 8005ae8:	60fa      	str	r2, [r7, #12]
 8005aea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	60fa      	str	r2, [r7, #12]
 8005b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	3a01      	subs	r2, #1
 8005b12:	60fa      	str	r2, [r7, #12]
 8005b14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e032      	b.n	8005b86 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0f1a      	lsrs	r2, r3, #28
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0d5b      	lsrs	r3, r3, #21
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	60fa      	str	r2, [r7, #12]
 8005b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0b9b      	lsrs	r3, r3, #14
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	60fa      	str	r2, [r7, #12]
 8005b52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	09db      	lsrs	r3, r3, #7
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	3a01      	subs	r2, #1
 8005b66:	60fa      	str	r2, [r7, #12]
 8005b68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	60fa      	str	r2, [r7, #12]
 8005b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b86:	4b1d      	ldr	r3, [pc, #116]	@ (8005bfc <_SendPacket+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <_SendPacket+0x268>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	e00b      	b.n	8005bb8 <_SendPacket+0x228>
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005baa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	09db      	lsrs	r3, r3, #7
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bbc:	d8f0      	bhi.n	8005ba0 <_SendPacket+0x210>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <_SendPacket+0x268>)
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68f9      	ldr	r1, [r7, #12]
 8005bde:	f7fa fb17 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005be2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005be4:	f7ff f9b8 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bee:	4a02      	ldr	r2, [pc, #8]	@ (8005bf8 <_SendPacket+0x268>)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	60d3      	str	r3, [r2, #12]
 8005bf4:	e010      	b.n	8005c18 <_SendPacket+0x288>
 8005bf6:	bf00      	nop
 8005bf8:	20014390 	.word	0x20014390
 8005bfc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c00:	4b19      	ldr	r3, [pc, #100]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	4b17      	ldr	r3, [pc, #92]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e004      	b.n	8005c18 <_SendPacket+0x288>
    goto SendDone;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <_SendPacket+0x288>
      goto SendDone;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <_SendPacket+0x288>
      goto SendDone;
 8005c16:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c18:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c1a:	7e1b      	ldrb	r3, [r3, #24]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4a13      	ldr	r2, [pc, #76]	@ (8005c6c <_SendPacket+0x2dc>)
 8005c20:	460b      	mov	r3, r1
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	440b      	add	r3, r1
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	336c      	adds	r3, #108	@ 0x6c
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c30:	7e1b      	ldrb	r3, [r3, #24]
 8005c32:	4618      	mov	r0, r3
 8005c34:	490d      	ldr	r1, [pc, #52]	@ (8005c6c <_SendPacket+0x2dc>)
 8005c36:	4603      	mov	r3, r0
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4403      	add	r3, r0
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	440b      	add	r3, r1
 8005c40:	3370      	adds	r3, #112	@ 0x70
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d00b      	beq.n	8005c60 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c48:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c4a:	789b      	ldrb	r3, [r3, #2]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c56:	f7ff fdb9 	bl	80057cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c5a:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <_SendPacket+0x2d8>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c60:	bf00      	nop
 8005c62:	3728      	adds	r7, #40	@ 0x28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20014390 	.word	0x20014390
 8005c6c:	20012ed0 	.word	0x20012ed0

08005c70 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	3301      	adds	r3, #1
 8005c86:	2b80      	cmp	r3, #128	@ 0x80
 8005c88:	d80a      	bhi.n	8005ca0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6051      	str	r1, [r2, #4]
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b80      	cmp	r3, #128	@ 0x80
 8005ca6:	d15a      	bne.n	8005d5e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	e00b      	b.n	8005ce2 <_StoreChar+0x72>
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005cd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	09db      	lsrs	r3, r3, #7
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ce6:	d8f0      	bhi.n	8005cca <_StoreChar+0x5a>
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	e00b      	b.n	8005d1a <_StoreChar+0xaa>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	1c59      	adds	r1, r3, #1
 8005d0a:	61f9      	str	r1, [r7, #28]
 8005d0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	09db      	lsrs	r3, r3, #7
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d1e:	d8f0      	bhi.n	8005d02 <_StoreChar+0x92>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	61fa      	str	r2, [r7, #28]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	221a      	movs	r2, #26
 8005d36:	6939      	ldr	r1, [r7, #16]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fe29 	bl	8005990 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fd36 	bl	80057b4 <_PreparePacket>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
  }
}
 8005d5e:	bf00      	nop
 8005d60:	3728      	adds	r7, #40	@ 0x28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	@ 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d82:	e007      	b.n	8005d94 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	623b      	str	r3, [r7, #32]
    Width++;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3301      	adds	r3, #1
 8005d92:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005d94:	6a3a      	ldr	r2, [r7, #32]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d2f3      	bcs.n	8005d84 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d901      	bls.n	8005da8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d000      	beq.n	8005db4 <_PrintUnsigned+0x4c>
 8005db2:	e01f      	b.n	8005df4 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01c      	beq.n	8005df4 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <_PrintUnsigned+0x68>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <_PrintUnsigned+0x68>
        c = '0';
 8005dca:	2330      	movs	r3, #48	@ 0x30
 8005dcc:	76fb      	strb	r3, [r7, #27]
 8005dce:	e001      	b.n	8005dd4 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd4:	e007      	b.n	8005de6 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005ddc:	7efb      	ldrb	r3, [r7, #27]
 8005dde:	4619      	mov	r1, r3
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff ff45 	bl	8005c70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <_PrintUnsigned+0x8c>
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d3f0      	bcc.n	8005dd6 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d903      	bls.n	8005e02 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	e009      	b.n	8005e16 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d200      	bcs.n	8005e16 <_PrintUnsigned+0xae>
        break;
 8005e14:	e005      	b.n	8005e22 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e20:	e7e8      	b.n	8005df4 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <_PrintUnsigned+0x128>)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4619      	mov	r1, r3
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff13 	bl	8005c70 <_StoreChar>
    Digit /= Base;
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e3      	bne.n	8005e22 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d011      	beq.n	8005e88 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00e      	beq.n	8005e88 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e6a:	e006      	b.n	8005e7a <_PrintUnsigned+0x112>
        FieldWidth--;
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e72:	2120      	movs	r1, #32
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fefb 	bl	8005c70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <_PrintUnsigned+0x120>
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d3f1      	bcc.n	8005e6c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3728      	adds	r7, #40	@ 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	08007584 	.word	0x08007584

08005e94 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfb8      	it	lt
 8005ea8:	425b      	neglt	r3, r3
 8005eaa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005eb0:	e007      	b.n	8005ec2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005eba:	613b      	str	r3, [r7, #16]
    Width++;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	daf3      	bge.n	8005eb2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d901      	bls.n	8005ed6 <_PrintInt+0x42>
    Width = NumDigits;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <_PrintInt+0x5e>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	db04      	blt.n	8005eec <_PrintInt+0x58>
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <_PrintInt+0x5e>
    FieldWidth--;
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <_PrintInt+0x6e>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <_PrintInt+0x9c>
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d111      	bne.n	8005f30 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f12:	e006      	b.n	8005f22 <_PrintInt+0x8e>
        FieldWidth--;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f1a:	2120      	movs	r1, #32
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff fea7 	bl	8005c70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <_PrintInt+0x9c>
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3f1      	bcc.n	8005f14 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da07      	bge.n	8005f46 <_PrintInt+0xb2>
    v = -v;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	425b      	negs	r3, r3
 8005f3a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f3c:	212d      	movs	r1, #45	@ 0x2d
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fe96 	bl	8005c70 <_StoreChar>
 8005f44:	e008      	b.n	8005f58 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f50:	212b      	movs	r1, #43	@ 0x2b
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe8c 	bl	8005c70 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d019      	beq.n	8005f96 <_PrintInt+0x102>
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d114      	bne.n	8005f96 <_PrintInt+0x102>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d111      	bne.n	8005f96 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f78:	e006      	b.n	8005f88 <_PrintInt+0xf4>
        FieldWidth--;
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005f80:	2130      	movs	r1, #48	@ 0x30
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fe74 	bl	8005c70 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <_PrintInt+0x102>
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d3f1      	bcc.n	8005f7a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fedf 	bl	8005d68 <_PrintUnsigned>
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b098      	sub	sp, #96	@ 0x60
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc4:	f04f 0120 	mov.w	r1, #32
 8005fc8:	f381 8811 	msr	BASEPRI, r1
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fce:	48b7      	ldr	r0, [pc, #732]	@ (80062ac <_VPrintTarget+0x2f8>)
 8005fd0:	f7ff fbf0 	bl	80057b4 <_PreparePacket>
 8005fd4:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005fd6:	4bb5      	ldr	r3, [pc, #724]	@ (80062ac <_VPrintTarget+0x2f8>)
 8005fd8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 81a8 	beq.w	8006354 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006004:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006008:	2b25      	cmp	r3, #37	@ 0x25
 800600a:	f040 8195 	bne.w	8006338 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800600e:	2300      	movs	r3, #0
 8006010:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006012:	2301      	movs	r3, #1
 8006014:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800601e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006022:	3b23      	subs	r3, #35	@ 0x23
 8006024:	2b0d      	cmp	r3, #13
 8006026:	d83f      	bhi.n	80060a8 <_VPrintTarget+0xf4>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <_VPrintTarget+0x7c>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006099 	.word	0x08006099
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	080060a9 	.word	0x080060a9
 8006050:	08006089 	.word	0x08006089
 8006054:	080060a9 	.word	0x080060a9
 8006058:	08006069 	.word	0x08006069
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	08006079 	.word	0x08006079
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e01a      	b.n	80060ae <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607a:	f043 0302 	orr.w	r3, r3, #2
 800607e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e012      	b.n	80060ae <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800608a:	f043 0304 	orr.w	r3, r3, #4
 800608e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e00a      	b.n	80060ae <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609a:	f043 0308 	orr.w	r3, r3, #8
 800609e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e002      	b.n	80060ae <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80060a8:	2300      	movs	r3, #0
 80060aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ac:	bf00      	nop
        }
      } while (v);
 80060ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1b0      	bne.n	8006016 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060b4:	2300      	movs	r3, #0
 80060b6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80060c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80060c6:	d912      	bls.n	80060ee <_VPrintTarget+0x13a>
 80060c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060cc:	2b39      	cmp	r3, #57	@ 0x39
 80060ce:	d80e      	bhi.n	80060ee <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	461a      	mov	r2, r3
 80060e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060e6:	4413      	add	r3, r2
 80060e8:	3b30      	subs	r3, #48	@ 0x30
 80060ea:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80060ec:	e7e4      	b.n	80060b8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80060ee:	2300      	movs	r3, #0
 80060f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80060fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006100:	d11d      	bne.n	800613e <_VPrintTarget+0x18a>
        sFormat++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3301      	adds	r3, #1
 8006106:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006114:	2b2f      	cmp	r3, #47	@ 0x2f
 8006116:	d912      	bls.n	800613e <_VPrintTarget+0x18a>
 8006118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800611c:	2b39      	cmp	r3, #57	@ 0x39
 800611e:	d80e      	bhi.n	800613e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	461a      	mov	r2, r3
 8006132:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006136:	4413      	add	r3, r2
 8006138:	3b30      	subs	r3, #48	@ 0x30
 800613a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 800613c:	e7e4      	b.n	8006108 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006146:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800614a:	2b6c      	cmp	r3, #108	@ 0x6c
 800614c:	d003      	beq.n	8006156 <_VPrintTarget+0x1a2>
 800614e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006152:	2b68      	cmp	r3, #104	@ 0x68
 8006154:	d107      	bne.n	8006166 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006164:	e7ef      	b.n	8006146 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006166:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800616a:	2b25      	cmp	r3, #37	@ 0x25
 800616c:	f000 80d8 	beq.w	8006320 <_VPrintTarget+0x36c>
 8006170:	2b25      	cmp	r3, #37	@ 0x25
 8006172:	f2c0 80dc 	blt.w	800632e <_VPrintTarget+0x37a>
 8006176:	2b78      	cmp	r3, #120	@ 0x78
 8006178:	f300 80d9 	bgt.w	800632e <_VPrintTarget+0x37a>
 800617c:	2b58      	cmp	r3, #88	@ 0x58
 800617e:	f2c0 80d6 	blt.w	800632e <_VPrintTarget+0x37a>
 8006182:	3b58      	subs	r3, #88	@ 0x58
 8006184:	2b20      	cmp	r3, #32
 8006186:	f200 80d2 	bhi.w	800632e <_VPrintTarget+0x37a>
 800618a:	a201      	add	r2, pc, #4	@ (adr r2, 8006190 <_VPrintTarget+0x1dc>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	08006287 	.word	0x08006287
 8006194:	0800632f 	.word	0x0800632f
 8006198:	0800632f 	.word	0x0800632f
 800619c:	0800632f 	.word	0x0800632f
 80061a0:	0800632f 	.word	0x0800632f
 80061a4:	0800632f 	.word	0x0800632f
 80061a8:	0800632f 	.word	0x0800632f
 80061ac:	0800632f 	.word	0x0800632f
 80061b0:	0800632f 	.word	0x0800632f
 80061b4:	0800632f 	.word	0x0800632f
 80061b8:	0800632f 	.word	0x0800632f
 80061bc:	08006215 	.word	0x08006215
 80061c0:	0800623b 	.word	0x0800623b
 80061c4:	0800632f 	.word	0x0800632f
 80061c8:	0800632f 	.word	0x0800632f
 80061cc:	0800632f 	.word	0x0800632f
 80061d0:	0800632f 	.word	0x0800632f
 80061d4:	0800632f 	.word	0x0800632f
 80061d8:	0800632f 	.word	0x0800632f
 80061dc:	0800632f 	.word	0x0800632f
 80061e0:	0800632f 	.word	0x0800632f
 80061e4:	0800632f 	.word	0x0800632f
 80061e8:	0800632f 	.word	0x0800632f
 80061ec:	0800632f 	.word	0x0800632f
 80061f0:	080062fb 	.word	0x080062fb
 80061f4:	0800632f 	.word	0x0800632f
 80061f8:	0800632f 	.word	0x0800632f
 80061fc:	080062b1 	.word	0x080062b1
 8006200:	0800632f 	.word	0x0800632f
 8006204:	08006261 	.word	0x08006261
 8006208:	0800632f 	.word	0x0800632f
 800620c:	0800632f 	.word	0x0800632f
 8006210:	08006287 	.word	0x08006287
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	1d19      	adds	r1, r3, #4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6011      	str	r1, [r2, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8006228:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fd1c 	bl	8005c70 <_StoreChar>
        break;
 8006238:	e07a      	b.n	8006330 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1d19      	adds	r1, r3, #4
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6011      	str	r1, [r2, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006248:	f107 0010 	add.w	r0, r7, #16
 800624c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006256:	220a      	movs	r2, #10
 8006258:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800625a:	f7ff fe1b 	bl	8005e94 <_PrintInt>
        break;
 800625e:	e067      	b.n	8006330 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800626e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006270:	f107 0010 	add.w	r0, r7, #16
 8006274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800627e:	220a      	movs	r2, #10
 8006280:	f7ff fd72 	bl	8005d68 <_PrintUnsigned>
        break;
 8006284:	e054      	b.n	8006330 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1d19      	adds	r1, r3, #4
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6011      	str	r1, [r2, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006294:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006296:	f107 0010 	add.w	r0, r7, #16
 800629a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a4:	2210      	movs	r2, #16
 80062a6:	f7ff fd5f 	bl	8005d68 <_PrintUnsigned>
        break;
 80062aa:	e041      	b.n	8006330 <_VPrintTarget+0x37c>
 80062ac:	200143c0 	.word	0x200143c0
      case 's':
        s = va_arg(*pParamList, const char*);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80062be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <_VPrintTarget+0x314>
          s = "(null)";
 80062c4:	4b4a      	ldr	r3, [pc, #296]	@ (80063f0 <_VPrintTarget+0x43c>)
 80062c6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80062c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80062d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d2:	3301      	adds	r3, #1
 80062d4:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80062d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80062de:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80062e2:	f107 0310 	add.w	r3, r7, #16
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fcc1 	bl	8005c70 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f2:	d9e9      	bls.n	80062c8 <_VPrintTarget+0x314>
        break;
 80062f4:	e01c      	b.n	8006330 <_VPrintTarget+0x37c>
            break;
 80062f6:	bf00      	nop
        break;
 80062f8:	e01a      	b.n	8006330 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1d19      	adds	r1, r3, #4
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6011      	str	r1, [r2, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006308:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800630a:	f107 0010 	add.w	r0, r7, #16
 800630e:	2300      	movs	r3, #0
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2308      	movs	r3, #8
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	2308      	movs	r3, #8
 8006318:	2210      	movs	r2, #16
 800631a:	f7ff fd25 	bl	8005d68 <_PrintUnsigned>
        break;
 800631e:	e007      	b.n	8006330 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	2125      	movs	r1, #37	@ 0x25
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fca2 	bl	8005c70 <_StoreChar>
        break;
 800632c:	e000      	b.n	8006330 <_VPrintTarget+0x37c>
      default:
        break;
 800632e:	bf00      	nop
      }
      sFormat++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e007      	b.n	8006348 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006338:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800633c:	f107 0310 	add.w	r3, r7, #16
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fc94 	bl	8005c70 <_StoreChar>
    }
  } while (*sFormat);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f ae4d 	bne.w	8005fec <_VPrintTarget+0x38>
 8006352:	e000      	b.n	8006356 <_VPrintTarget+0x3a2>
      break;
 8006354:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d041      	beq.n	80063e0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800635c:	6a3a      	ldr	r2, [r7, #32]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800636c:	e00b      	b.n	8006386 <_VPrintTarget+0x3d2>
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006378:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	2b7f      	cmp	r3, #127	@ 0x7f
 800638a:	d8f0      	bhi.n	800636e <_VPrintTarget+0x3ba>
 800638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a0:	2300      	movs	r3, #0
 80063a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80063a4:	e00b      	b.n	80063be <_VPrintTarget+0x40a>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	6379      	str	r1, [r7, #52]	@ 0x34
 80063b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <_VPrintTarget+0x3f2>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	221a      	movs	r2, #26
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fad8 	bl	8005990 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063e6:	bf00      	nop
 80063e8:	3758      	adds	r7, #88	@ 0x58
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	0800752c 	.word	0x0800752c

080063f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006402:	2300      	movs	r3, #0
 8006404:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006408:	4917      	ldr	r1, [pc, #92]	@ (8006468 <SEGGER_SYSVIEW_Init+0x74>)
 800640a:	4818      	ldr	r0, [pc, #96]	@ (800646c <SEGGER_SYSVIEW_Init+0x78>)
 800640c:	f7ff f8d2 	bl	80055b4 <SEGGER_RTT_AllocUpBuffer>
 8006410:	4603      	mov	r3, r0
 8006412:	b2da      	uxtb	r2, r3
 8006414:	4b16      	ldr	r3, [pc, #88]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006416:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006418:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 800641a:	785a      	ldrb	r2, [r3, #1]
 800641c:	4b14      	ldr	r3, [pc, #80]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 800641e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006420:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006422:	7e1b      	ldrb	r3, [r3, #24]
 8006424:	4618      	mov	r0, r3
 8006426:	2300      	movs	r3, #0
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2308      	movs	r3, #8
 800642c:	4a11      	ldr	r2, [pc, #68]	@ (8006474 <SEGGER_SYSVIEW_Init+0x80>)
 800642e:	490f      	ldr	r1, [pc, #60]	@ (800646c <SEGGER_SYSVIEW_Init+0x78>)
 8006430:	f7ff f944 	bl	80056bc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006434:	4b0e      	ldr	r3, [pc, #56]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006436:	2200      	movs	r2, #0
 8006438:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800643a:	4b0f      	ldr	r3, [pc, #60]	@ (8006478 <SEGGER_SYSVIEW_Init+0x84>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a0c      	ldr	r2, [pc, #48]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006440:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006442:	4a0b      	ldr	r2, [pc, #44]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006448:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800644e:	4a08      	ldr	r2, [pc, #32]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006454:	4a06      	ldr	r2, [pc, #24]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800645a:	4b05      	ldr	r3, [pc, #20]	@ (8006470 <SEGGER_SYSVIEW_Init+0x7c>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20013388 	.word	0x20013388
 800646c:	08007534 	.word	0x08007534
 8006470:	20014390 	.word	0x20014390
 8006474:	20014388 	.word	0x20014388
 8006478:	e0001004 	.word	0xe0001004

0800647c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006484:	4a04      	ldr	r2, [pc, #16]	@ (8006498 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6113      	str	r3, [r2, #16]
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20014390 	.word	0x20014390

0800649c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064a4:	f3ef 8311 	mrs	r3, BASEPRI
 80064a8:	f04f 0120 	mov.w	r1, #32
 80064ac:	f381 8811 	msr	BASEPRI, r1
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	4808      	ldr	r0, [pc, #32]	@ (80064d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80064b4:	f7ff f97e 	bl	80057b4 <_PreparePacket>
 80064b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f7ff fa66 	bl	8005990 <_SendPacket>
  RECORD_END();
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f383 8811 	msr	BASEPRI, r3
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200143c0 	.word	0x200143c0

080064d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064e2:	f3ef 8311 	mrs	r3, BASEPRI
 80064e6:	f04f 0120 	mov.w	r1, #32
 80064ea:	f381 8811 	msr	BASEPRI, r1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	4816      	ldr	r0, [pc, #88]	@ (800654c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064f2:	f7ff f95f 	bl	80057b4 <_PreparePacket>
 80064f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	b2da      	uxtb	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	61f9      	str	r1, [r7, #28]
 8006510:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b7f      	cmp	r3, #127	@ 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6938      	ldr	r0, [r7, #16]
 800653a:	f7ff fa29 	bl	8005990 <_SendPacket>
  RECORD_END();
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f383 8811 	msr	BASEPRI, r3
}
 8006544:	bf00      	nop
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200143c0 	.word	0x200143c0

08006550 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	@ 0x30
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800655c:	f3ef 8311 	mrs	r3, BASEPRI
 8006560:	f04f 0120 	mov.w	r1, #32
 8006564:	f381 8811 	msr	BASEPRI, r1
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	4825      	ldr	r0, [pc, #148]	@ (8006600 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800656c:	f7ff f922 	bl	80057b4 <_PreparePacket>
 8006570:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657e:	e00b      	b.n	8006598 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800658a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659a:	2b7f      	cmp	r3, #127	@ 0x7f
 800659c:	d8f0      	bhi.n	8006580 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	e00b      	b.n	80065d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80065c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	09db      	lsrs	r3, r3, #7
 80065ce:	623b      	str	r3, [r7, #32]
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d4:	d8f0      	bhi.n	80065b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	627a      	str	r2, [r7, #36]	@ 0x24
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	69b8      	ldr	r0, [r7, #24]
 80065ec:	f7ff f9d0 	bl	8005990 <_SendPacket>
  RECORD_END();
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f383 8811 	msr	BASEPRI, r3
}
 80065f6:	bf00      	nop
 80065f8:	3730      	adds	r7, #48	@ 0x30
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200143c0 	.word	0x200143c0

08006604 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	@ 0x30
 8006608:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800660a:	4b59      	ldr	r3, [pc, #356]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006610:	f3ef 8311 	mrs	r3, BASEPRI
 8006614:	f04f 0120 	mov.w	r1, #32
 8006618:	f381 8811 	msr	BASEPRI, r1
 800661c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800661e:	4b54      	ldr	r3, [pc, #336]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	220a      	movs	r2, #10
 8006624:	4953      	ldr	r1, [pc, #332]	@ (8006774 <SEGGER_SYSVIEW_Start+0x170>)
 8006626:	4618      	mov	r0, r3
 8006628:	f7f9 fdf2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006632:	f7fe fc91 	bl	8004f58 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006636:	200a      	movs	r0, #10
 8006638:	f7ff ff30 	bl	800649c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800663c:	f3ef 8311 	mrs	r3, BASEPRI
 8006640:	f04f 0120 	mov.w	r1, #32
 8006644:	f381 8811 	msr	BASEPRI, r1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	484b      	ldr	r0, [pc, #300]	@ (8006778 <SEGGER_SYSVIEW_Start+0x174>)
 800664c:	f7ff f8b2 	bl	80057b4 <_PreparePacket>
 8006650:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665a:	4b45      	ldr	r3, [pc, #276]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006660:	e00b      	b.n	800667a <SEGGER_SYSVIEW_Start+0x76>
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800666c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	2b7f      	cmp	r3, #127	@ 0x7f
 800667e:	d8f0      	bhi.n	8006662 <SEGGER_SYSVIEW_Start+0x5e>
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
 8006694:	4b36      	ldr	r3, [pc, #216]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_Start+0xb0>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80066a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_Start+0x98>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	627a      	str	r2, [r7, #36]	@ 0x24
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	4b28      	ldr	r3, [pc, #160]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e00b      	b.n	80066ee <SEGGER_SYSVIEW_Start+0xea>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	1c59      	adds	r1, r3, #1
 80066de:	61f9      	str	r1, [r7, #28]
 80066e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f2:	d8f0      	bhi.n	80066d6 <SEGGER_SYSVIEW_Start+0xd2>
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	61fa      	str	r2, [r7, #28]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	e00b      	b.n	8006726 <SEGGER_SYSVIEW_Start+0x122>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	6179      	str	r1, [r7, #20]
 8006718:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b7f      	cmp	r3, #127	@ 0x7f
 800672a:	d8f0      	bhi.n	800670e <SEGGER_SYSVIEW_Start+0x10a>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	617a      	str	r2, [r7, #20]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800673c:	2218      	movs	r2, #24
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff f925 	bl	8005990 <_SendPacket>
      RECORD_END();
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800674c:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006754:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <SEGGER_SYSVIEW_Start+0x16c>)
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800675a:	f000 f9eb 	bl	8006b34 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800675e:	f000 f9b1 	bl	8006ac4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006762:	f000 fd21 	bl	80071a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006766:	bf00      	nop
 8006768:	3730      	adds	r7, #48	@ 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20014390 	.word	0x20014390
 8006774:	08007578 	.word	0x08007578
 8006778:	200143c0 	.word	0x200143c0

0800677c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006782:	f3ef 8311 	mrs	r3, BASEPRI
 8006786:	f04f 0120 	mov.w	r1, #32
 800678a:	f381 8811 	msr	BASEPRI, r1
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	480b      	ldr	r0, [pc, #44]	@ (80067c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006792:	f7ff f80f 	bl	80057b4 <_PreparePacket>
 8006796:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006798:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067a0:	220b      	movs	r2, #11
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6838      	ldr	r0, [r7, #0]
 80067a6:	f7ff f8f3 	bl	8005990 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f383 8811 	msr	BASEPRI, r3
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200143c0 	.word	0x200143c0
 80067c4:	20014390 	.word	0x20014390

080067c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	@ 0x30
 80067cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067ce:	f3ef 8311 	mrs	r3, BASEPRI
 80067d2:	f04f 0120 	mov.w	r1, #32
 80067d6:	f381 8811 	msr	BASEPRI, r1
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	4845      	ldr	r0, [pc, #276]	@ (80068f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80067de:	f7fe ffe9 	bl	80057b4 <_PreparePacket>
 80067e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ec:	4b42      	ldr	r3, [pc, #264]	@ (80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f2:	e00b      	b.n	800680c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fa:	1c59      	adds	r1, r3, #1
 80067fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80067fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	09db      	lsrs	r3, r3, #7
 800680a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006810:	d8f0      	bhi.n	80067f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006820:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
 8006826:	4b34      	ldr	r3, [pc, #208]	@ (80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	e00b      	b.n	8006846 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1c59      	adds	r1, r3, #1
 8006836:	6279      	str	r1, [r7, #36]	@ 0x24
 8006838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	09db      	lsrs	r3, r3, #7
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2b7f      	cmp	r3, #127	@ 0x7f
 800684a:	d8f0      	bhi.n	800682e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	627a      	str	r2, [r7, #36]	@ 0x24
 8006852:	6a3a      	ldr	r2, [r7, #32]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	4b25      	ldr	r3, [pc, #148]	@ (80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e00b      	b.n	8006880 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	61f9      	str	r1, [r7, #28]
 8006872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b7f      	cmp	r3, #127	@ 0x7f
 8006884:	d8f0      	bhi.n	8006868 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	61fa      	str	r2, [r7, #28]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	6179      	str	r1, [r7, #20]
 80068aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	617a      	str	r2, [r7, #20]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068ce:	2218      	movs	r2, #24
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68b8      	ldr	r0, [r7, #8]
 80068d4:	f7ff f85c 	bl	8005990 <_SendPacket>
  RECORD_END();
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068de:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80068e6:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	4798      	blx	r3
  }
}
 80068ec:	bf00      	nop
 80068ee:	3730      	adds	r7, #48	@ 0x30
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	200143c0 	.word	0x200143c0
 80068f8:	20014390 	.word	0x20014390

080068fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b092      	sub	sp, #72	@ 0x48
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006904:	f3ef 8311 	mrs	r3, BASEPRI
 8006908:	f04f 0120 	mov.w	r1, #32
 800690c:	f381 8811 	msr	BASEPRI, r1
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	486a      	ldr	r0, [pc, #424]	@ (8006abc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006914:	f7fe ff4e 	bl	80057b4 <_PreparePacket>
 8006918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	647b      	str	r3, [r7, #68]	@ 0x44
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b66      	ldr	r3, [pc, #408]	@ (8006ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	643b      	str	r3, [r7, #64]	@ 0x40
 800692e:	e00b      	b.n	8006948 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006932:	b2da      	uxtb	r2, r3
 8006934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	6479      	str	r1, [r7, #68]	@ 0x44
 800693a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006944:	09db      	lsrs	r3, r3, #7
 8006946:	643b      	str	r3, [r7, #64]	@ 0x40
 8006948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800694a:	2b7f      	cmp	r3, #127	@ 0x7f
 800694c:	d8f0      	bhi.n	8006930 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800694e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	647a      	str	r2, [r7, #68]	@ 0x44
 8006954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006968:	e00b      	b.n	8006982 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	b2da      	uxtb	r2, r3
 800696e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006974:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	2b7f      	cmp	r3, #127	@ 0x7f
 8006986:	d8f0      	bhi.n	800696a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800698e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006996:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	4619      	mov	r1, r3
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7fe fed7 	bl	8005754 <_EncodeStr>
 80069a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069a8:	2209      	movs	r2, #9
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	6938      	ldr	r0, [r7, #16]
 80069ae:	f7fe ffef 	bl	8005990 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b40      	ldr	r3, [pc, #256]	@ (8006ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069c6:	e00b      	b.n	80069e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	6379      	str	r1, [r7, #52]	@ 0x34
 80069d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	09db      	lsrs	r3, r3, #7
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e4:	d8f0      	bhi.n	80069c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80069e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a00:	e00b      	b.n	8006a1a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	1c59      	adds	r1, r3, #1
 8006a0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	09db      	lsrs	r3, r3, #7
 8006a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a1e:	d8f0      	bhi.n	8006a02 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	e00b      	b.n	8006a54 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a58:	d8f0      	bhi.n	8006a3c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a60:	6a3a      	ldr	r2, [r7, #32]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e00b      	b.n	8006a8e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	61f9      	str	r1, [r7, #28]
 8006a80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a92:	d8f0      	bhi.n	8006a76 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	61fa      	str	r2, [r7, #28]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006aa4:	2215      	movs	r2, #21
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	6938      	ldr	r0, [r7, #16]
 8006aaa:	f7fe ff71 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f383 8811 	msr	BASEPRI, r3
}
 8006ab4:	bf00      	nop
 8006ab6:	3748      	adds	r7, #72	@ 0x48
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200143c0 	.word	0x200143c0
 8006ac0:	20014390 	.word	0x20014390

08006ac4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ac8:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ad0:	4b05      	ldr	r3, [pc, #20]	@ (8006ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ada:	4b03      	ldr	r3, [pc, #12]	@ (8006ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4798      	blx	r3
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20014390 	.word	0x20014390

08006aec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006af4:	f3ef 8311 	mrs	r3, BASEPRI
 8006af8:	f04f 0120 	mov.w	r1, #32
 8006afc:	f381 8811 	msr	BASEPRI, r1
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	480b      	ldr	r0, [pc, #44]	@ (8006b30 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b04:	f7fe fe56 	bl	80057b4 <_PreparePacket>
 8006b08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b0a:	2280      	movs	r2, #128	@ 0x80
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f7fe fe20 	bl	8005754 <_EncodeStr>
 8006b14:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b16:	220e      	movs	r2, #14
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f7fe ff38 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f383 8811 	msr	BASEPRI, r3
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	200143c0 	.word	0x200143c0

08006b34 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b3a:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01a      	beq.n	8006b78 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b42:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b4c:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4798      	blx	r3
 8006b54:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b58:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	000a      	movs	r2, r1
 8006b68:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4621      	mov	r1, r4
 8006b70:	200d      	movs	r0, #13
 8006b72:	f7ff fced 	bl	8006550 <SEGGER_SYSVIEW_RecordU32x2>
 8006b76:	e006      	b.n	8006b86 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b78:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	200c      	movs	r0, #12
 8006b80:	f7ff fcaa 	bl	80064d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd90      	pop	{r4, r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20014390 	.word	0x20014390
 8006b94:	e0001004 	.word	0xe0001004

08006b98 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba2:	f04f 0120 	mov.w	r1, #32
 8006ba6:	f381 8811 	msr	BASEPRI, r1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	4819      	ldr	r0, [pc, #100]	@ (8006c14 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006bae:	f7fe fe01 	bl	80057b4 <_PreparePacket>
 8006bb2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006bb8:	4b17      	ldr	r3, [pc, #92]	@ (8006c18 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	e00b      	b.n	8006be4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	6179      	str	r1, [r7, #20]
 8006bd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	09db      	lsrs	r3, r3, #7
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be8:	d8f0      	bhi.n	8006bcc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	617a      	str	r2, [r7, #20]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	68b8      	ldr	r0, [r7, #8]
 8006c00:	f7fe fec6 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f383 8811 	msr	BASEPRI, r3
}
 8006c0a:	bf00      	nop
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200143c0 	.word	0x200143c0
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c22:	f3ef 8311 	mrs	r3, BASEPRI
 8006c26:	f04f 0120 	mov.w	r1, #32
 8006c2a:	f381 8811 	msr	BASEPRI, r1
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	4807      	ldr	r0, [pc, #28]	@ (8006c50 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c32:	f7fe fdbf 	bl	80057b4 <_PreparePacket>
 8006c36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c38:	2203      	movs	r2, #3
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6838      	ldr	r0, [r7, #0]
 8006c3e:	f7fe fea7 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f383 8811 	msr	BASEPRI, r3
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	200143c0 	.word	0x200143c0

08006c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5e:	f04f 0120 	mov.w	r1, #32
 8006c62:	f381 8811 	msr	BASEPRI, r1
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	4807      	ldr	r0, [pc, #28]	@ (8006c88 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c6a:	f7fe fda3 	bl	80057b4 <_PreparePacket>
 8006c6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c70:	2212      	movs	r2, #18
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6838      	ldr	r0, [r7, #0]
 8006c76:	f7fe fe8b 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f383 8811 	msr	BASEPRI, r3
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200143c0 	.word	0x200143c0

08006c8c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
 8006c98:	f04f 0120 	mov.w	r1, #32
 8006c9c:	f381 8811 	msr	BASEPRI, r1
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	4817      	ldr	r0, [pc, #92]	@ (8006d00 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006ca4:	f7fe fd86 	bl	80057b4 <_PreparePacket>
 8006ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e00b      	b.n	8006cd0 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	1c59      	adds	r1, r3, #1
 8006cc0:	61f9      	str	r1, [r7, #28]
 8006cc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	09db      	lsrs	r3, r3, #7
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd4:	d8f0      	bhi.n	8006cb8 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	61fa      	str	r2, [r7, #28]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006ce6:	221c      	movs	r2, #28
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	6938      	ldr	r0, [r7, #16]
 8006cec:	f7fe fe50 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f383 8811 	msr	BASEPRI, r3
}
 8006cf6:	bf00      	nop
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200143c0 	.word	0x200143c0

08006d04 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d12:	f04f 0120 	mov.w	r1, #32
 8006d16:	f381 8811 	msr	BASEPRI, r1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	4824      	ldr	r0, [pc, #144]	@ (8006db0 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006d1e:	f7fe fd49 	bl	80057b4 <_PreparePacket>
 8006d22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	e00b      	b.n	8006d4a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	09db      	lsrs	r3, r3, #7
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d4e:	d8f0      	bhi.n	8006d32 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d56:	6a3a      	ldr	r2, [r7, #32]
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e00b      	b.n	8006d82 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	61f9      	str	r1, [r7, #28]
 8006d74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d86:	d8f0      	bhi.n	8006d6a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	61fa      	str	r2, [r7, #28]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006d98:	221c      	movs	r2, #28
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	6938      	ldr	r0, [r7, #16]
 8006d9e:	f7fe fdf7 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f383 8811 	msr	BASEPRI, r3
}
 8006da8:	bf00      	nop
 8006daa:	3728      	adds	r7, #40	@ 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200143c0 	.word	0x200143c0

08006db4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dba:	f3ef 8311 	mrs	r3, BASEPRI
 8006dbe:	f04f 0120 	mov.w	r1, #32
 8006dc2:	f381 8811 	msr	BASEPRI, r1
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	4807      	ldr	r0, [pc, #28]	@ (8006de8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006dca:	f7fe fcf3 	bl	80057b4 <_PreparePacket>
 8006dce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006dd0:	2211      	movs	r2, #17
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7fe fddb 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f383 8811 	msr	BASEPRI, r3
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200143c0 	.word	0x200143c0

08006dec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006df4:	f3ef 8311 	mrs	r3, BASEPRI
 8006df8:	f04f 0120 	mov.w	r1, #32
 8006dfc:	f381 8811 	msr	BASEPRI, r1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	4819      	ldr	r0, [pc, #100]	@ (8006e68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e04:	f7fe fcd6 	bl	80057b4 <_PreparePacket>
 8006e08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e0e:	4b17      	ldr	r3, [pc, #92]	@ (8006e6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	61f9      	str	r1, [r7, #28]
 8006e2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006e50:	2208      	movs	r2, #8
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	6938      	ldr	r0, [r7, #16]
 8006e56:	f7fe fd9b 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200143c0 	.word	0x200143c0
 8006e6c:	20014390 	.word	0x20014390

08006e70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e78:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7c:	f04f 0120 	mov.w	r1, #32
 8006e80:	f381 8811 	msr	BASEPRI, r1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	4819      	ldr	r0, [pc, #100]	@ (8006eec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e88:	f7fe fc94 	bl	80057b4 <_PreparePacket>
 8006e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e92:	4b17      	ldr	r3, [pc, #92]	@ (8006ef0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	e00b      	b.n	8006ebe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	61f9      	str	r1, [r7, #28]
 8006eb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec2:	d8f0      	bhi.n	8006ea6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	61fa      	str	r2, [r7, #28]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	6938      	ldr	r0, [r7, #16]
 8006eda:	f7fe fd59 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f383 8811 	msr	BASEPRI, r3
}
 8006ee4:	bf00      	nop
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200143c0 	.word	0x200143c0
 8006ef0:	20014390 	.word	0x20014390

08006ef4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006efc:	f3ef 8311 	mrs	r3, BASEPRI
 8006f00:	f04f 0120 	mov.w	r1, #32
 8006f04:	f381 8811 	msr	BASEPRI, r1
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	4819      	ldr	r0, [pc, #100]	@ (8006f70 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f0c:	f7fe fc52 	bl	80057b4 <_PreparePacket>
 8006f10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f16:	4b17      	ldr	r3, [pc, #92]	@ (8006f74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	e00b      	b.n	8006f42 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	1c59      	adds	r1, r3, #1
 8006f32:	61f9      	str	r1, [r7, #28]
 8006f34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	09db      	lsrs	r3, r3, #7
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f46:	d8f0      	bhi.n	8006f2a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	61fa      	str	r2, [r7, #28]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006f58:	2206      	movs	r2, #6
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	6938      	ldr	r0, [r7, #16]
 8006f5e:	f7fe fd17 	bl	8005990 <_SendPacket>
  RECORD_END();
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f383 8811 	msr	BASEPRI, r3
}
 8006f68:	bf00      	nop
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200143c0 	.word	0x200143c0
 8006f74:	20014390 	.word	0x20014390

08006f78 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	@ 0x28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f82:	f3ef 8311 	mrs	r3, BASEPRI
 8006f86:	f04f 0120 	mov.w	r1, #32
 8006f8a:	f381 8811 	msr	BASEPRI, r1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	4827      	ldr	r0, [pc, #156]	@ (8007030 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f92:	f7fe fc0f 	bl	80057b4 <_PreparePacket>
 8006f96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	e00b      	b.n	8006fc8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006fba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	09db      	lsrs	r3, r3, #7
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fcc:	d8f0      	bhi.n	8006fb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	e00b      	b.n	8007000 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	61f9      	str	r1, [r7, #28]
 8006ff2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	09db      	lsrs	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b7f      	cmp	r3, #127	@ 0x7f
 8007004:	d8f0      	bhi.n	8006fe8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	61fa      	str	r2, [r7, #28]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007016:	2207      	movs	r2, #7
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	6938      	ldr	r0, [r7, #16]
 800701c:	f7fe fcb8 	bl	8005990 <_SendPacket>
  RECORD_END();
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f383 8811 	msr	BASEPRI, r3
}
 8007026:	bf00      	nop
 8007028:	3728      	adds	r7, #40	@ 0x28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200143c0 	.word	0x200143c0
 8007034:	20014390 	.word	0x20014390

08007038 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007040:	4b04      	ldr	r3, [pc, #16]	@ (8007054 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	1ad3      	subs	r3, r2, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20014390 	.word	0x20014390

08007058 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	@ 0x30
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007062:	4b40      	ldr	r3, [pc, #256]	@ (8007164 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d077      	beq.n	800715a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800706a:	4b3e      	ldr	r3, [pc, #248]	@ (8007164 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007070:	2300      	movs	r3, #0
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007074:	e008      	b.n	8007088 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800707c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	3301      	adds	r3, #1
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800708c:	429a      	cmp	r2, r3
 800708e:	d3f2      	bcc.n	8007076 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007090:	e000      	b.n	8007094 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007092:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d055      	beq.n	8007146 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800709a:	f3ef 8311 	mrs	r3, BASEPRI
 800709e:	f04f 0120 	mov.w	r1, #32
 80070a2:	f381 8811 	msr	BASEPRI, r1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	482f      	ldr	r0, [pc, #188]	@ (8007168 <SEGGER_SYSVIEW_SendModule+0x110>)
 80070aa:	f7fe fb83 	bl	80057b4 <_PreparePacket>
 80070ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	623b      	str	r3, [r7, #32]
 80070bc:	e00b      	b.n	80070d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	1c59      	adds	r1, r3, #1
 80070c6:	6279      	str	r1, [r7, #36]	@ 0x24
 80070c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	09db      	lsrs	r3, r3, #7
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070da:	d8f0      	bhi.n	80070be <SEGGER_SYSVIEW_SendModule+0x66>
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80070e2:	6a3a      	ldr	r2, [r7, #32]
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	e00b      	b.n	8007110 <SEGGER_SYSVIEW_SendModule+0xb8>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	61f9      	str	r1, [r7, #28]
 8007102:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	09db      	lsrs	r3, r3, #7
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b7f      	cmp	r3, #127	@ 0x7f
 8007114:	d8f0      	bhi.n	80070f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	61fa      	str	r2, [r7, #28]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2280      	movs	r2, #128	@ 0x80
 800712c:	4619      	mov	r1, r3
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7fe fb10 	bl	8005754 <_EncodeStr>
 8007134:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007136:	2216      	movs	r2, #22
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f7fe fc28 	bl	8005990 <_SendPacket>
      RECORD_END();
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <SEGGER_SYSVIEW_SendModule+0x102>
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4798      	blx	r3
    }
  }
}
 800715a:	bf00      	nop
 800715c:	3730      	adds	r7, #48	@ 0x30
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200143b8 	.word	0x200143b8
 8007168:	200143c0 	.word	0x200143c0

0800716c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007172:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00f      	beq.n	800719a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800717a:	4b0a      	ldr	r3, [pc, #40]	@ (80071a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f2      	bne.n	8007180 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200143b8 	.word	0x200143b8

080071a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80071ae:	f3ef 8311 	mrs	r3, BASEPRI
 80071b2:	f04f 0120 	mov.w	r1, #32
 80071b6:	f381 8811 	msr	BASEPRI, r1
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	4817      	ldr	r0, [pc, #92]	@ (800721c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80071be:	f7fe faf9 	bl	80057b4 <_PreparePacket>
 80071c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	4b14      	ldr	r3, [pc, #80]	@ (8007220 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	e00b      	b.n	80071ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	6179      	str	r1, [r7, #20]
 80071de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	09db      	lsrs	r3, r3, #7
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80071f0:	d8f0      	bhi.n	80071d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	617a      	str	r2, [r7, #20]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007202:	221b      	movs	r2, #27
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	68b8      	ldr	r0, [r7, #8]
 8007208:	f7fe fbc2 	bl	8005990 <_SendPacket>
  RECORD_END();
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f383 8811 	msr	BASEPRI, r3
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200143c0 	.word	0x200143c0
 8007220:	200143bc 	.word	0x200143bc

08007224 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007224:	b40f      	push	{r0, r1, r2, r3}
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007232:	1d3b      	adds	r3, r7, #4
 8007234:	461a      	mov	r2, r3
 8007236:	2100      	movs	r1, #0
 8007238:	6938      	ldr	r0, [r7, #16]
 800723a:	f7fe febb 	bl	8005fb4 <_VPrintTarget>
  va_end(ParamList);
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007248:	b004      	add	sp, #16
 800724a:	4770      	bx	lr

0800724c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007254:	f3ef 8311 	mrs	r3, BASEPRI
 8007258:	f04f 0120 	mov.w	r1, #32
 800725c:	f381 8811 	msr	BASEPRI, r1
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	4827      	ldr	r0, [pc, #156]	@ (8007300 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007264:	f7fe faa6 	bl	80057b4 <_PreparePacket>
 8007268:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800726a:	2280      	movs	r2, #128	@ 0x80
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	6938      	ldr	r0, [r7, #16]
 8007270:	f7fe fa70 	bl	8005754 <_EncodeStr>
 8007274:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
 800727a:	2301      	movs	r3, #1
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_Warn+0x4c>
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6279      	str	r1, [r7, #36]	@ 0x24
 800728a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2b7f      	cmp	r3, #127	@ 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_Warn+0x34>
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e00b      	b.n	80072d0 <SEGGER_SYSVIEW_Warn+0x84>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	61f9      	str	r1, [r7, #28]
 80072c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d4:	d8f0      	bhi.n	80072b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80072e6:	221a      	movs	r2, #26
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7fe fb50 	bl	8005990 <_SendPacket>
  RECORD_END();
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f383 8811 	msr	BASEPRI, r3
}
 80072f6:	bf00      	nop
 80072f8:	3728      	adds	r7, #40	@ 0x28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200143c0 	.word	0x200143c0

08007304 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007308:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800730a:	7e1b      	ldrb	r3, [r3, #24]
 800730c:	4619      	mov	r1, r3
 800730e:	4a13      	ldr	r2, [pc, #76]	@ (800735c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007310:	460b      	mov	r3, r1
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	440b      	add	r3, r1
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4413      	add	r3, r2
 800731a:	336c      	adds	r3, #108	@ 0x6c
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007320:	7e1b      	ldrb	r3, [r3, #24]
 8007322:	4618      	mov	r0, r3
 8007324:	490d      	ldr	r1, [pc, #52]	@ (800735c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007326:	4603      	mov	r3, r0
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4403      	add	r3, r0
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	440b      	add	r3, r1
 8007330:	3370      	adds	r3, #112	@ 0x70
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d00b      	beq.n	8007350 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007338:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800733a:	789b      	ldrb	r3, [r3, #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d107      	bne.n	8007350 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007340:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007342:	2201      	movs	r2, #1
 8007344:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007346:	f7fe fa41 	bl	80057cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800734a:	4b03      	ldr	r3, [pc, #12]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800734c:	2200      	movs	r2, #0
 800734e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007350:	4b01      	ldr	r3, [pc, #4]	@ (8007358 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007352:	781b      	ldrb	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20014390 	.word	0x20014390
 800735c:	20012ed0 	.word	0x20012ed0

08007360 <memcmp>:
 8007360:	b510      	push	{r4, lr}
 8007362:	3901      	subs	r1, #1
 8007364:	4402      	add	r2, r0
 8007366:	4290      	cmp	r0, r2
 8007368:	d101      	bne.n	800736e <memcmp+0xe>
 800736a:	2000      	movs	r0, #0
 800736c:	e005      	b.n	800737a <memcmp+0x1a>
 800736e:	7803      	ldrb	r3, [r0, #0]
 8007370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007374:	42a3      	cmp	r3, r4
 8007376:	d001      	beq.n	800737c <memcmp+0x1c>
 8007378:	1b18      	subs	r0, r3, r4
 800737a:	bd10      	pop	{r4, pc}
 800737c:	3001      	adds	r0, #1
 800737e:	e7f2      	b.n	8007366 <memcmp+0x6>

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4d0d      	ldr	r5, [pc, #52]	@ (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	@ (80073cc <__libc_init_array+0x3c>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2600      	movs	r6, #0
 800739c:	42a6      	cmp	r6, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4d0b      	ldr	r5, [pc, #44]	@ (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	@ (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 f826 	bl	80073f4 <_init>
 80073a8:	1b64      	subs	r4, r4, r5
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2600      	movs	r6, #0
 80073ae:	42a6      	cmp	r6, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b8:	4798      	blx	r3
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c2:	4798      	blx	r3
 80073c4:	3601      	adds	r6, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	0800759c 	.word	0x0800759c
 80073cc:	0800759c 	.word	0x0800759c
 80073d0:	0800759c 	.word	0x0800759c
 80073d4:	080075a0 	.word	0x080075a0

080073d8 <memcpy>:
 80073d8:	440a      	add	r2, r1
 80073da:	4291      	cmp	r1, r2
 80073dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e0:	d100      	bne.n	80073e4 <memcpy+0xc>
 80073e2:	4770      	bx	lr
 80073e4:	b510      	push	{r4, lr}
 80073e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ee:	4291      	cmp	r1, r2
 80073f0:	d1f9      	bne.n	80073e6 <memcpy+0xe>
 80073f2:	bd10      	pop	{r4, pc}

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
