
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800248c  0800248c  0000348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a4  080024a4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080024a4  080024a4  000034a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024ac  080024ac  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ac  080024ac  000034ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024b0  080024b0  000034b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080024c0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080024c0  00004100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e85  00000000  00000000  0001001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00011ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098d  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002107b  00000000  00000000  0001348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4ea  00000000  00000000  00034508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5258  00000000  00000000  000429f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  00117c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002474 	.word	0x08002474

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002474 	.word	0x08002474

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa10 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f804 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f870 	bl	80005f0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x10>

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2234      	movs	r2, #52	@ 0x34
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 ff7a 	bl	800241c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <SystemClock_Config+0xd4>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a29      	ldr	r2, [pc, #164]	@ (80005e8 <SystemClock_Config+0xd4>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
 8000548:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <SystemClock_Config+0xd8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000560:	4a22      	ldr	r2, [pc, #136]	@ (80005ec <SystemClock_Config+0xd8>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000588:	2310      	movs	r3, #16
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000590:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fffa 	bl	800159c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ae:	f000 f8af 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fc7c 	bl	8000ecc <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005da:	f000 f899 	bl	8000710 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	@ 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a34      	ldr	r2, [pc, #208]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a2d      	ldr	r2, [pc, #180]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a26      	ldr	r2, [pc, #152]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_GPIO_Init+0xf0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_GPIO_Init+0xf4>)
 800067c:	f000 fc0c 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4814      	ldr	r0, [pc, #80]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000698:	f000 fa6a 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800069c:	230c      	movs	r3, #12
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ac:	2307      	movs	r3, #7
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <MX_GPIO_Init+0xf4>)
 80006b8:	f000 fa5a 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006bc:	2320      	movs	r3, #32
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xf4>)
 80006d4:	f000 fa4c 	bl	8000b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020800 	.word	0x40020800

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 f935 	bl	800096c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40001000 	.word	0x40001000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <Error_Handler+0x8>

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <HAL_MspInit+0x4c>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000730:	6453      	str	r3, [r2, #68]	@ 0x44
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_MspInit+0x4c>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	@ 0x40
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	@ 0x38
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <HAL_InitTick+0xe4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a32      	ldr	r2, [pc, #200]	@ (8000850 <HAL_InitTick+0xe4>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <HAL_InitTick+0xe4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000798:	f107 0210 	add.w	r2, r7, #16
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc98 	bl	80010d8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d103      	bne.n	80007ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007b2:	f000 fc7d 	bl	80010b0 <HAL_RCC_GetPCLK1Freq>
 80007b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80007b8:	e004      	b.n	80007c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ba:	f000 fc79 	bl	80010b0 <HAL_RCC_GetPCLK1Freq>
 80007be:	4603      	mov	r3, r0
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c6:	4a23      	ldr	r2, [pc, #140]	@ (8000854 <HAL_InitTick+0xe8>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	3b01      	subs	r3, #1
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007d2:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <HAL_InitTick+0xec>)
 80007d4:	4a21      	ldr	r2, [pc, #132]	@ (800085c <HAL_InitTick+0xf0>)
 80007d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <HAL_InitTick+0xec>)
 80007da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_InitTick+0xec>)
 80007e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <HAL_InitTick+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <HAL_InitTick+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <HAL_InitTick+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007f8:	4817      	ldr	r0, [pc, #92]	@ (8000858 <HAL_InitTick+0xec>)
 80007fa:	f001 f96d 	bl	8001ad8 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000808:	2b00      	cmp	r3, #0
 800080a:	d11b      	bne.n	8000844 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <HAL_InitTick+0xec>)
 800080e:	f001 f9bd 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800081c:	2b00      	cmp	r3, #0
 800081e:	d111      	bne.n	8000844 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000820:	2036      	movs	r0, #54	@ 0x36
 8000822:	f000 f997 	bl	8000b54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d808      	bhi.n	800083e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2036      	movs	r0, #54	@ 0x36
 8000832:	f000 f973 	bl	8000b1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_InitTick+0xf4>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e002      	b.n	8000844 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000848:	4618      	mov	r0, r3
 800084a:	3738      	adds	r7, #56	@ 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	431bde83 	.word	0x431bde83
 8000858:	20000028 	.word	0x20000028
 800085c:	40001000 	.word	0x40001000
 8000860:	20000004 	.word	0x20000004

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <TIM6_DAC_IRQHandler+0x10>)
 80008a2:	f001 f9e3 	bl	8001c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000028 	.word	0x20000028

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008d8:	f7ff ffea 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000902:	f001 fd93 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fdfb 	bl	8000500 <main>
  bx  lr    
 800090a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000918:	080024b4 	.word	0x080024b4
  ldr r2, =_sbss
 800091c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000920:	20000100 	.word	0x20000100

08000924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_Init+0x40>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_Init+0x40>)
 800093e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_Init+0x40>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f8d8 	bl	8000b06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ff08 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fede 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	20000070 	.word	0x20000070

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000070 	.word	0x20000070

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	@ (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff4c 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2e:	f7ff ff61 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	6978      	ldr	r0, [r7, #20]
 8000b3a:	f7ff ffb1 	bl	8000aa0 <NVIC_EncodePriority>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff80 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff54 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
 8000b8a:	e165      	b.n	8000e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	f040 8154 	bne.w	8000e52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d005      	beq.n	8000bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d130      	bne.n	8000c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	f003 0201 	and.w	r2, r3, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d017      	beq.n	8000c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d123      	bne.n	8000cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	69b9      	ldr	r1, [r7, #24]
 8000cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0203 	and.w	r2, r3, #3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80ae 	beq.w	8000e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000e70 <HAL_GPIO_Init+0x300>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8000e70 <HAL_GPIO_Init+0x300>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b5a      	ldr	r3, [pc, #360]	@ (8000e70 <HAL_GPIO_Init+0x300>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d12:	4a58      	ldr	r2, [pc, #352]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <HAL_GPIO_Init+0x308>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d025      	beq.n	8000d8a <HAL_GPIO_Init+0x21a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4e      	ldr	r2, [pc, #312]	@ (8000e7c <HAL_GPIO_Init+0x30c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x216>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4d      	ldr	r2, [pc, #308]	@ (8000e80 <HAL_GPIO_Init+0x310>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x212>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x20e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4b      	ldr	r2, [pc, #300]	@ (8000e88 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x20a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4a      	ldr	r2, [pc, #296]	@ (8000e8c <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x206>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a49      	ldr	r2, [pc, #292]	@ (8000e90 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x202>
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e00c      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00a      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d76:	2305      	movs	r3, #5
 8000d78:	e008      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x21c>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	f002 0203 	and.w	r2, r2, #3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d9c:	4935      	ldr	r1, [pc, #212]	@ (8000e74 <HAL_GPIO_Init+0x304>)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dce:	4a31      	ldr	r2, [pc, #196]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df8:	4a26      	ldr	r2, [pc, #152]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e22:	4a1c      	ldr	r2, [pc, #112]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4c:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <HAL_GPIO_Init+0x324>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3301      	adds	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	f67f ae96 	bls.w	8000b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40021800 	.word	0x40021800
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0cc      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee0:	4b68      	ldr	r3, [pc, #416]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d90c      	bls.n	8000f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eee:	4b65      	ldr	r3, [pc, #404]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef6:	4b63      	ldr	r3, [pc, #396]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d001      	beq.n	8000f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e0b8      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d020      	beq.n	8000f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f20:	4b59      	ldr	r3, [pc, #356]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a58      	ldr	r2, [pc, #352]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f38:	4b53      	ldr	r3, [pc, #332]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4a52      	ldr	r2, [pc, #328]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f44:	4b50      	ldr	r3, [pc, #320]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	494d      	ldr	r1, [pc, #308]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d044      	beq.n	8000fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d107      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d119      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e07f      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d003      	beq.n	8000f8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e06f      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e067      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000faa:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f023 0203 	bic.w	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4934      	ldr	r1, [pc, #208]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fbc:	f7ff fcea 	bl	8000994 <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc2:	e00a      	b.n	8000fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc4:	f7ff fce6 	bl	8000994 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e04f      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 020c 	and.w	r2, r3, #12
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d1eb      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fec:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d20c      	bcs.n	8001014 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffa:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e032      	b.n	800107a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4916      	ldr	r1, [pc, #88]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	4313      	orrs	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	490e      	ldr	r1, [pc, #56]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	4313      	orrs	r3, r2
 8001050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001052:	f000 f873 	bl	800113c <HAL_RCC_GetSysClockFreq>
 8001056:	4602      	mov	r2, r0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	490a      	ldr	r1, [pc, #40]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	5ccb      	ldrb	r3, [r1, r3]
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <HAL_RCC_ClockConfig+0x1c8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fb7a 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00
 8001088:	40023800 	.word	0x40023800
 800108c:	0800248c 	.word	0x0800248c
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_RCC_GetHCLKFreq+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010b4:	f7ff fff0 	bl	8001098 <HAL_RCC_GetHCLKFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	0a9b      	lsrs	r3, r3, #10
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	4903      	ldr	r1, [pc, #12]	@ (80010d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	0800249c 	.word	0x0800249c

080010d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	220f      	movs	r2, #15
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_RCC_GetClockConfig+0x5c>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_RCC_GetClockConfig+0x5c>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_RCC_GetClockConfig+0x5c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_RCC_GetClockConfig+0x5c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <HAL_RCC_GetClockConfig+0x60>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 020f 	and.w	r2, r3, #15
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800113c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001140:	b0ae      	sub	sp, #184	@ 0xb8
 8001142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001162:	4bcb      	ldr	r3, [pc, #812]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b0c      	cmp	r3, #12
 800116c:	f200 8206 	bhi.w	800157c <HAL_RCC_GetSysClockFreq+0x440>
 8001170:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	080011ad 	.word	0x080011ad
 800117c:	0800157d 	.word	0x0800157d
 8001180:	0800157d 	.word	0x0800157d
 8001184:	0800157d 	.word	0x0800157d
 8001188:	080011b5 	.word	0x080011b5
 800118c:	0800157d 	.word	0x0800157d
 8001190:	0800157d 	.word	0x0800157d
 8001194:	0800157d 	.word	0x0800157d
 8001198:	080011bd 	.word	0x080011bd
 800119c:	0800157d 	.word	0x0800157d
 80011a0:	0800157d 	.word	0x0800157d
 80011a4:	0800157d 	.word	0x0800157d
 80011a8:	080013ad 	.word	0x080013ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001494 <HAL_RCC_GetSysClockFreq+0x358>)
 80011ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80011b2:	e1e7      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011b4:	4bb8      	ldr	r3, [pc, #736]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80011ba:	e1e3      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d071      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d4:	4bae      	ldr	r3, [pc, #696]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	2200      	movs	r2, #0
 80011dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80011e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80011e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80011fa:	4622      	mov	r2, r4
 80011fc:	462b      	mov	r3, r5
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	f04f 0100 	mov.w	r1, #0
 8001206:	0159      	lsls	r1, r3, #5
 8001208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800120c:	0150      	lsls	r0, r2, #5
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4621      	mov	r1, r4
 8001214:	1a51      	subs	r1, r2, r1
 8001216:	6439      	str	r1, [r7, #64]	@ 0x40
 8001218:	4629      	mov	r1, r5
 800121a:	eb63 0301 	sbc.w	r3, r3, r1
 800121e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800122c:	4649      	mov	r1, r9
 800122e:	018b      	lsls	r3, r1, #6
 8001230:	4641      	mov	r1, r8
 8001232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001236:	4641      	mov	r1, r8
 8001238:	018a      	lsls	r2, r1, #6
 800123a:	4641      	mov	r1, r8
 800123c:	1a51      	subs	r1, r2, r1
 800123e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001240:	4649      	mov	r1, r9
 8001242:	eb63 0301 	sbc.w	r3, r3, r1
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001254:	4649      	mov	r1, r9
 8001256:	00cb      	lsls	r3, r1, #3
 8001258:	4641      	mov	r1, r8
 800125a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800125e:	4641      	mov	r1, r8
 8001260:	00ca      	lsls	r2, r1, #3
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	4603      	mov	r3, r0
 8001268:	4622      	mov	r2, r4
 800126a:	189b      	adds	r3, r3, r2
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
 800126e:	462b      	mov	r3, r5
 8001270:	460a      	mov	r2, r1
 8001272:	eb42 0303 	adc.w	r3, r2, r3
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001284:	4629      	mov	r1, r5
 8001286:	024b      	lsls	r3, r1, #9
 8001288:	4621      	mov	r1, r4
 800128a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800128e:	4621      	mov	r1, r4
 8001290:	024a      	lsls	r2, r1, #9
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800129a:	2200      	movs	r2, #0
 800129c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012a8:	f7fe ffb2 	bl	8000210 <__aeabi_uldivmod>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012b6:	e067      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b8:	4b75      	ldr	r3, [pc, #468]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	2200      	movs	r2, #0
 80012c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80012c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80012d2:	2300      	movs	r3, #0
 80012d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80012da:	4622      	mov	r2, r4
 80012dc:	462b      	mov	r3, r5
 80012de:	f04f 0000 	mov.w	r0, #0
 80012e2:	f04f 0100 	mov.w	r1, #0
 80012e6:	0159      	lsls	r1, r3, #5
 80012e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012ec:	0150      	lsls	r0, r2, #5
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4621      	mov	r1, r4
 80012f4:	1a51      	subs	r1, r2, r1
 80012f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80012f8:	4629      	mov	r1, r5
 80012fa:	eb63 0301 	sbc.w	r3, r3, r1
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800130c:	4649      	mov	r1, r9
 800130e:	018b      	lsls	r3, r1, #6
 8001310:	4641      	mov	r1, r8
 8001312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001316:	4641      	mov	r1, r8
 8001318:	018a      	lsls	r2, r1, #6
 800131a:	4641      	mov	r1, r8
 800131c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001320:	4649      	mov	r1, r9
 8001322:	eb63 0b01 	sbc.w	fp, r3, r1
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001332:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001336:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800133a:	4692      	mov	sl, r2
 800133c:	469b      	mov	fp, r3
 800133e:	4623      	mov	r3, r4
 8001340:	eb1a 0303 	adds.w	r3, sl, r3
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	462b      	mov	r3, r5
 8001348:	eb4b 0303 	adc.w	r3, fp, r3
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800135a:	4629      	mov	r1, r5
 800135c:	028b      	lsls	r3, r1, #10
 800135e:	4621      	mov	r1, r4
 8001360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001364:	4621      	mov	r1, r4
 8001366:	028a      	lsls	r2, r1, #10
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001370:	2200      	movs	r2, #0
 8001372:	673b      	str	r3, [r7, #112]	@ 0x70
 8001374:	677a      	str	r2, [r7, #116]	@ 0x74
 8001376:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800137a:	f7fe ff49 	bl	8000210 <__aeabi_uldivmod>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4613      	mov	r3, r2
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001388:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	0c1b      	lsrs	r3, r3, #16
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	3301      	adds	r3, #1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800139a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800139e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013aa:	e0eb      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b8:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d06b      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	2200      	movs	r2, #0
 80013cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80013ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80013d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80013d8:	2300      	movs	r3, #0
 80013da:	667b      	str	r3, [r7, #100]	@ 0x64
 80013dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80013e0:	4622      	mov	r2, r4
 80013e2:	462b      	mov	r3, r5
 80013e4:	f04f 0000 	mov.w	r0, #0
 80013e8:	f04f 0100 	mov.w	r1, #0
 80013ec:	0159      	lsls	r1, r3, #5
 80013ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4621      	mov	r1, r4
 80013fa:	1a51      	subs	r1, r2, r1
 80013fc:	61b9      	str	r1, [r7, #24]
 80013fe:	4629      	mov	r1, r5
 8001400:	eb63 0301 	sbc.w	r3, r3, r1
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001412:	4659      	mov	r1, fp
 8001414:	018b      	lsls	r3, r1, #6
 8001416:	4651      	mov	r1, sl
 8001418:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800141c:	4651      	mov	r1, sl
 800141e:	018a      	lsls	r2, r1, #6
 8001420:	4651      	mov	r1, sl
 8001422:	ebb2 0801 	subs.w	r8, r2, r1
 8001426:	4659      	mov	r1, fp
 8001428:	eb63 0901 	sbc.w	r9, r3, r1
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001438:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800143c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001440:	4690      	mov	r8, r2
 8001442:	4699      	mov	r9, r3
 8001444:	4623      	mov	r3, r4
 8001446:	eb18 0303 	adds.w	r3, r8, r3
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	462b      	mov	r3, r5
 800144e:	eb49 0303 	adc.w	r3, r9, r3
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001460:	4629      	mov	r1, r5
 8001462:	024b      	lsls	r3, r1, #9
 8001464:	4621      	mov	r1, r4
 8001466:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800146a:	4621      	mov	r1, r4
 800146c:	024a      	lsls	r2, r1, #9
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001476:	2200      	movs	r2, #0
 8001478:	65bb      	str	r3, [r7, #88]	@ 0x58
 800147a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800147c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001480:	f7fe fec6 	bl	8000210 <__aeabi_uldivmod>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4613      	mov	r3, r2
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800148e:	e065      	b.n	800155c <HAL_RCC_GetSysClockFreq+0x420>
 8001490:	40023800 	.word	0x40023800
 8001494:	00f42400 	.word	0x00f42400
 8001498:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x458>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	2200      	movs	r2, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	4611      	mov	r1, r2
 80014a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80014ae:	2300      	movs	r3, #0
 80014b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80014b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80014b6:	4642      	mov	r2, r8
 80014b8:	464b      	mov	r3, r9
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	0159      	lsls	r1, r3, #5
 80014c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c8:	0150      	lsls	r0, r2, #5
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4641      	mov	r1, r8
 80014d0:	1a51      	subs	r1, r2, r1
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	4649      	mov	r1, r9
 80014d6:	eb63 0301 	sbc.w	r3, r3, r1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014e8:	4659      	mov	r1, fp
 80014ea:	018b      	lsls	r3, r1, #6
 80014ec:	4651      	mov	r1, sl
 80014ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f2:	4651      	mov	r1, sl
 80014f4:	018a      	lsls	r2, r1, #6
 80014f6:	4651      	mov	r1, sl
 80014f8:	1a54      	subs	r4, r2, r1
 80014fa:	4659      	mov	r1, fp
 80014fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	00eb      	lsls	r3, r5, #3
 800150a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150e:	00e2      	lsls	r2, r4, #3
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	4643      	mov	r3, r8
 8001516:	18e3      	adds	r3, r4, r3
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	464b      	mov	r3, r9
 800151c:	eb45 0303 	adc.w	r3, r5, r3
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800152e:	4629      	mov	r1, r5
 8001530:	028b      	lsls	r3, r1, #10
 8001532:	4621      	mov	r1, r4
 8001534:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001538:	4621      	mov	r1, r4
 800153a:	028a      	lsls	r2, r1, #10
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001544:	2200      	movs	r2, #0
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001548:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800154a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800154e:	f7fe fe5f 	bl	8000210 <__aeabi_uldivmod>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4613      	mov	r3, r2
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x458>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	0f1b      	lsrs	r3, r3, #28
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800156a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800156e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800157a:	e003      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x45c>)
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001582:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001588:	4618      	mov	r0, r3
 800158a:	37b8      	adds	r7, #184	@ 0xb8
 800158c:	46bd      	mov	sp, r7
 800158e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	00f42400 	.word	0x00f42400

0800159c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e28d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8083 	beq.w	80016c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015bc:	4b94      	ldr	r3, [pc, #592]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d019      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015c8:	4b91      	ldr	r3, [pc, #580]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b88      	ldr	r3, [pc, #544]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b84      	ldr	r3, [pc, #528]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x124>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e25a      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x90>
 800161e:	4b7c      	ldr	r3, [pc, #496]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7b      	ldr	r2, [pc, #492]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xb4>
 8001636:	4b76      	ldr	r3, [pc, #472]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a75      	ldr	r2, [pc, #468]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a72      	ldr	r2, [pc, #456]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xcc>
 8001650:	4b6f      	ldr	r3, [pc, #444]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6e      	ldr	r2, [pc, #440]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b6c      	ldr	r3, [pc, #432]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6b      	ldr	r2, [pc, #428]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff f990 	bl	8000994 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff f98c 	bl	8000994 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e21f      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xdc>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f97c 	bl	8000994 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff f978 	bl	8000994 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e20b      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x104>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d06f      	beq.n	80017ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016ce:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d017      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016da:	4b4d      	ldr	r3, [pc, #308]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
        || \
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b41      	ldr	r3, [pc, #260]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1d3      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4937      	ldr	r1, [pc, #220]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e03a      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_RCC_OscConfig+0x278>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff f925 	bl	8000994 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff f921 	bl	8000994 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1b4      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4925      	ldr	r1, [pc, #148]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x278>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff f904 	bl	8000994 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff f900 	bl	8000994 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e193      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d036      	beq.n	8001828 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff f8e4 	bl	8000994 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff f8e0 	bl	8000994 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e173      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_RCC_OscConfig+0x274>)
 80017e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x234>
 80017ee:	e01b      	b.n	8001828 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_OscConfig+0x27c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff f8cd 	bl	8000994 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	e00e      	b.n	800181c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fe:	f7ff f8c9 	bl	8000994 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d907      	bls.n	800181c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e15c      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001810:	40023800 	.word	0x40023800
 8001814:	42470000 	.word	0x42470000
 8001818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800181e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ea      	bne.n	80017fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8097 	beq.w	8001964 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff f889 	bl	8000994 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff f885 	bl	8000994 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e118      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <HAL_RCC_OscConfig+0x4b0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x31e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b0:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x340>
 80018c2:	4b61      	ldr	r3, [pc, #388]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c6:	4a60      	ldr	r2, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ce:	4b5e      	ldr	r3, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d2:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x358>
 80018dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e0:	4a59      	ldr	r2, [pc, #356]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d015      	beq.n	8001928 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f84a 	bl	8000994 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff f846 	bl	8000994 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0d7      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ee      	beq.n	8001904 <HAL_RCC_OscConfig+0x368>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f834 	bl	8000994 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f830 	bl	8000994 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0c1      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ee      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80ad 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d145      	bne.n	8001a0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f804 	bl	8000994 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f800 	bl	8000994 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e093      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7fe ffd5 	bl	8000994 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7fe ffd1 	bl	8000994 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e064      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x452>
 8001a0c:	e05c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x4b4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7fe ffbe 	bl	8000994 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe ffba 	bl	8000994 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04d      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x480>
 8001a3a:	e045      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e040      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_RCC_OscConfig+0x538>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d030      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d129      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d122      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f839 	bl	8001b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 f9c0 	bl	8001e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04e      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bce:	d01d      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40010400 	.word	0x40010400
 8001c64:	40014000 	.word	0x40014000
 8001c68:	40001800 	.word	0x40001800

08001c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d020      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0202 	mvn.w	r2, #2
 8001ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8d2 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8c4 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8d5 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d020      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01b      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ac 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f89e 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8af 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d020      	beq.n	8001d68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0208 	mvn.w	r2, #8
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f886 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f878 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f889 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d020      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0210 	mvn.w	r2, #16
 8001d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f860 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f852 	bl	8001e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f863 	bl	8001e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fc8a 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f906 	bl	8002008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f834 	bl	8001e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8d8 	bl	8001ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a46      	ldr	r2, [pc, #280]	@ (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eba:	d00f      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a43      	ldr	r2, [pc, #268]	@ (8001fcc <TIM_Base_SetConfig+0x130>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a42      	ldr	r2, [pc, #264]	@ (8001fd0 <TIM_Base_SetConfig+0x134>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a41      	ldr	r2, [pc, #260]	@ (8001fd4 <TIM_Base_SetConfig+0x138>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	@ (8001fd8 <TIM_Base_SetConfig+0x13c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a35      	ldr	r2, [pc, #212]	@ (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efc:	d027      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <TIM_Base_SetConfig+0x130>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d023      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <TIM_Base_SetConfig+0x134>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a30      	ldr	r2, [pc, #192]	@ (8001fd4 <TIM_Base_SetConfig+0x138>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <TIM_Base_SetConfig+0x13c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d017      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2e      	ldr	r2, [pc, #184]	@ (8001fdc <TIM_Base_SetConfig+0x140>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe0 <TIM_Base_SetConfig+0x144>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00f      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe4 <TIM_Base_SetConfig+0x148>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <TIM_Base_SetConfig+0x14c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	@ (8001fec <TIM_Base_SetConfig+0x150>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <TIM_Base_SetConfig+0x154>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a10      	ldr	r2, [pc, #64]	@ (8001fc8 <TIM_Base_SetConfig+0x12c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0xf8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <TIM_Base_SetConfig+0x13c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 0201 	bic.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40000c00 	.word	0x40000c00
 8001fd8:	40010400 	.word	0x40010400
 8001fdc:	40014000 	.word	0x40014000
 8001fe0:	40014400 	.word	0x40014400
 8001fe4:	40014800 	.word	0x40014800
 8001fe8:	40001800 	.word	0x40001800
 8001fec:	40001c00 	.word	0x40001c00
 8001ff0:	40002000 	.word	0x40002000

08001ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002026:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <xTaskIncrementTick+0x204>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 80ed 	bne.w	800220a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002030:	4b7c      	ldr	r3, [pc, #496]	@ (8002224 <xTaskIncrementTick+0x208>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002038:	4a7a      	ldr	r2, [pc, #488]	@ (8002224 <xTaskIncrementTick+0x208>)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d121      	bne.n	8002088 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002044:	4b78      	ldr	r3, [pc, #480]	@ (8002228 <xTaskIncrementTick+0x20c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800204e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	e7fd      	b.n	8002062 <xTaskIncrementTick+0x46>
 8002066:	4b70      	ldr	r3, [pc, #448]	@ (8002228 <xTaskIncrementTick+0x20c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <xTaskIncrementTick+0x210>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6d      	ldr	r2, [pc, #436]	@ (8002228 <xTaskIncrementTick+0x20c>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4a6d      	ldr	r2, [pc, #436]	@ (800222c <xTaskIncrementTick+0x210>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <xTaskIncrementTick+0x214>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a6b      	ldr	r2, [pc, #428]	@ (8002230 <xTaskIncrementTick+0x214>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	f000 f93e 	bl	8002304 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002088:	4b6a      	ldr	r3, [pc, #424]	@ (8002234 <xTaskIncrementTick+0x218>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	429a      	cmp	r2, r3
 8002090:	f0c0 80a6 	bcc.w	80021e0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002094:	4b64      	ldr	r3, [pc, #400]	@ (8002228 <xTaskIncrementTick+0x20c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800209e:	4b65      	ldr	r3, [pc, #404]	@ (8002234 <xTaskIncrementTick+0x218>)
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	601a      	str	r2, [r3, #0]
                    break;
 80020a6:	e09b      	b.n	80021e0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <xTaskIncrementTick+0x20c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d203      	bcs.n	80020c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002234 <xTaskIncrementTick+0x218>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020c6:	e08b      	b.n	80021e0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	6892      	ldr	r2, [r2, #8]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3304      	adds	r3, #4
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d103      	bne.n	80020f6 <xTaskIncrementTick+0xda>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01e      	beq.n	800214c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	6a12      	ldr	r2, [r2, #32]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	69d2      	ldr	r2, [r2, #28]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3318      	adds	r3, #24
 8002130:	429a      	cmp	r2, r3
 8002132:	d103      	bne.n	800213c <xTaskIncrementTick+0x120>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	2201      	movs	r2, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <xTaskIncrementTick+0x21c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	4a37      	ldr	r2, [pc, #220]	@ (8002238 <xTaskIncrementTick+0x21c>)
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002162:	4936      	ldr	r1, [pc, #216]	@ (800223c <xTaskIncrementTick+0x220>)
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3304      	adds	r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	3204      	adds	r2, #4
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <xTaskIncrementTick+0x220>)
 80021a2:	441a      	add	r2, r3
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ac:	4923      	ldr	r1, [pc, #140]	@ (800223c <xTaskIncrementTick+0x220>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	481f      	ldr	r0, [pc, #124]	@ (800223c <xTaskIncrementTick+0x220>)
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4403      	add	r3, r0
 80021c8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <xTaskIncrementTick+0x224>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f67f af5d 	bls.w	8002094 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021de:	e759      	b.n	8002094 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <xTaskIncrementTick+0x224>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e6:	4915      	ldr	r1, [pc, #84]	@ (800223c <xTaskIncrementTick+0x220>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d901      	bls.n	80021fc <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <xTaskIncrementTick+0x228>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
 8002208:	e004      	b.n	8002214 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800220a:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <xTaskIncrementTick+0x22c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <xTaskIncrementTick+0x22c>)
 8002212:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002216:	4618      	mov	r0, r3
 8002218:	3728      	adds	r7, #40	@ 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200000fc 	.word	0x200000fc
 8002224:	200000e4 	.word	0x200000e4
 8002228:	200000dc 	.word	0x200000dc
 800222c:	200000e0 	.word	0x200000e0
 8002230:	200000f4 	.word	0x200000f4
 8002234:	200000f8 	.word	0x200000f8
 8002238:	200000e8 	.word	0x200000e8
 800223c:	20000078 	.word	0x20000078
 8002240:	20000074 	.word	0x20000074
 8002244:	200000f0 	.word	0x200000f0
 8002248:	200000ec 	.word	0x200000ec

0800224c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <vTaskSwitchContext+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <vTaskSwitchContext+0xa8>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002260:	e040      	b.n	80022e4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002262:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <vTaskSwitchContext+0xa8>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002268:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <vTaskSwitchContext+0xac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f1c3 031f 	rsb	r3, r3, #31
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	491f      	ldr	r1, [pc, #124]	@ (80022fc <vTaskSwitchContext+0xb0>)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <vTaskSwitchContext+0x5e>
        __asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	607b      	str	r3, [r7, #4]
    }
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	e7fd      	b.n	80022a6 <vTaskSwitchContext+0x5a>
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <vTaskSwitchContext+0xb0>)
 80022b6:	4413      	add	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	3308      	adds	r3, #8
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d104      	bne.n	80022da <vTaskSwitchContext+0x8e>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a07      	ldr	r2, [pc, #28]	@ (8002300 <vTaskSwitchContext+0xb4>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	200000fc 	.word	0x200000fc
 80022f4:	200000f0 	.word	0x200000f0
 80022f8:	200000e8 	.word	0x200000e8
 80022fc:	20000078 	.word	0x20000078
 8002300:	20000074 	.word	0x20000074

08002304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002308:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <prvResetNextTaskUnblockTime+0x30>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <prvResetNextTaskUnblockTime+0x34>)
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800231a:	e005      	b.n	8002328 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <prvResetNextTaskUnblockTime+0x30>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <prvResetNextTaskUnblockTime+0x34>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200000dc 	.word	0x200000dc
 8002338:	200000f8 	.word	0x200000f8
 800233c:	00000000 	.word	0x00000000

08002340 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002340:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <pxCurrentTCBConst2>)
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	6808      	ldr	r0, [r1, #0]
 8002346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234a:	f380 8809 	msr	PSP, r0
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f380 8811 	msr	BASEPRI, r0
 800235a:	4770      	bx	lr
 800235c:	f3af 8000 	nop.w

08002360 <pxCurrentTCBConst2>:
 8002360:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
	...

08002370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002370:	f3ef 8009 	mrs	r0, PSP
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <pxCurrentTCBConst>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f01e 0f10 	tst.w	lr, #16
 8002380:	bf08      	it	eq
 8002382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238a:	6010      	str	r0, [r2, #0]
 800238c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002394:	f380 8811 	msr	BASEPRI, r0
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f7ff ff54 	bl	800224c <vTaskSwitchContext>
 80023a4:	f04f 0000 	mov.w	r0, #0
 80023a8:	f380 8811 	msr	BASEPRI, r0
 80023ac:	bc09      	pop	{r0, r3}
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	6808      	ldr	r0, [r1, #0]
 80023b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b6:	f01e 0f10 	tst.w	lr, #16
 80023ba:	bf08      	it	eq
 80023bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023c0:	f380 8809 	msr	PSP, r0
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w

080023d0 <pxCurrentTCBConst>:
 80023d0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop

080023d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
        __asm volatile
 80023de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	607b      	str	r3, [r7, #4]
    }
 80023f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023f2:	f7ff fe13 	bl	800201c <xTaskIncrementTick>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <SysTick_Handler+0x40>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	2300      	movs	r3, #0
 8002406:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800240e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <memset>:
 800241c:	4402      	add	r2, r0
 800241e:	4603      	mov	r3, r0
 8002420:	4293      	cmp	r3, r2
 8002422:	d100      	bne.n	8002426 <memset+0xa>
 8002424:	4770      	bx	lr
 8002426:	f803 1b01 	strb.w	r1, [r3], #1
 800242a:	e7f9      	b.n	8002420 <memset+0x4>

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	4d0d      	ldr	r5, [pc, #52]	@ (8002464 <__libc_init_array+0x38>)
 8002430:	4c0d      	ldr	r4, [pc, #52]	@ (8002468 <__libc_init_array+0x3c>)
 8002432:	1b64      	subs	r4, r4, r5
 8002434:	10a4      	asrs	r4, r4, #2
 8002436:	2600      	movs	r6, #0
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	4d0b      	ldr	r5, [pc, #44]	@ (800246c <__libc_init_array+0x40>)
 800243e:	4c0c      	ldr	r4, [pc, #48]	@ (8002470 <__libc_init_array+0x44>)
 8002440:	f000 f818 	bl	8002474 <_init>
 8002444:	1b64      	subs	r4, r4, r5
 8002446:	10a4      	asrs	r4, r4, #2
 8002448:	2600      	movs	r6, #0
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f855 3b04 	ldr.w	r3, [r5], #4
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f855 3b04 	ldr.w	r3, [r5], #4
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	080024ac 	.word	0x080024ac
 8002468:	080024ac 	.word	0x080024ac
 800246c:	080024ac 	.word	0x080024ac
 8002470:	080024b0 	.word	0x080024b0

08002474 <_init>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr

08002480 <_fini>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	bf00      	nop
 8002484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002486:	bc08      	pop	{r3}
 8002488:	469e      	mov	lr, r3
 800248a:	4770      	bx	lr
